
PONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d2c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ccc  08006ccc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd4  08006cd4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000078  08006d54  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08006d54  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cfe  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdb  00000000  00000000  00033da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00036d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00037ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193af  00000000  00000000  00038ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165fb  00000000  00000000  00052297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b60a  00000000  00000000  00068892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103e9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a60  00000000  00000000  00103eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005ea8 	.word	0x08005ea8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	08005ea8 	.word	0x08005ea8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2iz>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d215      	bcs.n	80009a6 <__aeabi_d2iz+0x36>
 800097a:	d511      	bpl.n	80009a0 <__aeabi_d2iz+0x30>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d912      	bls.n	80009ac <__aeabi_d2iz+0x3c>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	bf18      	it	ne
 800099c:	4240      	negne	r0, r0
 800099e:	4770      	bx	lr
 80009a0:	f04f 0000 	mov.w	r0, #0
 80009a4:	4770      	bx	lr
 80009a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009aa:	d105      	bne.n	80009b8 <__aeabi_d2iz+0x48>
 80009ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	bf08      	it	eq
 80009b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_uldivmod>:
 80009c0:	b953      	cbnz	r3, 80009d8 <__aeabi_uldivmod+0x18>
 80009c2:	b94a      	cbnz	r2, 80009d8 <__aeabi_uldivmod+0x18>
 80009c4:	2900      	cmp	r1, #0
 80009c6:	bf08      	it	eq
 80009c8:	2800      	cmpeq	r0, #0
 80009ca:	bf1c      	itt	ne
 80009cc:	f04f 31ff 	movne.w	r1, #4294967295
 80009d0:	f04f 30ff 	movne.w	r0, #4294967295
 80009d4:	f000 b974 	b.w	8000cc0 <__aeabi_idiv0>
 80009d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e0:	f000 f806 	bl	80009f0 <__udivmoddi4>
 80009e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <__udivmoddi4>:
 80009f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f4:	9d08      	ldr	r5, [sp, #32]
 80009f6:	4604      	mov	r4, r0
 80009f8:	468e      	mov	lr, r1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d14d      	bne.n	8000a9a <__udivmoddi4+0xaa>
 80009fe:	428a      	cmp	r2, r1
 8000a00:	4694      	mov	ip, r2
 8000a02:	d969      	bls.n	8000ad8 <__udivmoddi4+0xe8>
 8000a04:	fab2 f282 	clz	r2, r2
 8000a08:	b152      	cbz	r2, 8000a20 <__udivmoddi4+0x30>
 8000a0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0e:	f1c2 0120 	rsb	r1, r2, #32
 8000a12:	fa20 f101 	lsr.w	r1, r0, r1
 8000a16:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1e:	4094      	lsls	r4, r2
 8000a20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a24:	0c21      	lsrs	r1, r4, #16
 8000a26:	fbbe f6f8 	udiv	r6, lr, r8
 8000a2a:	fa1f f78c 	uxth.w	r7, ip
 8000a2e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a36:	fb06 f107 	mul.w	r1, r6, r7
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d90a      	bls.n	8000a54 <__udivmoddi4+0x64>
 8000a3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a46:	f080 811f 	bcs.w	8000c88 <__udivmoddi4+0x298>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 811c 	bls.w	8000c88 <__udivmoddi4+0x298>
 8000a50:	3e02      	subs	r6, #2
 8000a52:	4463      	add	r3, ip
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 f707 	mul.w	r7, r0, r7
 8000a68:	42a7      	cmp	r7, r4
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x92>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a74:	f080 810a 	bcs.w	8000c8c <__udivmoddi4+0x29c>
 8000a78:	42a7      	cmp	r7, r4
 8000a7a:	f240 8107 	bls.w	8000c8c <__udivmoddi4+0x29c>
 8000a7e:	4464      	add	r4, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a86:	1be4      	subs	r4, r4, r7
 8000a88:	2600      	movs	r6, #0
 8000a8a:	b11d      	cbz	r5, 8000a94 <__udivmoddi4+0xa4>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c5 4300 	strd	r4, r3, [r5]
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0xc2>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	f000 80ef 	beq.w	8000c82 <__udivmoddi4+0x292>
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aaa:	4630      	mov	r0, r6
 8000aac:	4631      	mov	r1, r6
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	fab3 f683 	clz	r6, r3
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d14a      	bne.n	8000b50 <__udivmoddi4+0x160>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xd4>
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	f200 80f9 	bhi.w	8000cb6 <__udivmoddi4+0x2c6>
 8000ac4:	1a84      	subs	r4, r0, r2
 8000ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	469e      	mov	lr, r3
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d0e0      	beq.n	8000a94 <__udivmoddi4+0xa4>
 8000ad2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad6:	e7dd      	b.n	8000a94 <__udivmoddi4+0xa4>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xec>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	f040 8092 	bne.w	8000c0a <__udivmoddi4+0x21a>
 8000ae6:	eba1 010c 	sub.w	r1, r1, ip
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f fe8c 	uxth.w	lr, ip
 8000af2:	2601      	movs	r6, #1
 8000af4:	0c20      	lsrs	r0, r4, #16
 8000af6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000afa:	fb07 1113 	mls	r1, r7, r3, r1
 8000afe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b02:	fb0e f003 	mul.w	r0, lr, r3
 8000b06:	4288      	cmp	r0, r1
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x12c>
 8000b0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x12a>
 8000b14:	4288      	cmp	r0, r1
 8000b16:	f200 80cb 	bhi.w	8000cb0 <__udivmoddi4+0x2c0>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	1a09      	subs	r1, r1, r0
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b24:	fb07 1110 	mls	r1, r7, r0, r1
 8000b28:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b30:	45a6      	cmp	lr, r4
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x156>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d202      	bcs.n	8000b44 <__udivmoddi4+0x154>
 8000b3e:	45a6      	cmp	lr, r4
 8000b40:	f200 80bb 	bhi.w	8000cba <__udivmoddi4+0x2ca>
 8000b44:	4608      	mov	r0, r1
 8000b46:	eba4 040e 	sub.w	r4, r4, lr
 8000b4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4e:	e79c      	b.n	8000a8a <__udivmoddi4+0x9a>
 8000b50:	f1c6 0720 	rsb	r7, r6, #32
 8000b54:	40b3      	lsls	r3, r6
 8000b56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b62:	fa01 f306 	lsl.w	r3, r1, r6
 8000b66:	431c      	orrs	r4, r3
 8000b68:	40f9      	lsrs	r1, r7
 8000b6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b72:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b76:	0c20      	lsrs	r0, r4, #16
 8000b78:	fa1f fe8c 	uxth.w	lr, ip
 8000b7c:	fb09 1118 	mls	r1, r9, r8, r1
 8000b80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b84:	fb08 f00e 	mul.w	r0, r8, lr
 8000b88:	4288      	cmp	r0, r1
 8000b8a:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8e:	d90b      	bls.n	8000ba8 <__udivmoddi4+0x1b8>
 8000b90:	eb1c 0101 	adds.w	r1, ip, r1
 8000b94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b98:	f080 8088 	bcs.w	8000cac <__udivmoddi4+0x2bc>
 8000b9c:	4288      	cmp	r0, r1
 8000b9e:	f240 8085 	bls.w	8000cac <__udivmoddi4+0x2bc>
 8000ba2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba6:	4461      	add	r1, ip
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb0:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bbc:	458e      	cmp	lr, r1
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x1e2>
 8000bc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc8:	d26c      	bcs.n	8000ca4 <__udivmoddi4+0x2b4>
 8000bca:	458e      	cmp	lr, r1
 8000bcc:	d96a      	bls.n	8000ca4 <__udivmoddi4+0x2b4>
 8000bce:	3802      	subs	r0, #2
 8000bd0:	4461      	add	r1, ip
 8000bd2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bda:	eba1 010e 	sub.w	r1, r1, lr
 8000bde:	42a1      	cmp	r1, r4
 8000be0:	46c8      	mov	r8, r9
 8000be2:	46a6      	mov	lr, r4
 8000be4:	d356      	bcc.n	8000c94 <__udivmoddi4+0x2a4>
 8000be6:	d053      	beq.n	8000c90 <__udivmoddi4+0x2a0>
 8000be8:	b15d      	cbz	r5, 8000c02 <__udivmoddi4+0x212>
 8000bea:	ebb3 0208 	subs.w	r2, r3, r8
 8000bee:	eb61 010e 	sbc.w	r1, r1, lr
 8000bf2:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf6:	fa22 f306 	lsr.w	r3, r2, r6
 8000bfa:	40f1      	lsrs	r1, r6
 8000bfc:	431f      	orrs	r7, r3
 8000bfe:	e9c5 7100 	strd	r7, r1, [r5]
 8000c02:	2600      	movs	r6, #0
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	f1c2 0320 	rsb	r3, r2, #32
 8000c0e:	40d8      	lsrs	r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	fa21 f303 	lsr.w	r3, r1, r3
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	4301      	orrs	r1, r0
 8000c1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c20:	fa1f fe8c 	uxth.w	lr, ip
 8000c24:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c28:	fb07 3610 	mls	r6, r7, r0, r3
 8000c2c:	0c0b      	lsrs	r3, r1, #16
 8000c2e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c32:	fb00 f60e 	mul.w	r6, r0, lr
 8000c36:	429e      	cmp	r6, r3
 8000c38:	fa04 f402 	lsl.w	r4, r4, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x260>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c46:	d22f      	bcs.n	8000ca8 <__udivmoddi4+0x2b8>
 8000c48:	429e      	cmp	r6, r3
 8000c4a:	d92d      	bls.n	8000ca8 <__udivmoddi4+0x2b8>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1b9b      	subs	r3, r3, r6
 8000c52:	b289      	uxth	r1, r1
 8000c54:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c58:	fb07 3316 	mls	r3, r7, r6, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb06 f30e 	mul.w	r3, r6, lr
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x28a>
 8000c68:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c70:	d216      	bcs.n	8000ca0 <__udivmoddi4+0x2b0>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d914      	bls.n	8000ca0 <__udivmoddi4+0x2b0>
 8000c76:	3e02      	subs	r6, #2
 8000c78:	4461      	add	r1, ip
 8000c7a:	1ac9      	subs	r1, r1, r3
 8000c7c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c80:	e738      	b.n	8000af4 <__udivmoddi4+0x104>
 8000c82:	462e      	mov	r6, r5
 8000c84:	4628      	mov	r0, r5
 8000c86:	e705      	b.n	8000a94 <__udivmoddi4+0xa4>
 8000c88:	4606      	mov	r6, r0
 8000c8a:	e6e3      	b.n	8000a54 <__udivmoddi4+0x64>
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	e6f8      	b.n	8000a82 <__udivmoddi4+0x92>
 8000c90:	454b      	cmp	r3, r9
 8000c92:	d2a9      	bcs.n	8000be8 <__udivmoddi4+0x1f8>
 8000c94:	ebb9 0802 	subs.w	r8, r9, r2
 8000c98:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c9c:	3801      	subs	r0, #1
 8000c9e:	e7a3      	b.n	8000be8 <__udivmoddi4+0x1f8>
 8000ca0:	4646      	mov	r6, r8
 8000ca2:	e7ea      	b.n	8000c7a <__udivmoddi4+0x28a>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	e794      	b.n	8000bd2 <__udivmoddi4+0x1e2>
 8000ca8:	4640      	mov	r0, r8
 8000caa:	e7d1      	b.n	8000c50 <__udivmoddi4+0x260>
 8000cac:	46d0      	mov	r8, sl
 8000cae:	e77b      	b.n	8000ba8 <__udivmoddi4+0x1b8>
 8000cb0:	3b02      	subs	r3, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	e732      	b.n	8000b1c <__udivmoddi4+0x12c>
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	e709      	b.n	8000ace <__udivmoddi4+0xde>
 8000cba:	4464      	add	r4, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e742      	b.n	8000b46 <__udivmoddi4+0x156>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000cd8:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000cda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d0c:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <MX_ADC1_Init+0xc4>)
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d18:	2202      	movs	r2, #2
 8000d1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2a:	4815      	ldr	r0, [pc, #84]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d2c:	f001 fcc0 	bl	80026b0 <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000d36:	f000 fe73 	bl	8001a20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d4c:	f001 fe40 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d56:	f000 fe63 	bl	8001a20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_ADC1_Init+0xbc>)
 8000d68:	f001 fe32 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d72:	f000 fe55 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000094 	.word	0x20000094
 8000d84:	40012000 	.word	0x40012000
 8000d88:	0f000001 	.word	0x0f000001

08000d8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_ADC_MspInit+0x7c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d127      	bne.n	8000dfe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_ADC_MspInit+0x80>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <HAL_ADC_MspInit+0x80>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_ADC_MspInit+0x80>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_ADC_MspInit+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_ADC_MspInit+0x80>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_ADC_MspInit+0x80>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000de6:	2306      	movs	r3, #6
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_ADC_MspInit+0x84>)
 8000dfa:	f002 fcf9 	bl	80037f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40012000 	.word	0x40012000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <clearDisplay>:
{
	ST7735_FillRectangleFast(x, y, 6, 6, ST7735_WHITE);
}

void clearDisplay()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	ST7735_FillScreenFast(ST7735_BLACK);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f001 f94e 	bl	80020ba <ST7735_FillScreenFast>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <drawNewGame>:

void drawNewGame()
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af02      	add	r7, sp, #8
	ST7735_FillRectangleFast(44, 0, 40, PADDLE_HEIGHT, ST7735_WHITE); 	//p1
 8000e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2305      	movs	r3, #5
 8000e30:	2228      	movs	r2, #40	; 0x28
 8000e32:	2100      	movs	r1, #0
 8000e34:	202c      	movs	r0, #44	; 0x2c
 8000e36:	f001 f8a9 	bl	8001f8c <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(44, 155, 40, PADDLE_HEIGHT, ST7735_WHITE); 	//p2
 8000e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2305      	movs	r3, #5
 8000e42:	2228      	movs	r2, #40	; 0x28
 8000e44:	219b      	movs	r1, #155	; 0x9b
 8000e46:	202c      	movs	r0, #44	; 0x2c
 8000e48:	f001 f8a0 	bl	8001f8c <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(61, 71, 6, 6, ST7735_WHITE); 	//ball
 8000e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2306      	movs	r3, #6
 8000e54:	2206      	movs	r2, #6
 8000e56:	2147      	movs	r1, #71	; 0x47
 8000e58:	203d      	movs	r0, #61	; 0x3d
 8000e5a:	f001 f897 	bl	8001f8c <ST7735_FillRectangleFast>
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <drawGameOver>:

void drawGameOver()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af04      	add	r7, sp, #16
	 ST7735_FillScreen(ST7735_MAGENTA);
 8000e6a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000e6e:	f001 f913 	bl	8002098 <ST7735_FillScreen>
	 ST7735_WriteString(15, 80, "GAME OVER", Font_11x18, ST7735_WHITE, ST7735_MAGENTA);
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <drawGameOver+0x34>)
 8000e74:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7e:	9201      	str	r2, [sp, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <drawGameOver+0x38>)
 8000e88:	2150      	movs	r1, #80	; 0x50
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 ffbf 	bl	8001e0e <ST7735_WriteString>
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	08005ec0 	.word	0x08005ec0

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_DMA_Init+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <MX_DMA_Init+0x4c>)
 8000eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_DMA_Init+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	203a      	movs	r0, #58	; 0x3a
 8000ec8:	f002 f87b 	bl	8002fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ecc:	203a      	movs	r0, #58	; 0x3a
 8000ece:	f002 f894 	bl	8002ffa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2046      	movs	r0, #70	; 0x46
 8000ed8:	f002 f873 	bl	8002fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000edc:	2046      	movs	r0, #70	; 0x46
 8000ede:	f002 f88c 	bl	8002ffa <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <calculateJoystickTilt>:
#endif

unsigned char bt_data[7];
unsigned char joystick_tilt[2];

void calculateJoystickTilt(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
	uint32_t adc_value[2];
    for (int i = 0; i < 2; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e024      	b.n	8000f46 <calculateJoystickTilt+0x56>
		HAL_ADC_Start(&JOYSTICKS_ADC);
 8000efc:	4816      	ldr	r0, [pc, #88]	; (8000f58 <calculateJoystickTilt+0x68>)
 8000efe:	f001 fc1b 	bl	8002738 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&JOYSTICKS_ADC, 480);
 8000f02:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <calculateJoystickTilt+0x68>)
 8000f08:	f001 fcca 	bl	80028a0 <HAL_ADC_PollForConversion>
    	adc_value[i] = HAL_ADC_GetValue(&JOYSTICKS_ADC);
 8000f0c:	4812      	ldr	r0, [pc, #72]	; (8000f58 <calculateJoystickTilt+0x68>)
 8000f0e:	f001 fd52 	bl	80029b6 <HAL_ADC_GetValue>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3310      	adds	r3, #16
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f843 2c0c 	str.w	r2, [r3, #-12]
    	joystick_tilt[i] = (unsigned char)calculateTilt(adc_value[i]);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3310      	adds	r3, #16
 8000f26:	443b      	add	r3, r7
 8000f28:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f8ad 	bl	800108c <calculateTilt>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <calculateJoystickTilt+0x6c>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 2; i++) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	ddd7      	ble.n	8000efc <calculateJoystickTilt+0xc>
    }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000094 	.word	0x20000094
 8000f5c:	200000e4 	.word	0x200000e4

08000f60 <doGameTick>:


void doGameTick(ball *b)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	moveBallUpY(b, (int)bt_data[5]);
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <doGameTick+0x40>)
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fa58 	bl	8001424 <moveBallUpY>
	moveBallDownY(b, (int)bt_data[5]);
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <doGameTick+0x40>)
 8000f76:	795b      	ldrb	r3, [r3, #5]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fab9 	bl	80014f2 <moveBallDownY>
	moveBallDownX(b, (int)bt_data[4]);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <doGameTick+0x40>)
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 faff 	bl	800158a <moveBallDownX>
	moveBallUpX(b, (int)bt_data[4]);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <doGameTick+0x40>)
 8000f8e:	791b      	ldrb	r3, [r3, #4]
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fb47 	bl	8001626 <moveBallUpX>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000dc 	.word	0x200000dc

08000fa4 <restartGame>:


void restartGame(ball *b, player *p1, player *p2)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	stopGameTicks();
 8000fb0:	f000 f85e 	bl	8001070 <stopGameTicks>
	clearDisplay();
 8000fb4:	f7ff ff2e 	bl	8000e14 <clearDisplay>
	resetGameData(b, p1, p2);
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f81f 	bl	8001000 <resetGameData>
	startBluetooth();
 8000fc2:	f000 f809 	bl	8000fd8 <startBluetooth>
	drawNewGame();
 8000fc6:	f7ff ff2c 	bl	8000e22 <drawNewGame>
	startGameTicks();
 8000fca:	f000 f843 	bl	8001054 <startGameTicks>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <startBluetooth>:

void startBluetooth(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&BLUETOOTH, bt_data, sizeof(bt_data));
 8000fdc:	2207      	movs	r2, #7
 8000fde:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <startBluetooth+0x1c>)
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <startBluetooth+0x20>)
 8000fe2:	f004 f807 	bl	8004ff4 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&BLUETOOTH, joystick_tilt, sizeof(joystick_tilt));
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4904      	ldr	r1, [pc, #16]	; (8000ffc <startBluetooth+0x24>)
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <startBluetooth+0x20>)
 8000fec:	f003 ff84 	bl	8004ef8 <HAL_UART_Transmit_DMA>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200000dc 	.word	0x200000dc
 8000ff8:	200001f4 	.word	0x200001f4
 8000ffc:	200000e4 	.word	0x200000e4

08001000 <resetGameData>:

void resetGameData(ball *b, player *p1, player *p2)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	p1->x=64;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	601a      	str	r2, [r3, #0]
	p1->y=0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
	p2->x=64;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	601a      	str	r2, [r3, #0]
	p2->y=155;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	229b      	movs	r2, #155	; 0x9b
 8001022:	605a      	str	r2, [r3, #4]
	b->x = 64;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	601a      	str	r2, [r3, #0]
	b->y = 77;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	224d      	movs	r2, #77	; 0x4d
 800102e:	605a      	str	r2, [r3, #4]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <gameOver>:

void gameOver(ball *b)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	stopGameTicks();
 8001044:	f000 f814 	bl	8001070 <stopGameTicks>
	drawGameOver();
 8001048:	f7ff ff0c 	bl	8000e64 <drawGameOver>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <startGameTicks>:

void startGameTicks()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&PADDLE_TIMER);
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <startGameTicks+0x14>)
 800105a:	f003 fc9f 	bl	800499c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&GAME_TIMER);
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <startGameTicks+0x18>)
 8001060:	f003 fc9c 	bl	800499c <HAL_TIM_Base_Start_IT>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200001ac 	.word	0x200001ac
 800106c:	20000164 	.word	0x20000164

08001070 <stopGameTicks>:

void stopGameTicks()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&PADDLE_TIMER);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <stopGameTicks+0x14>)
 8001076:	f003 fcf3 	bl	8004a60 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&GAME_TIMER);
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <stopGameTicks+0x18>)
 800107c:	f003 fcf0 	bl	8004a60 <HAL_TIM_Base_Stop_IT>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001ac 	.word	0x200001ac
 8001088:	20000164 	.word	0x20000164

0800108c <calculateTilt>:

int calculateTilt(uint32_t var){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	return (int)round(10.0*(var/4096.0));
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff f9df 	bl	8000458 <__aeabi_ui2d>
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <calculateTilt+0x54>)
 80010a0:	f7ff fb7e 	bl	80007a0 <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <calculateTilt+0x58>)
 80010b2:	f7ff fa4b 	bl	800054c <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	ec43 2b17 	vmov	d7, r2, r3
 80010be:	eeb0 0a47 	vmov.f32	s0, s14
 80010c2:	eef0 0a67 	vmov.f32	s1, s15
 80010c6:	f004 fea9 	bl	8005e1c <round>
 80010ca:	ec53 2b10 	vmov	r2, r3, d0
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fc4d 	bl	8000970 <__aeabi_d2iz>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40b00000 	.word	0x40b00000
 80010e4:	40240000 	.word	0x40240000

080010e8 <movePlayersPaddles>:

void movePlayersPaddles(player *p1, player *p2){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	movePaddleDownX(p1,(int)bt_data[0]);
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <movePlayersPaddles+0x74>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f8e4 	bl	80012c6 <movePaddleDownX>
	movePaddleDownY(p1,(int)bt_data[1]);
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <movePlayersPaddles+0x74>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f892 	bl	800122e <movePaddleDownY>
	movePaddleDownX(p2,(int)bt_data[2]);
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <movePlayersPaddles+0x74>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	4619      	mov	r1, r3
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f000 f8d8 	bl	80012c6 <movePaddleDownX>
	movePaddleDownY(p2,(int)bt_data[3]);
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <movePlayersPaddles+0x74>)
 8001118:	78db      	ldrb	r3, [r3, #3]
 800111a:	4619      	mov	r1, r3
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f000 f886 	bl	800122e <movePaddleDownY>

	movePaddleUpX(p1,(int)bt_data[0]);
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <movePlayersPaddles+0x74>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f916 	bl	800135a <movePaddleUpX>
	movePaddleUpY(p1,(int)bt_data[1]);
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <movePlayersPaddles+0x74>)
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f813 	bl	8001160 <movePaddleUpY>
	movePaddleUpX(p2,(int)bt_data[2]);
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <movePlayersPaddles+0x74>)
 800113c:	789b      	ldrb	r3, [r3, #2]
 800113e:	4619      	mov	r1, r3
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f000 f90a 	bl	800135a <movePaddleUpX>
	movePaddleUpY(p2,(int)bt_data[3]);
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <movePlayersPaddles+0x74>)
 8001148:	78db      	ldrb	r3, [r3, #3]
 800114a:	4619      	mov	r1, r3
 800114c:	6838      	ldr	r0, [r7, #0]
 800114e:	f000 f807 	bl	8001160 <movePaddleUpY>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000dc 	.word	0x200000dc

08001160 <movePaddleUpY>:


void movePaddleUpY(player *p, int y){ //x - 40, y - 5
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	if(y>p->y){
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	dd58      	ble.n	8001226 <movePaddleUpY+0xc6>
		int paddle_limit_y_reached = (5>abs(y-p->y)) ? 0 : 1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f113 0f04 	cmn.w	r3, #4
 8001180:	db05      	blt.n	800118e <movePaddleUpY+0x2e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b04      	cmp	r3, #4
 800118c:	dd01      	ble.n	8001192 <movePaddleUpY+0x32>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <movePaddleUpY+0x34>
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
    	int paddle_limit_y = (5>abs(y-p->y)) ? abs(y-p->y) : 5;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f113 0f04 	cmn.w	r3, #4
 80011a2:	db0d      	blt.n	80011c0 <movePaddleUpY+0x60>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	dc07      	bgt.n	80011c0 <movePaddleUpY+0x60>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bfb8      	it	lt
 80011bc:	425b      	neglt	r3, r3
 80011be:	e000      	b.n	80011c2 <movePaddleUpY+0x62>
 80011c0:	2305      	movs	r3, #5
 80011c2:	60bb      	str	r3, [r7, #8]

    	ST7735_FillRectangleFast(p->x-20, p->y , 40, paddle_limit_y, ST7735_BLACK);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	3b14      	subs	r3, #20
 80011cc:	b298      	uxth	r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	b299      	uxth	r1, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2200      	movs	r2, #0
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	2228      	movs	r2, #40	; 0x28
 80011de:	f000 fed5 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(p->x-20, p->y+5+paddle_limit_y_reached*(y-p->y-5), 40, paddle_limit_y, ST7735_WHITE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3b14      	subs	r3, #20
 80011ea:	b298      	uxth	r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	1acb      	subs	r3, r1, r3
 80011fa:	3b05      	subs	r3, #5
 80011fc:	b299      	uxth	r1, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	b29b      	uxth	r3, r3
 8001202:	fb11 f303 	smulbb	r3, r1, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	3305      	adds	r3, #5
 800120e:	b299      	uxth	r1, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	b29b      	uxth	r3, r3
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	f000 feb6 	bl	8001f8c <ST7735_FillRectangleFast>
    	p->y=y;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	605a      	str	r2, [r3, #4]
	}
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <movePaddleDownY>:

void movePaddleDownY(player *p, int y){ //x - 40, y - 5
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af02      	add	r7, sp, #8
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
	if(y<p->y){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	da3d      	bge.n	80012be <movePaddleDownY+0x90>
    	int paddle_limit_y = (5>abs(y-p->y)) ? abs(y-p->y) : 5;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f113 0f04 	cmn.w	r3, #4
 800124e:	db0d      	blt.n	800126c <movePaddleDownY+0x3e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b04      	cmp	r3, #4
 800125a:	dc07      	bgt.n	800126c <movePaddleDownY+0x3e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	bfb8      	it	lt
 8001268:	425b      	neglt	r3, r3
 800126a:	e000      	b.n	800126e <movePaddleDownY+0x40>
 800126c:	2305      	movs	r3, #5
 800126e:	60fb      	str	r3, [r7, #12]

    	ST7735_FillRectangleFast(p->x-20, p->y+5-paddle_limit_y, 40, paddle_limit_y, ST7735_BLACK);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	3b14      	subs	r3, #20
 8001278:	b298      	uxth	r0, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	b29b      	uxth	r3, r3
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	3305      	adds	r3, #5
 800128a:	b299      	uxth	r1, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b29b      	uxth	r3, r3
 8001290:	2200      	movs	r2, #0
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	2228      	movs	r2, #40	; 0x28
 8001296:	f000 fe79 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(p->x-20, y, 40, paddle_limit_y, ST7735_WHITE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	3b14      	subs	r3, #20
 80012a2:	b298      	uxth	r0, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	2228      	movs	r2, #40	; 0x28
 80012b4:	f000 fe6a 	bl	8001f8c <ST7735_FillRectangleFast>
    	p->y=y;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	605a      	str	r2, [r3, #4]
	}
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <movePaddleDownX>:

void movePaddleDownX(player *p, int x){ //x - 40, y - 5
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af02      	add	r7, sp, #8
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	if(x<p->x){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	da3b      	bge.n	8001352 <movePaddleDownX+0x8c>
    	int paddle_limit_x = (40>abs(x-p->x)) ? abs(x-p->x) : 40;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f113 0f27 	cmn.w	r3, #39	; 0x27
 80012e6:	db0d      	blt.n	8001304 <movePaddleDownX+0x3e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b27      	cmp	r3, #39	; 0x27
 80012f2:	dc07      	bgt.n	8001304 <movePaddleDownX+0x3e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bfb8      	it	lt
 8001300:	425b      	neglt	r3, r3
 8001302:	e000      	b.n	8001306 <movePaddleDownX+0x40>
 8001304:	2328      	movs	r3, #40	; 0x28
 8001306:	60fb      	str	r3, [r7, #12]

    	ST7735_FillRectangleFast(p->x+20-paddle_limit_x, p->y, paddle_limit_x, 5, ST7735_BLACK);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	b29b      	uxth	r3, r3
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b29b      	uxth	r3, r3
 8001316:	3314      	adds	r3, #20
 8001318:	b298      	uxth	r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	b299      	uxth	r1, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	b29a      	uxth	r2, r3
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2305      	movs	r3, #5
 800132a:	f000 fe2f 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(x-20, p->y, paddle_limit_x, 5, ST7735_WHITE);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b14      	subs	r3, #20
 8001334:	b298      	uxth	r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	b299      	uxth	r1, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	b29a      	uxth	r2, r3
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2305      	movs	r3, #5
 8001348:	f000 fe20 	bl	8001f8c <ST7735_FillRectangleFast>
    	p->x=x;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	601a      	str	r2, [r3, #0]
	}
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <movePaddleUpX>:

void movePaddleUpX(player *p, int x){ //x - 40, y - 5
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af02      	add	r7, sp, #8
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	if(x>p->x){
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	dd56      	ble.n	800141c <movePaddleUpX+0xc2>
		int paddle_limit_x_reached = (5>abs(x-p->x)) ? 0 : 1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f113 0f04 	cmn.w	r3, #4
 800137a:	db05      	blt.n	8001388 <movePaddleUpX+0x2e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b04      	cmp	r3, #4
 8001386:	dd01      	ble.n	800138c <movePaddleUpX+0x32>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <movePaddleUpX+0x34>
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
    	int paddle_limit_x = (5>abs(x-p->x)) ? abs(x-p->x) : 40;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f113 0f04 	cmn.w	r3, #4
 800139c:	db0d      	blt.n	80013ba <movePaddleUpX+0x60>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	dc07      	bgt.n	80013ba <movePaddleUpX+0x60>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bfb8      	it	lt
 80013b6:	425b      	neglt	r3, r3
 80013b8:	e000      	b.n	80013bc <movePaddleUpX+0x62>
 80013ba:	2328      	movs	r3, #40	; 0x28
 80013bc:	60bb      	str	r3, [r7, #8]

    	ST7735_FillRectangleFast(p->x-20, p->y, paddle_limit_x, 5, ST7735_BLACK);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3b14      	subs	r3, #20
 80013c6:	b298      	uxth	r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b299      	uxth	r1, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2305      	movs	r3, #5
 80013d8:	f000 fdd8 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(p->x+20+paddle_limit_x_reached*(x-p->x-40), p->y, paddle_limit_x, 5, ST7735_WHITE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	1acb      	subs	r3, r1, r3
 80013ea:	3b28      	subs	r3, #40	; 0x28
 80013ec:	b299      	uxth	r1, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	fb11 f303 	smulbb	r3, r1, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3314      	adds	r3, #20
 80013fe:	b298      	uxth	r0, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	b299      	uxth	r1, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	b29a      	uxth	r2, r3
 800140a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2305      	movs	r3, #5
 8001412:	f000 fdbb 	bl	8001f8c <ST7735_FillRectangleFast>
    	p->x=x;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	601a      	str	r2, [r3, #0]
	}
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <moveBallUpY>:

void moveBallUpY(ball *b, int y){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	if(y>b->y){
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	dd58      	ble.n	80014ea <moveBallUpY+0xc6>
		int ball_limit_y_reached = (6>abs(y-b->y)) ? 0 : 1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f113 0f05 	cmn.w	r3, #5
 8001444:	db05      	blt.n	8001452 <moveBallUpY+0x2e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b05      	cmp	r3, #5
 8001450:	dd01      	ble.n	8001456 <moveBallUpY+0x32>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <moveBallUpY+0x34>
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
    	int ball_limit_y = (6>abs(y-b->y)) ? abs(y-b->y) : 6;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f113 0f05 	cmn.w	r3, #5
 8001466:	db0d      	blt.n	8001484 <moveBallUpY+0x60>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b05      	cmp	r3, #5
 8001472:	dc07      	bgt.n	8001484 <moveBallUpY+0x60>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	bfb8      	it	lt
 8001480:	425b      	neglt	r3, r3
 8001482:	e000      	b.n	8001486 <moveBallUpY+0x62>
 8001484:	2306      	movs	r3, #6
 8001486:	60bb      	str	r3, [r7, #8]

    	ST7735_FillRectangleFast(b->x-3, b->y-6 , 6, ball_limit_y, ST7735_BLACK);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	3b03      	subs	r3, #3
 8001490:	b298      	uxth	r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b06      	subs	r3, #6
 800149a:	b299      	uxth	r1, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	2206      	movs	r2, #6
 80014a6:	f000 fd71 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(b->x-3, b->y+ball_limit_y_reached*(y-b->y-6), 6, ball_limit_y, ST7735_WHITE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b03      	subs	r3, #3
 80014b2:	b298      	uxth	r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	1acb      	subs	r3, r1, r3
 80014c2:	3b06      	subs	r3, #6
 80014c4:	b299      	uxth	r1, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	fb11 f303 	smulbb	r3, r1, r3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	b299      	uxth	r1, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014dc:	9200      	str	r2, [sp, #0]
 80014de:	2206      	movs	r2, #6
 80014e0:	f000 fd54 	bl	8001f8c <ST7735_FillRectangleFast>
    	b->y=y;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	605a      	str	r2, [r3, #4]
	}
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <moveBallDownY>:

void moveBallDownY(ball *b, int y){
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af02      	add	r7, sp, #8
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
	if(y<b->y){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	da3d      	bge.n	8001582 <moveBallDownY+0x90>
    	int ball_limit_y = (6>abs(y-b->y)) ? abs(y-b->y) : 6;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f113 0f05 	cmn.w	r3, #5
 8001512:	db0d      	blt.n	8001530 <moveBallDownY+0x3e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b05      	cmp	r3, #5
 800151e:	dc07      	bgt.n	8001530 <moveBallDownY+0x3e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	bfb8      	it	lt
 800152c:	425b      	neglt	r3, r3
 800152e:	e000      	b.n	8001532 <moveBallDownY+0x40>
 8001530:	2306      	movs	r3, #6
 8001532:	60fb      	str	r3, [r7, #12]

    	ST7735_FillRectangleFast(b->x-3, b->y-ball_limit_y, 6, ball_limit_y, ST7735_BLACK);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b03      	subs	r3, #3
 800153c:	b298      	uxth	r0, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	b29b      	uxth	r3, r3
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b299      	uxth	r1, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	b29b      	uxth	r3, r3
 8001550:	2200      	movs	r2, #0
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	2206      	movs	r2, #6
 8001556:	f000 fd19 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(b->x-3, y-6, 6, ball_limit_y, ST7735_WHITE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b03      	subs	r3, #3
 8001562:	b298      	uxth	r0, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b06      	subs	r3, #6
 800156a:	b299      	uxth	r1, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	b29b      	uxth	r3, r3
 8001570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	2206      	movs	r2, #6
 8001578:	f000 fd08 	bl	8001f8c <ST7735_FillRectangleFast>
    	b->y=y;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	605a      	str	r2, [r3, #4]
	}
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <moveBallDownX>:

void moveBallDownX(ball *b, int x){
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af02      	add	r7, sp, #8
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
	if(x<b->x){
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	da3f      	bge.n	800161e <moveBallDownX+0x94>
    	int ball_limit_x = (6>abs(x-b->x)) ? abs(x-b->x) : 6;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f113 0f05 	cmn.w	r3, #5
 80015aa:	db0d      	blt.n	80015c8 <moveBallDownX+0x3e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	dc07      	bgt.n	80015c8 <moveBallDownX+0x3e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bfb8      	it	lt
 80015c4:	425b      	neglt	r3, r3
 80015c6:	e000      	b.n	80015ca <moveBallDownX+0x40>
 80015c8:	2306      	movs	r3, #6
 80015ca:	60fb      	str	r3, [r7, #12]

    	ST7735_FillRectangleFast(b->x+3-ball_limit_x, b->y-6, ball_limit_x, 6, ST7735_BLACK);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3303      	adds	r3, #3
 80015dc:	b298      	uxth	r0, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3b06      	subs	r3, #6
 80015e6:	b299      	uxth	r1, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2306      	movs	r3, #6
 80015f2:	f000 fccb 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(x-3, b->y-6, ball_limit_x, 6, ST7735_WHITE);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b03      	subs	r3, #3
 80015fc:	b298      	uxth	r0, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	b29b      	uxth	r3, r3
 8001604:	3b06      	subs	r3, #6
 8001606:	b299      	uxth	r1, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	b29a      	uxth	r2, r3
 800160c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2306      	movs	r3, #6
 8001614:	f000 fcba 	bl	8001f8c <ST7735_FillRectangleFast>
    	b->x=x;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	601a      	str	r2, [r3, #0]
	}
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <moveBallUpX>:

void moveBallUpX(ball *b, int x){
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af02      	add	r7, sp, #8
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
	if(x>b->x){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	dd5a      	ble.n	80016f0 <moveBallUpX+0xca>
		int ball_limit_x_reached = (6>abs(x-b->x)) ? 0 : 1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f113 0f05 	cmn.w	r3, #5
 8001646:	db05      	blt.n	8001654 <moveBallUpX+0x2e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b05      	cmp	r3, #5
 8001652:	dd01      	ble.n	8001658 <moveBallUpX+0x32>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <moveBallUpX+0x34>
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
    	int ball_limit_x = (6>abs(x-b->x)) ? abs(x-b->x) : 6;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f113 0f05 	cmn.w	r3, #5
 8001668:	db0d      	blt.n	8001686 <moveBallUpX+0x60>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b05      	cmp	r3, #5
 8001674:	dc07      	bgt.n	8001686 <moveBallUpX+0x60>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	bfb8      	it	lt
 8001682:	425b      	neglt	r3, r3
 8001684:	e000      	b.n	8001688 <moveBallUpX+0x62>
 8001686:	2306      	movs	r3, #6
 8001688:	60bb      	str	r3, [r7, #8]

    	ST7735_FillRectangleFast(b->x-3, b->y-6, ball_limit_x, 6, ST7735_BLACK);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3b03      	subs	r3, #3
 8001692:	b298      	uxth	r0, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	b29b      	uxth	r3, r3
 800169a:	3b06      	subs	r3, #6
 800169c:	b299      	uxth	r1, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2306      	movs	r3, #6
 80016a8:	f000 fc70 	bl	8001f8c <ST7735_FillRectangleFast>
    	ST7735_FillRectangleFast(b->x+3+ball_limit_x_reached*(x-b->x-6), b->y-6, ball_limit_x, 6, ST7735_WHITE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	1acb      	subs	r3, r1, r3
 80016ba:	3b06      	subs	r3, #6
 80016bc:	b299      	uxth	r1, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	fb11 f303 	smulbb	r3, r1, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3303      	adds	r3, #3
 80016ce:	b298      	uxth	r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b06      	subs	r3, #6
 80016d8:	b299      	uxth	r1, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2306      	movs	r3, #6
 80016e6:	f000 fc51 	bl	8001f8c <ST7735_FillRectangleFast>
    	b->x=x;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	601a      	str	r2, [r3, #0]
	}
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <MX_GPIO_Init+0x10c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <MX_GPIO_Init+0x10c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <MX_GPIO_Init+0x10c>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_GPIO_Init+0x10c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001784:	4820      	ldr	r0, [pc, #128]	; (8001808 <MX_GPIO_Init+0x110>)
 8001786:	f002 f9b7 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	481e      	ldr	r0, [pc, #120]	; (800180c <MX_GPIO_Init+0x114>)
 8001792:	f002 f9b1 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7120 	mov.w	r1, #640	; 0x280
 800179c:	481c      	ldr	r0, [pc, #112]	; (8001810 <MX_GPIO_Init+0x118>)
 800179e:	f002 f9ab 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <MX_GPIO_Init+0x110>)
 80017bc:	f002 f818 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <MX_GPIO_Init+0x114>)
 80017da:	f002 f809 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RES_Pin;
 80017de:	f44f 7320 	mov.w	r3, #640	; 0x280
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <MX_GPIO_Init+0x118>)
 80017f8:	f001 fffa 	bl	80037f0 <HAL_GPIO_Init>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40020800 	.word	0x40020800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400

08001814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181a:	f000 feb3 	bl	8002584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181e:	f000 f833 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001822:	f7ff ff69 	bl	80016f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001826:	f7ff fb3b 	bl	8000ea0 <MX_DMA_Init>
  MX_SPI1_Init();
 800182a:	f000 f8ff 	bl	8001a2c <MX_SPI1_Init>
  MX_TIM10_Init();
 800182e:	f000 fd17 	bl	8002260 <MX_TIM10_Init>
  MX_ADC1_Init();
 8001832:	f7ff fa47 	bl	8000cc4 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001836:	f000 fd37 	bl	80022a8 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 800183a:	f000 fd9f 	bl	800237c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800183e:	f000 fa55 	bl	8001cec <ST7735_Init>
  ST7735_FillScreenFast(ST7735_BLACK);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 fc39 	bl	80020ba <ST7735_FillScreenFast>
  ST7735_WriteString(10, 80, "Connecting", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <main+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	9202      	str	r2, [sp, #8]
 800184e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001852:	9201      	str	r2, [sp, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <main+0x68>)
 800185c:	2150      	movs	r1, #80	; 0x50
 800185e:	200a      	movs	r0, #10
 8001860:	f000 fad5 	bl	8001e0e <ST7735_WriteString>
  HAL_UART_Init(&huart1);
 8001864:	4806      	ldr	r0, [pc, #24]	; (8001880 <main+0x6c>)
 8001866:	f003 faf9 	bl	8004e5c <HAL_UART_Init>
  HAL_UART_Receive_DMA(&BLUETOOTH, &bt_data[6], sizeof(bt_data[6]));
 800186a:	2201      	movs	r2, #1
 800186c:	4905      	ldr	r1, [pc, #20]	; (8001884 <main+0x70>)
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <main+0x6c>)
 8001870:	f003 fbc0 	bl	8004ff4 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001874:	e7fe      	b.n	8001874 <main+0x60>
 8001876:	bf00      	nop
 8001878:	20000000 	.word	0x20000000
 800187c:	08005ecc 	.word	0x08005ecc
 8001880:	200001f4 	.word	0x200001f4
 8001884:	200000e2 	.word	0x200000e2

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	; 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2230      	movs	r2, #48	; 0x30
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f004 f9ba 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <SystemClock_Config+0xcc>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <SystemClock_Config+0xcc>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <SystemClock_Config+0xcc>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <SystemClock_Config+0xd0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018d4:	4a20      	ldr	r2, [pc, #128]	; (8001958 <SystemClock_Config+0xd0>)
 80018d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <SystemClock_Config+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f2:	2302      	movs	r3, #2
 80018f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018fc:	2319      	movs	r3, #25
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001900:	23a8      	movs	r3, #168	; 0xa8
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001904:	2302      	movs	r3, #2
 8001906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001908:	2304      	movs	r3, #4
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4618      	mov	r0, r3
 8001912:	f002 f90b 	bl	8003b2c <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800191c:	f000 f880 	bl	8001a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2302      	movs	r3, #2
 8001926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800192c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2102      	movs	r1, #2
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fb6d 	bl	800401c <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001948:	f000 f86a 	bl	8001a20 <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3750      	adds	r7, #80	; 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	if(bt_data[6] == 200 && uart_sync_flag == 0){
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_UART_RxCpltCallback+0xa8>)
 8001966:	799b      	ldrb	r3, [r3, #6]
 8001968:	2bc8      	cmp	r3, #200	; 0xc8
 800196a:	d110      	bne.n	800198e <HAL_UART_RxCpltCallback+0x32>
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_UART_RxCpltCallback+0xac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10c      	bne.n	800198e <HAL_UART_RxCpltCallback+0x32>
		uart_sync_flag = 1;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_UART_RxCpltCallback+0xac>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
		HAL_UART_DMAStop(&BLUETOOTH);
 800197a:	4824      	ldr	r0, [pc, #144]	; (8001a0c <HAL_UART_RxCpltCallback+0xb0>)
 800197c:	f003 fb6a 	bl	8005054 <HAL_UART_DMAStop>
		startBluetooth();
 8001980:	f7ff fb2a 	bl	8000fd8 <startBluetooth>
		restartGame(&b, &p1, &p2);
 8001984:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_UART_RxCpltCallback+0xb4>)
 8001986:	4923      	ldr	r1, [pc, #140]	; (8001a14 <HAL_UART_RxCpltCallback+0xb8>)
 8001988:	4823      	ldr	r0, [pc, #140]	; (8001a18 <HAL_UART_RxCpltCallback+0xbc>)
 800198a:	f7ff fb0b 	bl	8000fa4 <restartGame>
	}
	if(game_over_flag==0 && uart_sync_flag == 1){
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_UART_RxCpltCallback+0xc0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11b      	bne.n	80019ce <HAL_UART_RxCpltCallback+0x72>
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_UART_RxCpltCallback+0xac>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d117      	bne.n	80019ce <HAL_UART_RxCpltCallback+0x72>
		calculateJoystickTilt();
 800199e:	f7ff faa7 	bl	8000ef0 <calculateJoystickTilt>
		doGameTick(&b);
 80019a2:	481d      	ldr	r0, [pc, #116]	; (8001a18 <HAL_UART_RxCpltCallback+0xbc>)
 80019a4:	f7ff fadc 	bl	8000f60 <doGameTick>
		movePlayersPaddles(&p1, &p2);
 80019a8:	4919      	ldr	r1, [pc, #100]	; (8001a10 <HAL_UART_RxCpltCallback+0xb4>)
 80019aa:	481a      	ldr	r0, [pc, #104]	; (8001a14 <HAL_UART_RxCpltCallback+0xb8>)
 80019ac:	f7ff fb9c 	bl	80010e8 <movePlayersPaddles>
		if(b.y<0 || b.y>160){
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_UART_RxCpltCallback+0xbc>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db03      	blt.n	80019c0 <HAL_UART_RxCpltCallback+0x64>
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_UART_RxCpltCallback+0xbc>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2ba0      	cmp	r3, #160	; 0xa0
 80019be:	dd1b      	ble.n	80019f8 <HAL_UART_RxCpltCallback+0x9c>
			gameOver(&b);
 80019c0:	4815      	ldr	r0, [pc, #84]	; (8001a18 <HAL_UART_RxCpltCallback+0xbc>)
 80019c2:	f7ff fb3b 	bl	800103c <gameOver>
			game_over_flag = 1;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_UART_RxCpltCallback+0xc0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
		if(b.y<0 || b.y>160){
 80019cc:	e014      	b.n	80019f8 <HAL_UART_RxCpltCallback+0x9c>
		}
	}
	else if(bt_data[5]>0 && bt_data[5]<160 && uart_sync_flag == 1){
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_UART_RxCpltCallback+0xa8>)
 80019d0:	795b      	ldrb	r3, [r3, #5]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d011      	beq.n	80019fa <HAL_UART_RxCpltCallback+0x9e>
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_UART_RxCpltCallback+0xa8>)
 80019d8:	795b      	ldrb	r3, [r3, #5]
 80019da:	2b9f      	cmp	r3, #159	; 0x9f
 80019dc:	d80d      	bhi.n	80019fa <HAL_UART_RxCpltCallback+0x9e>
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_UART_RxCpltCallback+0xac>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d109      	bne.n	80019fa <HAL_UART_RxCpltCallback+0x9e>
		restartGame(&b, &p1, &p2);
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_UART_RxCpltCallback+0xb4>)
 80019e8:	490a      	ldr	r1, [pc, #40]	; (8001a14 <HAL_UART_RxCpltCallback+0xb8>)
 80019ea:	480b      	ldr	r0, [pc, #44]	; (8001a18 <HAL_UART_RxCpltCallback+0xbc>)
 80019ec:	f7ff fada 	bl	8000fa4 <restartGame>
		game_over_flag = 0;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_UART_RxCpltCallback+0xc0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	}
}
 80019f6:	e000      	b.n	80019fa <HAL_UART_RxCpltCallback+0x9e>
		if(b.y<0 || b.y>160){
 80019f8:	bf00      	nop
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000dc 	.word	0x200000dc
 8001a08:	20000104 	.word	0x20000104
 8001a0c:	200001f4 	.word	0x200001f4
 8001a10:	200000f0 	.word	0x200000f0
 8001a14:	200000e8 	.word	0x200000e8
 8001a18:	200000f8 	.word	0x200000f8
 8001a1c:	20000100 	.word	0x20000100

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8001a28:	e7fe      	b.n	8001a28 <Error_Handler+0x8>
	...

08001a2c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <MX_SPI1_Init+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a78:	220a      	movs	r2, #10
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_SPI1_Init+0x64>)
 8001a7e:	f002 fcad 	bl	80043dc <HAL_SPI_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a88:	f7ff ffca 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000108 	.word	0x20000108
 8001a94:	40013000 	.word	0x40013000

08001a98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_SPI_MspInit+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12b      	bne.n	8001b12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_SPI_MspInit+0x88>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_SPI_MspInit+0x88>)
 8001ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_SPI_MspInit+0x88>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_SPI_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_SPI_MspInit+0x88>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_SPI_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8001af2:	23e0      	movs	r3, #224	; 0xe0
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <HAL_SPI_MspInit+0x8c>)
 8001b0e:	f001 fe6f 	bl	80037f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <ST7735_Select+0x14>)
 8001b32:	f001 ffe1 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40020400 	.word	0x40020400

08001b40 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <ST7735_Unselect+0x14>)
 8001b4a:	f001 ffd5 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40020400 	.word	0x40020400

08001b58 <ST7735_Reset>:

static void ST7735_Reset() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <ST7735_Reset+0x28>)
 8001b64:	f001 ffc8 	bl	8003af8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001b68:	2005      	movs	r0, #5
 8001b6a:	f000 fd7d 	bl	8002668 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <ST7735_Reset+0x28>)
 8001b76:	f001 ffbf 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400

08001b84 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <ST7735_WriteCommand+0x2c>)
 8001b96:	f001 ffaf 	bl	8003af8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b9a:	1df9      	adds	r1, r7, #7
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <ST7735_WriteCommand+0x30>)
 8001ba4:	f002 fca3 	bl	80044ee <HAL_SPI_Transmit>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	20000108 	.word	0x20000108

08001bb8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <ST7735_WriteData+0x30>)
 8001bca:	f001 ff95 	bl	8003af8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <ST7735_WriteData+0x34>)
 8001bda:	f002 fc88 	bl	80044ee <HAL_SPI_Transmit>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020000 	.word	0x40020000
 8001bec:	20000108 	.word	0x20000108

08001bf0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001c02:	e034      	b.n	8001c6e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001c0e:	7afb      	ldrb	r3, [r7, #11]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ffb7 	bl	8001b84 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001c20:	7abb      	ldrb	r3, [r7, #10]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c28:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001c2a:	7abb      	ldrb	r3, [r7, #10]
 8001c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c30:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001c32:	7abb      	ldrb	r3, [r7, #10]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001c38:	7abb      	ldrb	r3, [r7, #10]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffbb 	bl	8001bb8 <ST7735_WriteData>
            addr += numArgs;
 8001c42:	7abb      	ldrb	r3, [r7, #10]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001c4a:	89bb      	ldrh	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00e      	beq.n	8001c6e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001c5a:	89bb      	ldrh	r3, [r7, #12]
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d102      	bne.n	8001c66 <ST7735_ExecuteCommandList+0x76>
 8001c60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c64:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001c66:	89bb      	ldrh	r3, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fcfd 	bl	8002668 <HAL_Delay>
    while(numCommands--) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	73fa      	strb	r2, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1c5      	bne.n	8001c04 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001c82:	b590      	push	{r4, r7, lr}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4604      	mov	r4, r0
 8001c8a:	4608      	mov	r0, r1
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4623      	mov	r3, r4
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	4603      	mov	r3, r0
 8001c96:	71bb      	strb	r3, [r7, #6]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	717b      	strb	r3, [r7, #5]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001ca0:	202a      	movs	r0, #42	; 0x2a
 8001ca2:	f7ff ff6f 	bl	8001b84 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	733b      	strb	r3, [r7, #12]
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	737b      	strb	r3, [r7, #13]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73bb      	strb	r3, [r7, #14]
 8001cb2:	797b      	ldrb	r3, [r7, #5]
 8001cb4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff7b 	bl	8001bb8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001cc2:	202b      	movs	r0, #43	; 0x2b
 8001cc4:	f7ff ff5e 	bl	8001b84 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001ccc:	793b      	ldrb	r3, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff6e 	bl	8001bb8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001cdc:	202c      	movs	r0, #44	; 0x2c
 8001cde:	f7ff ff51 	bl	8001b84 <ST7735_WriteCommand>
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
	...

08001cec <ST7735_Init>:

void ST7735_Init() {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001cf0:	f7ff ff1a 	bl	8001b28 <ST7735_Select>
    ST7735_Reset();
 8001cf4:	f7ff ff30 	bl	8001b58 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <ST7735_Init+0x28>)
 8001cfa:	f7ff ff79 	bl	8001bf0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <ST7735_Init+0x2c>)
 8001d00:	f7ff ff76 	bl	8001bf0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <ST7735_Init+0x30>)
 8001d06:	f7ff ff73 	bl	8001bf0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001d0a:	f7ff ff19 	bl	8001b40 <ST7735_Unselect>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	08006c34 	.word	0x08006c34
 8001d18:	08006c70 	.word	0x08006c70
 8001d1c:	08006c80 	.word	0x08006c80

08001d20 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001d20:	b082      	sub	sp, #8
 8001d22:	b590      	push	{r4, r7, lr}
 8001d24:	b089      	sub	sp, #36	; 0x24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	80bb      	strh	r3, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2d8      	uxtb	r0, r3
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	b2d9      	uxtb	r1, r3
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d46:	4413      	add	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2dc      	uxtb	r4, r3
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d56:	4413      	add	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4622      	mov	r2, r4
 8001d60:	f7ff ff8f 	bl	8001c82 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	e043      	b.n	8001df2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	3b20      	subs	r3, #32
 8001d70:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	440b      	add	r3, r1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	e029      	b.n	8001de0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001d9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	743b      	strb	r3, [r7, #16]
 8001da6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff00 	bl	8001bb8 <ST7735_WriteData>
 8001db8:	e00f      	b.n	8001dda <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001dba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	733b      	strb	r3, [r7, #12]
 8001dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff feef 	bl	8001bb8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001de4:	461a      	mov	r2, r3
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d3cf      	bcc.n	8001d8c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001df6:	461a      	mov	r2, r3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d3b5      	bcc.n	8001d6a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3724      	adds	r7, #36	; 0x24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e0a:	b002      	add	sp, #8
 8001e0c:	4770      	bx	lr

08001e0e <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001e0e:	b082      	sub	sp, #8
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	603a      	str	r2, [r7, #0]
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001e22:	f7ff fe81 	bl	8001b28 <ST7735_Select>

    while(*str) {
 8001e26:	e02d      	b.n	8001e84 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	7d3a      	ldrb	r2, [r7, #20]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e30:	dd13      	ble.n	8001e5a <ST7735_WriteString+0x4c>
            x = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001e36:	7d7b      	ldrb	r3, [r7, #21]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001e40:	88bb      	ldrh	r3, [r7, #4]
 8001e42:	7d7a      	ldrb	r2, [r7, #21]
 8001e44:	4413      	add	r3, r2
 8001e46:	2b9f      	cmp	r3, #159	; 0x9f
 8001e48:	dc21      	bgt.n	8001e8e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d103      	bne.n	8001e5a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
                continue;
 8001e58:	e014      	b.n	8001e84 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	88b9      	ldrh	r1, [r7, #4]
 8001e60:	88f8      	ldrh	r0, [r7, #6]
 8001e62:	8c3b      	ldrh	r3, [r7, #32]
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f7ff ff56 	bl	8001d20 <ST7735_WriteChar>
        x += font.width;
 8001e74:	7d3b      	ldrb	r3, [r7, #20]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
        str++;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1cd      	bne.n	8001e28 <ST7735_WriteString+0x1a>
 8001e8c:	e000      	b.n	8001e90 <ST7735_WriteString+0x82>
                break;
 8001e8e:	bf00      	nop
    }

    ST7735_Unselect();
 8001e90:	f7ff fe56 	bl	8001b40 <ST7735_Unselect>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e9e:	b002      	add	sp, #8
 8001ea0:	4770      	bx	lr
	...

08001ea4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	80fb      	strh	r3, [r7, #6]
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80bb      	strh	r3, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	807b      	strh	r3, [r7, #2]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ec6:	d858      	bhi.n	8001f7a <ST7735_FillRectangle+0xd6>
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	2b9f      	cmp	r3, #159	; 0x9f
 8001ecc:	d855      	bhi.n	8001f7a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	dd03      	ble.n	8001ee0 <ST7735_FillRectangle+0x3c>
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ede:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001ee0:	88ba      	ldrh	r2, [r7, #4]
 8001ee2:	883b      	ldrh	r3, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee8:	dd03      	ble.n	8001ef2 <ST7735_FillRectangle+0x4e>
 8001eea:	88bb      	ldrh	r3, [r7, #4]
 8001eec:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001ef0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001ef2:	f7ff fe19 	bl	8001b28 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	88bb      	ldrh	r3, [r7, #4]
 8001efc:	b2d9      	uxtb	r1, r3
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2dc      	uxtb	r4, r3
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	883b      	ldrh	r3, [r7, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4622      	mov	r2, r4
 8001f20:	f7ff feaf 	bl	8001c82 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001f24:	8c3b      	ldrh	r3, [r7, #32]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	733b      	strb	r3, [r7, #12]
 8001f2e:	8c3b      	ldrh	r3, [r7, #32]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <ST7735_FillRectangle+0xe0>)
 8001f3c:	f001 fddc 	bl	8003af8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001f40:	883b      	ldrh	r3, [r7, #0]
 8001f42:	80bb      	strh	r3, [r7, #4]
 8001f44:	e013      	b.n	8001f6e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	e00a      	b.n	8001f62 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001f4c:	f107 010c 	add.w	r1, r7, #12
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	2202      	movs	r2, #2
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <ST7735_FillRectangle+0xe4>)
 8001f58:	f002 fac9 	bl	80044ee <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	80fb      	strh	r3, [r7, #6]
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f1      	bne.n	8001f4c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001f68:	88bb      	ldrh	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	80bb      	strh	r3, [r7, #4]
 8001f6e:	88bb      	ldrh	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e8      	bne.n	8001f46 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001f74:	f7ff fde4 	bl	8001b40 <ST7735_Unselect>
 8001f78:	e000      	b.n	8001f7c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001f7a:	bf00      	nop
}
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40020000 	.word	0x40020000
 8001f88:	20000108 	.word	0x20000108

08001f8c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	80fb      	strh	r3, [r7, #6]
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80bb      	strh	r3, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	807b      	strh	r3, [r7, #2]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	2b7f      	cmp	r3, #127	; 0x7f
 8001fae:	d86a      	bhi.n	8002086 <ST7735_FillRectangleFast+0xfa>
 8001fb0:	88bb      	ldrh	r3, [r7, #4]
 8001fb2:	2b9f      	cmp	r3, #159	; 0x9f
 8001fb4:	d867      	bhi.n	8002086 <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	4413      	add	r3, r2
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	dd03      	ble.n	8001fc8 <ST7735_FillRectangleFast+0x3c>
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001fc6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001fc8:	88ba      	ldrh	r2, [r7, #4]
 8001fca:	883b      	ldrh	r3, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd0:	dd03      	ble.n	8001fda <ST7735_FillRectangleFast+0x4e>
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001fd8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001fda:	f7ff fda5 	bl	8001b28 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	b2d8      	uxtb	r0, r3
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	b2d9      	uxtb	r1, r3
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b2dc      	uxtb	r4, r3
 8001ff6:	88bb      	ldrh	r3, [r7, #4]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	883b      	ldrh	r3, [r7, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4622      	mov	r2, r4
 8002008:	f7ff fe3b 	bl	8001c82 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800200c:	8c3b      	ldrh	r3, [r7, #32]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	723b      	strb	r3, [r7, #8]
 8002016:	8c3b      	ldrh	r3, [r7, #32]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fde5 	bl	8005bf0 <malloc>
 8002026:	4603      	mov	r3, r0
 8002028:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800202a:	2300      	movs	r3, #0
 800202c:	80fb      	strh	r3, [r7, #6]
 800202e:	e008      	b.n	8002042 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	893a      	ldrh	r2, [r7, #8]
 800203a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	3301      	adds	r3, #1
 8002040:	80fb      	strh	r3, [r7, #6]
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3f2      	bcc.n	8002030 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002050:	480f      	ldr	r0, [pc, #60]	; (8002090 <ST7735_FillRectangleFast+0x104>)
 8002052:	f001 fd51 	bl	8003af8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8002056:	883b      	ldrh	r3, [r7, #0]
 8002058:	80bb      	strh	r3, [r7, #4]
 800205a:	e00b      	b.n	8002074 <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <ST7735_FillRectangleFast+0x108>)
 800206a:	f002 fa40 	bl	80044ee <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800206e:	88bb      	ldrh	r3, [r7, #4]
 8002070:	3b01      	subs	r3, #1
 8002072:	80bb      	strh	r3, [r7, #4]
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <ST7735_FillRectangleFast+0xd0>

    free(line);
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f003 fdc0 	bl	8005c00 <free>
    ST7735_Unselect();
 8002080:	f7ff fd5e 	bl	8001b40 <ST7735_Unselect>
 8002084:	e000      	b.n	8002088 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002086:	bf00      	nop
}
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop
 8002090:	40020000 	.word	0x40020000
 8002094:	20000108 	.word	0x20000108

08002098 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af02      	add	r7, sp, #8
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	23a0      	movs	r3, #160	; 0xa0
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	2100      	movs	r1, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fef9 	bl	8001ea4 <ST7735_FillRectangle>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af02      	add	r7, sp, #8
 80020c0:	4603      	mov	r3, r0
 80020c2:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	23a0      	movs	r3, #160	; 0xa0
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	2100      	movs	r1, #0
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff ff5c 	bl	8001f8c <ST7735_FillRectangleFast>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_MspInit+0x4c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_MspInit+0x4c>)
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_MspInit+0x4c>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_MspInit+0x4c>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_MspInit+0x4c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002178:	f000 fa56 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002186:	f002 fc9a 	bl	8004abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000164 	.word	0x20000164

08002194 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800219a:	f002 fc90 	bl	8004abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200001ac 	.word	0x200001ac

080021a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <DMA2_Stream2_IRQHandler+0x10>)
 80021ae:	f001 f8b5 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000238 	.word	0x20000238

080021bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA2_Stream7_IRQHandler+0x10>)
 80021c2:	f001 f8ab 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000298 	.word	0x20000298

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f003 fccc 	bl	8005b9c <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20010000 	.word	0x20010000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000160 	.word	0x20000160
 8002238:	20000310 	.word	0x20000310

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_TIM10_Init+0x40>)
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <MX_TIM10_Init+0x44>)
 8002268:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 5000-1;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <MX_TIM10_Init+0x40>)
 800226c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002270:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_TIM10_Init+0x40>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_TIM10_Init+0x40>)
 800227a:	22c7      	movs	r2, #199	; 0xc7
 800227c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_TIM10_Init+0x40>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_TIM10_Init+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_TIM10_Init+0x40>)
 800228c:	f002 fb36 	bl	80048fc <HAL_TIM_Base_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002296:	f7ff fbc3 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000164 	.word	0x20000164
 80022a4:	40014400 	.word	0x40014400

080022a8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <MX_TIM11_Init+0x44>)
 80022b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022b4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80022b8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <MX_TIM11_Init+0x40>)
 80022d6:	f002 fb11 	bl	80048fc <HAL_TIM_Base_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80022e0:	f7ff fb9e 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200001ac 	.word	0x200001ac
 80022ec:	40014800 	.word	0x40014800

080022f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_TIM_Base_MspInit+0x80>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d116      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_TIM_Base_MspInit+0x84>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_TIM_Base_MspInit+0x84>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_TIM_Base_MspInit+0x84>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2019      	movs	r0, #25
 8002324:	f000 fe4d 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002328:	2019      	movs	r0, #25
 800232a:	f000 fe66 	bl	8002ffa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800232e:	e01a      	b.n	8002366 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_Base_MspInit+0x88>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d115      	bne.n	8002366 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_TIM_Base_MspInit+0x84>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <HAL_TIM_Base_MspInit+0x84>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_TIM_Base_MspInit+0x84>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	201a      	movs	r0, #26
 800235c:	f000 fe31 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002360:	201a      	movs	r0, #26
 8002362:	f000 fe4a 	bl	8002ffa <HAL_NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40014400 	.word	0x40014400
 8002374:	40023800 	.word	0x40023800
 8002378:	40014800 	.word	0x40014800

0800237c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <MX_USART1_UART_Init+0x50>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002388:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023b4:	f002 fd52 	bl	8004e5c <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023be:	f7ff fb2f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200001f4 	.word	0x200001f4
 80023cc:	40011000 	.word	0x40011000

080023d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_UART_MspInit+0x144>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f040 808b 	bne.w	800250a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_UART_MspInit+0x148>)
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	4a46      	ldr	r2, [pc, #280]	; (8002518 <HAL_UART_MspInit+0x148>)
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	6453      	str	r3, [r2, #68]	; 0x44
 8002404:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_UART_MspInit+0x148>)
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_UART_MspInit+0x148>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <HAL_UART_MspInit+0x148>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6313      	str	r3, [r2, #48]	; 0x30
 8002420:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_UART_MspInit+0x148>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800242c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800243e:	2307      	movs	r3, #7
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4834      	ldr	r0, [pc, #208]	; (800251c <HAL_UART_MspInit+0x14c>)
 800244a:	f001 f9d1 	bl	80037f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002450:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_UART_MspInit+0x154>)
 8002452:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_UART_MspInit+0x150>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002464:	2200      	movs	r2, #0
 8002466:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_UART_MspInit+0x150>)
 800246a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_UART_MspInit+0x150>)
 800247e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002482:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_UART_MspInit+0x150>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002490:	4823      	ldr	r0, [pc, #140]	; (8002520 <HAL_UART_MspInit+0x150>)
 8002492:	f000 fdcd 	bl	8003030 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800249c:	f7ff fac0 	bl	8001a20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_UART_MspInit+0x150>)
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_UART_MspInit+0x150>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_UART_MspInit+0x15c>)
 80024b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <HAL_UART_MspInit+0x158>)
 80024f0:	f000 fd9e 	bl	8003030 <HAL_DMA_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80024fa:	f7ff fa91 	bl	8001a20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_UART_MspInit+0x158>)
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_UART_MspInit+0x158>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40011000 	.word	0x40011000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000
 8002520:	20000238 	.word	0x20000238
 8002524:	40026440 	.word	0x40026440
 8002528:	20000298 	.word	0x20000298
 800252c:	400264b8 	.word	0x400264b8

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002536:	490e      	ldr	r1, [pc, #56]	; (8002570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800254c:	4c0b      	ldr	r4, [pc, #44]	; (800257c <LoopFillZerobss+0x26>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255a:	f7ff fe6f 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f003 fb23 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7ff f957 	bl	8001814 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002574:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 8002578:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800257c:	2000030c 	.word	0x2000030c

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 fcfd 	bl	8002fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fd90 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fd15 	bl	8003016 <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 fcdd 	bl	8002fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000008 	.word	0x20000008
 8002620:	20000010 	.word	0x20000010
 8002624:	2000000c 	.word	0x2000000c

08002628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x20>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_IncTick+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_IncTick+0x24>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000010 	.word	0x20000010
 800264c:	200002f8 	.word	0x200002f8

08002650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return uwTick;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_GetTick+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	200002f8 	.word	0x200002f8

08002668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff ffee 	bl	8002650 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d005      	beq.n	800268e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_Delay+0x44>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800268e:	bf00      	nop
 8002690:	f7ff ffde 	bl	8002650 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d8f7      	bhi.n	8002690 <HAL_Delay+0x28>
  {
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000010 	.word	0x20000010

080026b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e033      	b.n	800272e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fb5c 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	f043 0202 	orr.w	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa86 	bl	8002c14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
 800271e:	e001      	b.n	8002724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Start+0x1a>
 800274e:	2302      	movs	r3, #2
 8002750:	e097      	b.n	8002882 <HAL_ADC_Start+0x14a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d018      	beq.n	800279a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002778:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_ADC_Start+0x158>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a45      	ldr	r2, [pc, #276]	; (8002894 <HAL_ADC_Start+0x15c>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0c9a      	lsrs	r2, r3, #18
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800278c:	e002      	b.n	8002794 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3b01      	subs	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d15f      	bne.n	8002868 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	d106      	bne.n	80027f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f023 0206 	bic.w	r2, r3, #6
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
 80027f4:	e002      	b.n	80027fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_ADC_Start+0x160>)
 8002806:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002810:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d129      	bne.n	8002880 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e020      	b.n	8002880 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_ADC_Start+0x164>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d11b      	bne.n	8002880 <HAL_ADC_Start+0x148>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d114      	bne.n	8002880 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	e00b      	b.n	8002880 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0210 	orr.w	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008
 8002894:	431bde83 	.word	0x431bde83
 8002898:	40012300 	.word	0x40012300
 800289c:	40012000 	.word	0x40012000

080028a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d113      	bne.n	80028e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028cc:	d10b      	bne.n	80028e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e063      	b.n	80029ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80028e6:	f7ff feb3 	bl	8002650 <HAL_GetTick>
 80028ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ec:	e021      	b.n	8002932 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d01d      	beq.n	8002932 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_ADC_PollForConversion+0x6c>
 80028fc:	f7ff fea8 	bl	8002650 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d212      	bcs.n	8002932 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d00b      	beq.n	8002932 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e03d      	b.n	80029ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d1d6      	bne.n	80028ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0212 	mvn.w	r2, #18
 8002948:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d123      	bne.n	80029ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d11f      	bne.n	80029ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e105      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x228>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d925      	bls.n	8002a48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68d9      	ldr	r1, [r3, #12]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b1e      	subs	r3, #30
 8002a12:	2207      	movs	r2, #7
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	400a      	ands	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68d9      	ldr	r1, [r3, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	4603      	mov	r3, r0
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4403      	add	r3, r0
 8002a3a:	3b1e      	subs	r3, #30
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	e022      	b.n	8002a8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6919      	ldr	r1, [r3, #16]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4403      	add	r3, r0
 8002a84:	409a      	lsls	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d824      	bhi.n	8002ae0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b05      	subs	r3, #5
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b05      	subs	r3, #5
 8002ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ade:	e04c      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d824      	bhi.n	8002b32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b23      	subs	r3, #35	; 0x23
 8002afa:	221f      	movs	r2, #31
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43da      	mvns	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	400a      	ands	r2, r1
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b23      	subs	r3, #35	; 0x23
 8002b24:	fa00 f203 	lsl.w	r2, r0, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b30:	e023      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b41      	subs	r3, #65	; 0x41
 8002b44:	221f      	movs	r2, #31
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	400a      	ands	r2, r1
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4618      	mov	r0, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b41      	subs	r3, #65	; 0x41
 8002b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_ADC_ConfigChannel+0x234>)
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <HAL_ADC_ConfigChannel+0x238>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1cc>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b12      	cmp	r3, #18
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_ADC_ConfigChannel+0x238>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d123      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x21e>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d003      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x1e6>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b11      	cmp	r3, #17
 8002bb4:	d11b      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d111      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_ADC_ConfigChannel+0x23c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_ADC_ConfigChannel+0x240>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9a      	lsrs	r2, r3, #18
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012300 	.word	0x40012300
 8002c08:	40012000 	.word	0x40012000
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c1c:	4b79      	ldr	r3, [pc, #484]	; (8002e04 <ADC_Init+0x1f0>)
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	021a      	lsls	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <ADC_Init+0x1f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d022      	beq.n	8002cf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	e00f      	b.n	8002d12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0202 	bic.w	r2, r2, #2
 8002d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6899      	ldr	r1, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7e1b      	ldrb	r3, [r3, #24]
 8002d2c:	005a      	lsls	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	035a      	lsls	r2, r3, #13
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	e007      	b.n	8002d88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	051a      	lsls	r2, r3, #20
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dca:	025a      	lsls	r2, r3, #9
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	029a      	lsls	r2, r3, #10
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40012300 	.word	0x40012300
 8002e08:	0f000001 	.word	0x0f000001

08002e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	60d3      	str	r3, [r2, #12]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <__NVIC_GetPriorityGrouping+0x18>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0307 	and.w	r3, r3, #7
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0b      	blt.n	8002e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <__NVIC_EnableIRQ+0x38>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	; (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
         );
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d301      	bcc.n	8002f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00f      	b.n	8002f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <SysTick_Config+0x40>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f86:	210f      	movs	r1, #15
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f7ff ff8e 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <SysTick_Config+0x40>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SysTick_Config+0x40>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff29 	bl	8002e0c <__NVIC_SetPriorityGrouping>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd4:	f7ff ff3e 	bl	8002e54 <__NVIC_GetPriorityGrouping>
 8002fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f7ff ff8e 	bl	8002f00 <NVIC_EncodePriority>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff5d 	bl	8002eac <__NVIC_SetPriority>
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff31 	bl	8002e70 <__NVIC_EnableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ffa2 	bl	8002f68 <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff fb08 	bl	8002650 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e099      	b.n	8003180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	e00f      	b.n	800308e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306e:	f7ff faef 	bl	8002650 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b05      	cmp	r3, #5
 800307a:	d908      	bls.n	800308e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e078      	b.n	8003180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e8      	bne.n	800306e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_DMA_Init+0x158>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4313      	orrs	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b04      	cmp	r3, #4
 8003120:	d117      	bne.n	8003152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fadf 	bl	80036f8 <DMA_CheckFifoParam>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800314e:	2301      	movs	r3, #1
 8003150:	e016      	b.n	8003180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa96 	bl	800368c <DMA_CalcBaseAndBitshift>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f010803f 	.word	0xf010803f

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Start_IT+0x26>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e040      	b.n	8003234 <HAL_DMA_Start_IT+0xa8>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12f      	bne.n	8003226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fa28 	bl	8003630 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	223f      	movs	r2, #63	; 0x3f
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0216 	orr.w	r2, r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e005      	b.n	8003232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800324a:	f7ff fa01 	bl	8002650 <HAL_GetTick>
 800324e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d008      	beq.n	800326e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e052      	b.n	8003314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0216 	bic.w	r2, r2, #22
 800327c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800328c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <HAL_DMA_Abort+0x62>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0208 	bic.w	r2, r2, #8
 80032ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032be:	e013      	b.n	80032e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032c0:	f7ff f9c6 	bl	8002650 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d90c      	bls.n	80032e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e015      	b.n	8003314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e4      	bne.n	80032c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	223f      	movs	r2, #63	; 0x3f
 80032fc:	409a      	lsls	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003328:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_DMA_IRQHandler+0x248>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_DMA_IRQHandler+0x24c>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	2208      	movs	r2, #8
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01a      	beq.n	8003388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2208      	movs	r2, #8
 8003376:	409a      	lsls	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2201      	movs	r2, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0202 	orr.w	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2204      	movs	r2, #4
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2204      	movs	r2, #4
 80033e2:	409a      	lsls	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2210      	movs	r2, #16
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d043      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03c      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2210      	movs	r2, #16
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d024      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
 800344a:	e01f      	b.n	800348c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e016      	b.n	800348c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0208 	bic.w	r2, r2, #8
 800347a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2220      	movs	r2, #32
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 808f 	beq.w	80035bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8087 	beq.w	80035bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2220      	movs	r2, #32
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d136      	bne.n	8003534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0216 	bic.w	r2, r2, #22
 80034d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_DMA_IRQHandler+0x1da>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0208 	bic.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	223f      	movs	r2, #63	; 0x3f
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d07e      	beq.n	8003628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
        }
        return;
 8003532:	e079      	b.n	8003628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01d      	beq.n	800357e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	2b00      	cmp	r3, #0
 8003556:	d031      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e02c      	b.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
 8003562:	bf00      	nop
 8003564:	20000008 	.word	0x20000008
 8003568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e01e      	b.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10f      	bne.n	80035ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0210 	bic.w	r2, r2, #16
 800359a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d032      	beq.n	800362a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2205      	movs	r2, #5
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d307      	bcc.n	8003604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f2      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x2cc>
 8003602:	e000      	b.n	8003606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
 8003626:	e000      	b.n	800362a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003628:	bf00      	nop
    }
  }
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800364c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d108      	bne.n	8003670 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800366e:	e007      	b.n	8003680 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3b10      	subs	r3, #16
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <DMA_CalcBaseAndBitshift+0x64>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d909      	bls.n	80036ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
 80036cc:	e007      	b.n	80036de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	08006cc4 	.word	0x08006cc4

080036f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d856      	bhi.n	80037c6 <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x28>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037c7 	.word	0x080037c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d046      	beq.n	80037ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e043      	b.n	80037ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374a:	d140      	bne.n	80037ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e03d      	b.n	80037ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d121      	bne.n	80037a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d837      	bhi.n	80037d2 <DMA_CheckFifoParam+0xda>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <DMA_CheckFifoParam+0x70>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	0800377f 	.word	0x0800377f
 8003770:	08003779 	.word	0x08003779
 8003774:	08003791 	.word	0x08003791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e030      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378e:	e022      	b.n	80037d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379e:	e01c      	b.n	80037da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d903      	bls.n	80037ae <DMA_CheckFifoParam+0xb6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ac:	e018      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e015      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e00b      	b.n	80037de <DMA_CheckFifoParam+0xe6>
      break;
 80037c6:	bf00      	nop
 80037c8:	e00a      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e008      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e006      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
    }
  } 
  
  return status; 
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e159      	b.n	8003ac0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	f040 8148 	bne.w	8003aba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	2b02      	cmp	r3, #2
 8003840:	d130      	bne.n	80038a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a2 	beq.w	8003aba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a52      	ldr	r2, [pc, #328]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_GPIO_Init+0x202>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a48      	ldr	r2, [pc, #288]	; (8003ae4 <HAL_GPIO_Init+0x2f4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_GPIO_Init+0x1fe>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a47      	ldr	r2, [pc, #284]	; (8003ae8 <HAL_GPIO_Init+0x2f8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00d      	beq.n	80039ea <HAL_GPIO_Init+0x1fa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a46      	ldr	r2, [pc, #280]	; (8003aec <HAL_GPIO_Init+0x2fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <HAL_GPIO_Init+0x1f6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_GPIO_Init+0x300>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_GPIO_Init+0x1f2>
 80039de:	2304      	movs	r3, #4
 80039e0:	e008      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039e6:	2303      	movs	r3, #3
 80039e8:	e004      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_GPIO_Init+0x204>
 80039f2:	2300      	movs	r3, #0
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f002 0203 	and.w	r2, r2, #3
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	4093      	lsls	r3, r2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a04:	4935      	ldr	r1, [pc, #212]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a36:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	f67f aea2 	bls.w	800380c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e267      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d075      	beq.n	8003c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4a:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d00c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d112      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b82      	ldr	r3, [pc, #520]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4b7e      	ldr	r3, [pc, #504]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05b      	beq.n	8003c34 <HAL_RCC_OscConfig+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d157      	bne.n	8003c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e242      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x74>
 8003b92:	4b76      	ldr	r3, [pc, #472]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a75      	ldr	r2, [pc, #468]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e01d      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x98>
 8003baa:	4b70      	ldr	r3, [pc, #448]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6f      	ldr	r2, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b6d      	ldr	r3, [pc, #436]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6c      	ldr	r2, [pc, #432]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003bc4:	4b69      	ldr	r3, [pc, #420]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a65      	ldr	r2, [pc, #404]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fd34 	bl	8002650 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe fd30 	bl	8002650 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e207      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0xc0>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fd20 	bl	8002650 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe fd1c 	bl	8002650 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1f3      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0xe8>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d063      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d11c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b44      	ldr	r3, [pc, #272]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d116      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e1c7      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4937      	ldr	r1, [pc, #220]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	e03a      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c9c:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x244>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fcd5 	bl	8002650 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe fcd1 	bl	8002650 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1a8      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4925      	ldr	r1, [pc, #148]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_RCC_OscConfig+0x244>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fcb4 	bl	8002650 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cec:	f7fe fcb0 	bl	8002650 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e187      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d036      	beq.n	8003d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_RCC_OscConfig+0x248>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fe fc94 	bl	8002650 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe fc90 	bl	8002650 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e167      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x200>
 8003d4a:	e01b      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCC_OscConfig+0x248>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fc7d 	bl	8002650 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	e00e      	b.n	8003d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fc79 	bl	8002650 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d907      	bls.n	8003d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e150      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	42470000 	.word	0x42470000
 8003d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ea      	bne.n	8003d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8097 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d96:	4b81      	ldr	r3, [pc, #516]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	4b7d      	ldr	r3, [pc, #500]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	4a7c      	ldr	r2, [pc, #496]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	; 0x40
 8003db2:	4b7a      	ldr	r3, [pc, #488]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b77      	ldr	r3, [pc, #476]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b74      	ldr	r3, [pc, #464]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a73      	ldr	r2, [pc, #460]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fe fc39 	bl	8002650 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fe fc35 	bl	8002650 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e10c      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2ea>
 8003e08:	4b64      	ldr	r3, [pc, #400]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	e01c      	b.n	8003e50 <HAL_RCC_OscConfig+0x324>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x30c>
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a5e      	ldr	r2, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0x324>
 8003e38:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a54      	ldr	r2, [pc, #336]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0304 	bic.w	r3, r3, #4
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe fbfa 	bl	8002650 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fe fbf6 	bl	8002650 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0cb      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <HAL_RCC_OscConfig+0x334>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e84:	f7fe fbe4 	bl	8002650 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fe fbe0 	bl	8002650 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0b5      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ee      	bne.n	8003e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	4a38      	ldr	r2, [pc, #224]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a1 	beq.w	800400c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d05c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d141      	bne.n	8003f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fbb4 	bl	8002650 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe fbb0 	bl	8002650 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e087      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fb89 	bl	8002650 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fe fb85 	bl	8002650 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e05c      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x416>
 8003f60:	e054      	b.n	800400c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fb72 	bl	8002650 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe fb6e 	bl	8002650 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e045      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x444>
 8003f8e:	e03d      	b.n	800400c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e038      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x4ec>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d028      	beq.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d121      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d11a      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d111      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0cc      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d90c      	bls.n	8004058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0b8      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a58      	ldr	r2, [pc, #352]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	494d      	ldr	r1, [pc, #308]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d044      	beq.n	800413c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d119      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e07f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d003      	beq.n	80040da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e06f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e067      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4934      	ldr	r1, [pc, #208]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800410c:	f7fe faa0 	bl	8002650 <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	e00a      	b.n	800412a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004114:	f7fe fa9c 	bl	8002650 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 020c 	and.w	r2, r3, #12
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	429a      	cmp	r2, r3
 800413a:	d1eb      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d20c      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e032      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4916      	ldr	r1, [pc, #88]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	490e      	ldr	r1, [pc, #56]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a2:	f000 f821 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80041a6:	4602      	mov	r2, r0
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	490a      	ldr	r1, [pc, #40]	; (80041dc <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	5ccb      	ldrb	r3, [r1, r3]
 80041b6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fa00 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023c00 	.word	0x40023c00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	08006cac 	.word	0x08006cac
 80041e0:	20000008 	.word	0x20000008
 80041e4:	2000000c 	.word	0x2000000c

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b090      	sub	sp, #64	; 0x40
 80041ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
 80041f4:	2300      	movs	r3, #0
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f8:	2300      	movs	r3, #0
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_GetSysClockFreq+0x180>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b08      	cmp	r3, #8
 800420a:	d00d      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x40>
 800420c:	2b08      	cmp	r3, #8
 800420e:	f200 80a1 	bhi.w	8004354 <HAL_RCC_GetSysClockFreq+0x16c>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x34>
 8004216:	2b04      	cmp	r3, #4
 8004218:	d003      	beq.n	8004222 <HAL_RCC_GetSysClockFreq+0x3a>
 800421a:	e09b      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_GetSysClockFreq+0x184>)
 800421e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004220:	e09b      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004222:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCC_GetSysClockFreq+0x188>)
 8004224:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004226:	e098      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_GetSysClockFreq+0x180>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004232:	4b4d      	ldr	r3, [pc, #308]	; (8004368 <HAL_RCC_GetSysClockFreq+0x180>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d028      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_RCC_GetSysClockFreq+0x180>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	2200      	movs	r2, #0
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	627a      	str	r2, [r7, #36]	; 0x24
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004250:	2100      	movs	r1, #0
 8004252:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_RCC_GetSysClockFreq+0x188>)
 8004254:	fb03 f201 	mul.w	r2, r3, r1
 8004258:	2300      	movs	r3, #0
 800425a:	fb00 f303 	mul.w	r3, r0, r3
 800425e:	4413      	add	r3, r2
 8004260:	4a43      	ldr	r2, [pc, #268]	; (8004370 <HAL_RCC_GetSysClockFreq+0x188>)
 8004262:	fba0 1202 	umull	r1, r2, r0, r2
 8004266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004268:	460a      	mov	r2, r1
 800426a:	62ba      	str	r2, [r7, #40]	; 0x28
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	4413      	add	r3, r2
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004274:	2200      	movs	r2, #0
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004282:	f7fc fb9d 	bl	80009c0 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4613      	mov	r3, r2
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428e:	e053      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_RCC_GetSysClockFreq+0x180>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	2200      	movs	r2, #0
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	617a      	str	r2, [r7, #20]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042a2:	f04f 0b00 	mov.w	fp, #0
 80042a6:	4652      	mov	r2, sl
 80042a8:	465b      	mov	r3, fp
 80042aa:	f04f 0000 	mov.w	r0, #0
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	0159      	lsls	r1, r3, #5
 80042b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b8:	0150      	lsls	r0, r2, #5
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	ebb2 080a 	subs.w	r8, r2, sl
 80042c2:	eb63 090b 	sbc.w	r9, r3, fp
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042da:	ebb2 0408 	subs.w	r4, r2, r8
 80042de:	eb63 0509 	sbc.w	r5, r3, r9
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	00eb      	lsls	r3, r5, #3
 80042ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f0:	00e2      	lsls	r2, r4, #3
 80042f2:	4614      	mov	r4, r2
 80042f4:	461d      	mov	r5, r3
 80042f6:	eb14 030a 	adds.w	r3, r4, sl
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	eb45 030b 	adc.w	r3, r5, fp
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800430e:	4629      	mov	r1, r5
 8004310:	028b      	lsls	r3, r1, #10
 8004312:	4621      	mov	r1, r4
 8004314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004318:	4621      	mov	r1, r4
 800431a:	028a      	lsls	r2, r1, #10
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004322:	2200      	movs	r2, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	60fa      	str	r2, [r7, #12]
 8004328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800432c:	f7fc fb48 	bl	80009c0 <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_GetSysClockFreq+0x180>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	3301      	adds	r3, #1
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004352:	e002      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCC_GetSysClockFreq+0x184>)
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800435c:	4618      	mov	r0, r3
 800435e:	3740      	adds	r7, #64	; 0x40
 8004360:	46bd      	mov	sp, r7
 8004362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800
 800436c:	00f42400 	.word	0x00f42400
 8004370:	017d7840 	.word	0x017d7840

08004374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_RCC_GetHCLKFreq+0x14>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000008 	.word	0x20000008

0800438c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004390:	f7ff fff0 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4903      	ldr	r1, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	08006cbc 	.word	0x08006cbc

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b8:	f7ff ffdc 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0b5b      	lsrs	r3, r3, #13
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08006cbc 	.word	0x08006cbc

080043dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07b      	b.n	80044e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fe:	d009      	beq.n	8004414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	61da      	str	r2, [r3, #28]
 8004406:	e005      	b.n	8004414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fb32 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	ea42 0103 	orr.w	r1, r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0104 	and.w	r1, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0210 	and.w	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b088      	sub	sp, #32
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_SPI_Transmit+0x22>
 800450c:	2302      	movs	r3, #2
 800450e:	e126      	b.n	800475e <HAL_SPI_Transmit+0x270>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004518:	f7fe f89a 	bl	8002650 <HAL_GetTick>
 800451c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004532:	e10b      	b.n	800474c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_Transmit+0x52>
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004544:	e102      	b.n	800474c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	88fa      	ldrh	r2, [r7, #6]
 800455e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458c:	d10f      	bne.n	80045ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800459c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d007      	beq.n	80045cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d4:	d14b      	bne.n	800466e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_Transmit+0xf6>
 80045de:	8afb      	ldrh	r3, [r7, #22]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d13e      	bne.n	8004662 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	881a      	ldrh	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	1c9a      	adds	r2, r3, #2
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004608:	e02b      	b.n	8004662 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d112      	bne.n	800463e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	86da      	strh	r2, [r3, #54]	; 0x36
 800463c:	e011      	b.n	8004662 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463e:	f7fe f807 	bl	8002650 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d803      	bhi.n	8004656 <HAL_SPI_Transmit+0x168>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d102      	bne.n	800465c <HAL_SPI_Transmit+0x16e>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004660:	e074      	b.n	800474c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ce      	bne.n	800460a <HAL_SPI_Transmit+0x11c>
 800466c:	e04c      	b.n	8004708 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_SPI_Transmit+0x18e>
 8004676:	8afb      	ldrh	r3, [r7, #22]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d140      	bne.n	80046fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	7812      	ldrb	r2, [r2, #0]
 8004688:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046a2:	e02c      	b.n	80046fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d113      	bne.n	80046da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046d8:	e011      	b.n	80046fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046da:	f7fd ffb9 	bl	8002650 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d803      	bhi.n	80046f2 <HAL_SPI_Transmit+0x204>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d102      	bne.n	80046f8 <HAL_SPI_Transmit+0x20a>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046fc:	e026      	b.n	800474c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1cd      	bne.n	80046a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f8b3 	bl	8004878 <SPI_EndRxTxTransaction>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e000      	b.n	800474c <HAL_SPI_Transmit+0x25e>
  }

error:
 800474a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800475c:	7ffb      	ldrb	r3, [r7, #31]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004778:	f7fd ff6a 	bl	8002650 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4413      	add	r3, r2
 8004786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004788:	f7fd ff62 	bl	8002650 <HAL_GetTick>
 800478c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	015b      	lsls	r3, r3, #5
 8004794:	0d1b      	lsrs	r3, r3, #20
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479e:	e054      	b.n	800484a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d050      	beq.n	800484a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a8:	f7fd ff52 	bl	8002650 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d902      	bls.n	80047be <SPI_WaitFlagStateUntilTimeout+0x56>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d13d      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d6:	d111      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e0:	d004      	beq.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d107      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d10f      	bne.n	8004826 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e017      	b.n	800486a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3b01      	subs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	429a      	cmp	r2, r3
 8004866:	d19b      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000008 	.word	0x20000008

08004878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <SPI_EndRxTxTransaction+0x7c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <SPI_EndRxTxTransaction+0x80>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0d5b      	lsrs	r3, r3, #21
 8004890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a2:	d112      	bne.n	80048ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff ff5a 	bl	8004768 <SPI_WaitFlagStateUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e00f      	b.n	80048ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d0f2      	beq.n	80048ca <SPI_EndRxTxTransaction+0x52>
 80048e4:	e000      	b.n	80048e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80048e6:	bf00      	nop
  }

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000008 	.word	0x20000008
 80048f8:	165e9f81 	.word	0x165e9f81

080048fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e041      	b.n	8004992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd fce4 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 f9fa 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e044      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <HAL_TIM_Base_Start_IT+0xb0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049de:	d013      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <HAL_TIM_Base_Start_IT+0xb4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a19      	ldr	r2, [pc, #100]	; (8004a54 <HAL_TIM_Base_Start_IT+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <HAL_TIM_Base_Start_IT+0xbc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <HAL_TIM_Base_Start_IT+0xc0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40014000 	.word	0x40014000

08004a60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10f      	bne.n	8004aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d122      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d11b      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0202 	mvn.w	r2, #2
 8004aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8f8 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004b06:	e005      	b.n	8004b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8ea 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f8fb 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d122      	bne.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d11b      	bne.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0204 	mvn.w	r2, #4
 8004b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8ce 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004b5a:	e005      	b.n	8004b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8c0 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8d1 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d122      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d11b      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0208 	mvn.w	r2, #8
 8004b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2204      	movs	r2, #4
 8004b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8a4 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004bae:	e005      	b.n	8004bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f896 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8a7 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d122      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d11b      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0210 	mvn.w	r2, #16
 8004be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2208      	movs	r2, #8
 8004bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f87a 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004c02:	e005      	b.n	8004c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f86c 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f87d 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10e      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0201 	mvn.w	r2, #1
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f846 	bl	8004cce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b80      	cmp	r3, #128	; 0x80
 8004c4e:	d10e      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8ed 	bl	8004e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d10e      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d107      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f842 	bl	8004d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d107      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0220 	mvn.w	r2, #32
 8004cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8b7 	bl	8004e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a34      	ldr	r2, [pc, #208]	; (8004e18 <TIM_Base_SetConfig+0xe4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a31      	ldr	r2, [pc, #196]	; (8004e1c <TIM_Base_SetConfig+0xe8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <TIM_Base_SetConfig+0xec>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <TIM_Base_SetConfig+0xf0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <TIM_Base_SetConfig+0xe4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <TIM_Base_SetConfig+0xe8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <TIM_Base_SetConfig+0xec>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <TIM_Base_SetConfig+0xf0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <TIM_Base_SetConfig+0xf4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <TIM_Base_SetConfig+0xf8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <TIM_Base_SetConfig+0xfc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <TIM_Base_SetConfig+0xe4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	615a      	str	r2, [r3, #20]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e03f      	b.n	8004eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fd faa4 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	; 0x24
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fc07 	bl	80056b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	; 0x30
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d165      	bne.n	8004fde <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_UART_Transmit_DMA+0x26>
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e05e      	b.n	8004fe0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_UART_Transmit_DMA+0x38>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e057      	b.n	8004fe0 <HAL_UART_Transmit_DMA+0xe8>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2221      	movs	r2, #33	; 0x21
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_UART_Transmit_DMA+0xf0>)
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f64:	4a21      	ldr	r2, [pc, #132]	; (8004fec <HAL_UART_Transmit_DMA+0xf4>)
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <HAL_UART_Transmit_DMA+0xf8>)
 8004f6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	2200      	movs	r2, #0
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	f7fe f8fc 	bl	800318c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f9c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc6:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6a39      	ldr	r1, [r7, #32]
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3730      	adds	r7, #48	; 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	080051bb 	.word	0x080051bb
 8004fec:	08005255 	.word	0x08005255
 8004ff0:	080053cd 	.word	0x080053cd

08004ff4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d11d      	bne.n	800504a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Receive_DMA+0x26>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e016      	b.n	800504c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive_DMA+0x38>
 8005028:	2302      	movs	r3, #2
 800502a:	e00f      	b.n	800504c <HAL_UART_Receive_DMA+0x58>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	461a      	mov	r2, r3
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 fa0d 	bl	8005460 <UART_Start_Receive_DMA>
 8005046:	4603      	mov	r3, r0
 8005048:	e000      	b.n	800504c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b090      	sub	sp, #64	; 0x40
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800505c:	2300      	movs	r3, #0
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b21      	cmp	r3, #33	; 0x21
 8005080:	d128      	bne.n	80050d4 <HAL_UART_DMAStop+0x80>
 8005082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d025      	beq.n	80050d4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	623b      	str	r3, [r7, #32]
   return(result);
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a8:	633a      	str	r2, [r7, #48]	; 0x30
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe f8b7 	bl	800323c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa64 	bl	800559c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b22      	cmp	r3, #34	; 0x22
 80050f4:	d128      	bne.n	8005148 <HAL_UART_DMAStop+0xf4>
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d025      	beq.n	8005148 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	61fa      	str	r2, [r7, #28]
 800511e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	69b9      	ldr	r1, [r7, #24]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	617b      	str	r3, [r7, #20]
   return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe f87d 	bl	800323c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa52 	bl	80055ec <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3740      	adds	r7, #64	; 0x40
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b090      	sub	sp, #64	; 0x40
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d137      	bne.n	8005246 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80051d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d8:	2200      	movs	r2, #0
 80051da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	623b      	str	r3, [r7, #32]
   return(result);
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fc:	633a      	str	r2, [r7, #48]	; 0x30
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e5      	bne.n	80051dc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	330c      	adds	r3, #12
 800522e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005230:	61fa      	str	r2, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	617b      	str	r3, [r7, #20]
   return(result);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005244:	e002      	b.n	800524c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005246:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005248:	f7ff ff83 	bl	8005152 <HAL_UART_TxCpltCallback>
}
 800524c:	bf00      	nop
 800524e:	3740      	adds	r7, #64	; 0x40
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ff7f 	bl	8005166 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b09c      	sub	sp, #112	; 0x70
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d172      	bne.n	8005372 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	2200      	movs	r2, #0
 8005290:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80052b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	667b      	str	r3, [r7, #100]	; 0x64
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052e6:	647a      	str	r2, [r7, #68]	; 0x44
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	623b      	str	r3, [r7, #32]
   return(result);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	663b      	str	r3, [r7, #96]	; 0x60
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531a:	633a      	str	r2, [r7, #48]	; 0x30
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800532e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	2b01      	cmp	r3, #1
 800533c:	d119      	bne.n	8005372 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	60fb      	str	r3, [r7, #12]
   return(result);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f023 0310 	bic.w	r3, r3, #16
 8005354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	617b      	str	r3, [r7, #20]
   return(result);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d106      	bne.n	8005388 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800537e:	4619      	mov	r1, r3
 8005380:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005382:	f7ff ff0e 	bl	80051a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005386:	e002      	b.n	800538e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005388:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800538a:	f7fc fae7 	bl	800195c <HAL_UART_RxCpltCallback>
}
 800538e:	bf00      	nop
 8005390:	3770      	adds	r7, #112	; 0x70
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d108      	bne.n	80053be <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	4619      	mov	r1, r3
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fef3 	bl	80051a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053bc:	e002      	b.n	80053c4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff fedb 	bl	800517a <HAL_UART_RxHalfCpltCallback>
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b21      	cmp	r3, #33	; 0x21
 80053fe:	d108      	bne.n	8005412 <UART_DMAError+0x46>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800540c:	68b8      	ldr	r0, [r7, #8]
 800540e:	f000 f8c5 	bl	800559c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	d108      	bne.n	8005446 <UART_DMAError+0x7a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005440:	68b8      	ldr	r0, [r7, #8]
 8005442:	f000 f8d3 	bl	80055ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0210 	orr.w	r2, r3, #16
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005452:	68b8      	ldr	r0, [r7, #8]
 8005454:	f7ff fe9b 	bl	800518e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b098      	sub	sp, #96	; 0x60
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2222      	movs	r2, #34	; 0x22
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	4a40      	ldr	r2, [pc, #256]	; (8005590 <UART_Start_Receive_DMA+0x130>)
 800548e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	4a3f      	ldr	r2, [pc, #252]	; (8005594 <UART_Start_Receive_DMA+0x134>)
 8005496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	4a3e      	ldr	r2, [pc, #248]	; (8005598 <UART_Start_Receive_DMA+0x138>)
 800549e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	2200      	movs	r2, #0
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3304      	adds	r3, #4
 80054b8:	4619      	mov	r1, r3
 80054ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	f7fd fe64 	bl	800318c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d019      	beq.n	800551e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	65bb      	str	r3, [r7, #88]	; 0x58
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800550a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e5      	bne.n	80054ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	657b      	str	r3, [r7, #84]	; 0x54
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3314      	adds	r3, #20
 800553c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800553e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	617b      	str	r3, [r7, #20]
   return(result);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005568:	653b      	str	r3, [r7, #80]	; 0x50
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005572:	627a      	str	r2, [r7, #36]	; 0x24
 8005574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6a39      	ldr	r1, [r7, #32]
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3760      	adds	r7, #96	; 0x60
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	08005271 	.word	0x08005271
 8005594:	08005397 	.word	0x08005397
 8005598:	080053cd 	.word	0x080053cd

0800559c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	; 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	61ba      	str	r2, [r7, #24]
 80055c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	613b      	str	r3, [r7, #16]
   return(result);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80055e0:	bf00      	nop
 80055e2:	3724      	adds	r7, #36	; 0x24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b095      	sub	sp, #84	; 0x54
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005614:	643a      	str	r2, [r7, #64]	; 0x40
 8005616:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800561a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e5      	bne.n	80055f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800564e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	2b01      	cmp	r3, #1
 8005662:	d119      	bne.n	8005698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60bb      	str	r3, [r7, #8]
   return(result);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	647b      	str	r3, [r7, #68]	; 0x44
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005684:	61ba      	str	r2, [r7, #24]
 8005686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056a6:	bf00      	nop
 80056a8:	3754      	adds	r7, #84	; 0x54
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b0c0      	sub	sp, #256	; 0x100
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	68d9      	ldr	r1, [r3, #12]
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	ea40 0301 	orr.w	r3, r0, r1
 80056dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800570c:	f021 010c 	bic.w	r1, r1, #12
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800571a:	430b      	orrs	r3, r1
 800571c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572e:	6999      	ldr	r1, [r3, #24]
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	ea40 0301 	orr.w	r3, r0, r1
 800573a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b8f      	ldr	r3, [pc, #572]	; (8005980 <UART_SetConfig+0x2cc>)
 8005744:	429a      	cmp	r2, r3
 8005746:	d005      	beq.n	8005754 <UART_SetConfig+0xa0>
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b8d      	ldr	r3, [pc, #564]	; (8005984 <UART_SetConfig+0x2d0>)
 8005750:	429a      	cmp	r2, r3
 8005752:	d104      	bne.n	800575e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fe fe2e 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800575c:	e003      	b.n	8005766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800575e:	f7fe fe15 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 8005762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005770:	f040 810c 	bne.w	800598c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800577e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	1891      	adds	r1, r2, r2
 800578c:	65b9      	str	r1, [r7, #88]	; 0x58
 800578e:	415b      	adcs	r3, r3
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005796:	4621      	mov	r1, r4
 8005798:	eb12 0801 	adds.w	r8, r2, r1
 800579c:	4629      	mov	r1, r5
 800579e:	eb43 0901 	adc.w	r9, r3, r1
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b6:	4690      	mov	r8, r2
 80057b8:	4699      	mov	r9, r3
 80057ba:	4623      	mov	r3, r4
 80057bc:	eb18 0303 	adds.w	r3, r8, r3
 80057c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057c4:	462b      	mov	r3, r5
 80057c6:	eb49 0303 	adc.w	r3, r9, r3
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057e2:	460b      	mov	r3, r1
 80057e4:	18db      	adds	r3, r3, r3
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
 80057e8:	4613      	mov	r3, r2
 80057ea:	eb42 0303 	adc.w	r3, r2, r3
 80057ee:	657b      	str	r3, [r7, #84]	; 0x54
 80057f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057f8:	f7fb f8e2 	bl	80009c0 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4b61      	ldr	r3, [pc, #388]	; (8005988 <UART_SetConfig+0x2d4>)
 8005802:	fba3 2302 	umull	r2, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	011c      	lsls	r4, r3, #4
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	64b9      	str	r1, [r7, #72]	; 0x48
 8005824:	415b      	adcs	r3, r3
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800582c:	4641      	mov	r1, r8
 800582e:	eb12 0a01 	adds.w	sl, r2, r1
 8005832:	4649      	mov	r1, r9
 8005834:	eb43 0b01 	adc.w	fp, r3, r1
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800584c:	4692      	mov	sl, r2
 800584e:	469b      	mov	fp, r3
 8005850:	4643      	mov	r3, r8
 8005852:	eb1a 0303 	adds.w	r3, sl, r3
 8005856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800585a:	464b      	mov	r3, r9
 800585c:	eb4b 0303 	adc.w	r3, fp, r3
 8005860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005878:	460b      	mov	r3, r1
 800587a:	18db      	adds	r3, r3, r3
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
 800587e:	4613      	mov	r3, r2
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
 8005886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800588a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800588e:	f7fb f897 	bl	80009c0 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4611      	mov	r1, r2
 8005898:	4b3b      	ldr	r3, [pc, #236]	; (8005988 <UART_SetConfig+0x2d4>)
 800589a:	fba3 2301 	umull	r2, r3, r3, r1
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2264      	movs	r2, #100	; 0x64
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	1acb      	subs	r3, r1, r3
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ae:	4b36      	ldr	r3, [pc, #216]	; (8005988 <UART_SetConfig+0x2d4>)
 80058b0:	fba3 2302 	umull	r2, r3, r3, r2
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058bc:	441c      	add	r4, r3
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d8:	415b      	adcs	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6339      	str	r1, [r7, #48]	; 0x30
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800592c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005934:	460b      	mov	r3, r1
 8005936:	18db      	adds	r3, r3, r3
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
 800593a:	4613      	mov	r3, r2
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800594a:	f7fb f839 	bl	80009c0 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <UART_SetConfig+0x2d4>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	; 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	3332      	adds	r3, #50	; 0x32
 8005966:	4a08      	ldr	r2, [pc, #32]	; (8005988 <UART_SetConfig+0x2d4>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f003 0207 	and.w	r2, r3, #7
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4422      	add	r2, r4
 800597a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800597c:	e105      	b.n	8005b8a <UART_SetConfig+0x4d6>
 800597e:	bf00      	nop
 8005980:	40011000 	.word	0x40011000
 8005984:	40011400 	.word	0x40011400
 8005988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800599a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	6239      	str	r1, [r7, #32]
 80059a6:	415b      	adcs	r3, r3
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ae:	4641      	mov	r1, r8
 80059b0:	1854      	adds	r4, r2, r1
 80059b2:	4649      	mov	r1, r9
 80059b4:	eb43 0501 	adc.w	r5, r3, r1
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	00eb      	lsls	r3, r5, #3
 80059c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c6:	00e2      	lsls	r2, r4, #3
 80059c8:	4614      	mov	r4, r2
 80059ca:	461d      	mov	r5, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	18e3      	adds	r3, r4, r3
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059d4:	464b      	mov	r3, r9
 80059d6:	eb45 0303 	adc.w	r3, r5, r3
 80059da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059fa:	4629      	mov	r1, r5
 80059fc:	008b      	lsls	r3, r1, #2
 80059fe:	4621      	mov	r1, r4
 8005a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a04:	4621      	mov	r1, r4
 8005a06:	008a      	lsls	r2, r1, #2
 8005a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a0c:	f7fa ffd8 	bl	80009c0 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4b60      	ldr	r3, [pc, #384]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005a16:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	011c      	lsls	r4, r3, #4
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	61b9      	str	r1, [r7, #24]
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a40:	4641      	mov	r1, r8
 8005a42:	1851      	adds	r1, r2, r1
 8005a44:	6139      	str	r1, [r7, #16]
 8005a46:	4649      	mov	r1, r9
 8005a48:	414b      	adcs	r3, r1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a58:	4659      	mov	r1, fp
 8005a5a:	00cb      	lsls	r3, r1, #3
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a62:	4651      	mov	r1, sl
 8005a64:	00ca      	lsls	r2, r1, #3
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a74:	464b      	mov	r3, r9
 8005a76:	460a      	mov	r2, r1
 8005a78:	eb42 0303 	adc.w	r3, r2, r3
 8005a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a98:	4649      	mov	r1, r9
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	008a      	lsls	r2, r1, #2
 8005aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aaa:	f7fa ff89 	bl	80009c0 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	; 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad2:	441c      	add	r4, r3
 8005ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad8:	2200      	movs	r2, #0
 8005ada:	673b      	str	r3, [r7, #112]	; 0x70
 8005adc:	677a      	str	r2, [r7, #116]	; 0x74
 8005ade:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	1891      	adds	r1, r2, r2
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	415b      	adcs	r3, r3
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005af2:	4641      	mov	r1, r8
 8005af4:	1851      	adds	r1, r2, r1
 8005af6:	6039      	str	r1, [r7, #0]
 8005af8:	4649      	mov	r1, r9
 8005afa:	414b      	adcs	r3, r1
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	00cb      	lsls	r3, r1, #3
 8005b0e:	4651      	mov	r1, sl
 8005b10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b14:	4651      	mov	r1, sl
 8005b16:	00ca      	lsls	r2, r1, #3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4642      	mov	r2, r8
 8005b20:	189b      	adds	r3, r3, r2
 8005b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b24:	464b      	mov	r3, r9
 8005b26:	460a      	mov	r2, r1
 8005b28:	eb42 0303 	adc.w	r3, r2, r3
 8005b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	663b      	str	r3, [r7, #96]	; 0x60
 8005b38:	667a      	str	r2, [r7, #100]	; 0x64
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b46:	4649      	mov	r1, r9
 8005b48:	008b      	lsls	r3, r1, #2
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b50:	4641      	mov	r1, r8
 8005b52:	008a      	lsls	r2, r1, #2
 8005b54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b58:	f7fa ff32 	bl	80009c0 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005b62:	fba3 1302 	umull	r1, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <UART_SetConfig+0x4e4>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4422      	add	r2, r4
 8005b88:	609a      	str	r2, [r3, #8]
}
 8005b8a:	bf00      	nop
 8005b8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	51eb851f 	.word	0x51eb851f

08005b9c <__errno>:
 8005b9c:	4b01      	ldr	r3, [pc, #4]	; (8005ba4 <__errno+0x8>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000014 	.word	0x20000014

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4d0d      	ldr	r5, [pc, #52]	; (8005be0 <__libc_init_array+0x38>)
 8005bac:	4c0d      	ldr	r4, [pc, #52]	; (8005be4 <__libc_init_array+0x3c>)
 8005bae:	1b64      	subs	r4, r4, r5
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	42a6      	cmp	r6, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	4d0b      	ldr	r5, [pc, #44]	; (8005be8 <__libc_init_array+0x40>)
 8005bba:	4c0c      	ldr	r4, [pc, #48]	; (8005bec <__libc_init_array+0x44>)
 8005bbc:	f000 f974 	bl	8005ea8 <_init>
 8005bc0:	1b64      	subs	r4, r4, r5
 8005bc2:	10a4      	asrs	r4, r4, #2
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd0:	4798      	blx	r3
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bda:	4798      	blx	r3
 8005bdc:	3601      	adds	r6, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	08006cd4 	.word	0x08006cd4
 8005be4:	08006cd4 	.word	0x08006cd4
 8005be8:	08006cd4 	.word	0x08006cd4
 8005bec:	08006cd8 	.word	0x08006cd8

08005bf0 <malloc>:
 8005bf0:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <malloc+0xc>)
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	f000 b87f 	b.w	8005cf8 <_malloc_r>
 8005bfa:	bf00      	nop
 8005bfc:	20000014 	.word	0x20000014

08005c00 <free>:
 8005c00:	4b02      	ldr	r3, [pc, #8]	; (8005c0c <free+0xc>)
 8005c02:	4601      	mov	r1, r0
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	f000 b80b 	b.w	8005c20 <_free_r>
 8005c0a:	bf00      	nop
 8005c0c:	20000014 	.word	0x20000014

08005c10 <memset>:
 8005c10:	4402      	add	r2, r0
 8005c12:	4603      	mov	r3, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <_free_r>:
 8005c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d044      	beq.n	8005cb0 <_free_r+0x90>
 8005c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2a:	9001      	str	r0, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c32:	bfb8      	it	lt
 8005c34:	18e4      	addlt	r4, r4, r3
 8005c36:	f000 f8e3 	bl	8005e00 <__malloc_lock>
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <_free_r+0x94>)
 8005c3c:	9801      	ldr	r0, [sp, #4]
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	b933      	cbnz	r3, 8005c50 <_free_r+0x30>
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c4c:	f000 b8de 	b.w	8005e0c <__malloc_unlock>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d908      	bls.n	8005c66 <_free_r+0x46>
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	1961      	adds	r1, r4, r5
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	e7ed      	b.n	8005c42 <_free_r+0x22>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x50>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x46>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1855      	adds	r5, r2, r1
 8005c74:	42a5      	cmp	r5, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x70>
 8005c78:	6824      	ldr	r4, [r4, #0]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1e0      	bne.n	8005c46 <_free_r+0x26>
 8005c84:	681c      	ldr	r4, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	e7da      	b.n	8005c46 <_free_r+0x26>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x78>
 8005c92:	230c      	movs	r3, #12
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	e7d6      	b.n	8005c46 <_free_r+0x26>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1949      	addeq	r1, r1, r5
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7ca      	b.n	8005c46 <_free_r+0x26>
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	200002fc 	.word	0x200002fc

08005cb8 <sbrk_aligned>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4e0e      	ldr	r6, [pc, #56]	; (8005cf4 <sbrk_aligned+0x3c>)
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	6831      	ldr	r1, [r6, #0]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	b911      	cbnz	r1, 8005cca <sbrk_aligned+0x12>
 8005cc4:	f000 f88c 	bl	8005de0 <_sbrk_r>
 8005cc8:	6030      	str	r0, [r6, #0]
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 f887 	bl	8005de0 <_sbrk_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d00a      	beq.n	8005cec <sbrk_aligned+0x34>
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d007      	beq.n	8005cf0 <sbrk_aligned+0x38>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 f87c 	bl	8005de0 <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d101      	bne.n	8005cf0 <sbrk_aligned+0x38>
 8005cec:	f04f 34ff 	mov.w	r4, #4294967295
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	20000300 	.word	0x20000300

08005cf8 <_malloc_r>:
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	1ccd      	adds	r5, r1, #3
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	2d00      	cmp	r5, #0
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	db01      	blt.n	8005d14 <_malloc_r+0x1c>
 8005d10:	42a9      	cmp	r1, r5
 8005d12:	d905      	bls.n	8005d20 <_malloc_r+0x28>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	2600      	movs	r6, #0
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d20:	4e2e      	ldr	r6, [pc, #184]	; (8005ddc <_malloc_r+0xe4>)
 8005d22:	f000 f86d 	bl	8005e00 <__malloc_lock>
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	461c      	mov	r4, r3
 8005d2a:	bb34      	cbnz	r4, 8005d7a <_malloc_r+0x82>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f7ff ffc2 	bl	8005cb8 <sbrk_aligned>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	4604      	mov	r4, r0
 8005d38:	d14d      	bne.n	8005dd6 <_malloc_r+0xde>
 8005d3a:	6834      	ldr	r4, [r6, #0]
 8005d3c:	4626      	mov	r6, r4
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d140      	bne.n	8005dc4 <_malloc_r+0xcc>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	4631      	mov	r1, r6
 8005d46:	4638      	mov	r0, r7
 8005d48:	eb04 0803 	add.w	r8, r4, r3
 8005d4c:	f000 f848 	bl	8005de0 <_sbrk_r>
 8005d50:	4580      	cmp	r8, r0
 8005d52:	d13a      	bne.n	8005dca <_malloc_r+0xd2>
 8005d54:	6821      	ldr	r1, [r4, #0]
 8005d56:	3503      	adds	r5, #3
 8005d58:	1a6d      	subs	r5, r5, r1
 8005d5a:	f025 0503 	bic.w	r5, r5, #3
 8005d5e:	3508      	adds	r5, #8
 8005d60:	2d0c      	cmp	r5, #12
 8005d62:	bf38      	it	cc
 8005d64:	250c      	movcc	r5, #12
 8005d66:	4629      	mov	r1, r5
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f7ff ffa5 	bl	8005cb8 <sbrk_aligned>
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d02b      	beq.n	8005dca <_malloc_r+0xd2>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	442b      	add	r3, r5
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	e00e      	b.n	8005d98 <_malloc_r+0xa0>
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	1b52      	subs	r2, r2, r5
 8005d7e:	d41e      	bmi.n	8005dbe <_malloc_r+0xc6>
 8005d80:	2a0b      	cmp	r2, #11
 8005d82:	d916      	bls.n	8005db2 <_malloc_r+0xba>
 8005d84:	1961      	adds	r1, r4, r5
 8005d86:	42a3      	cmp	r3, r4
 8005d88:	6025      	str	r5, [r4, #0]
 8005d8a:	bf18      	it	ne
 8005d8c:	6059      	strne	r1, [r3, #4]
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	bf08      	it	eq
 8005d92:	6031      	streq	r1, [r6, #0]
 8005d94:	5162      	str	r2, [r4, r5]
 8005d96:	604b      	str	r3, [r1, #4]
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f104 060b 	add.w	r6, r4, #11
 8005d9e:	f000 f835 	bl	8005e0c <__malloc_unlock>
 8005da2:	f026 0607 	bic.w	r6, r6, #7
 8005da6:	1d23      	adds	r3, r4, #4
 8005da8:	1af2      	subs	r2, r6, r3
 8005daa:	d0b6      	beq.n	8005d1a <_malloc_r+0x22>
 8005dac:	1b9b      	subs	r3, r3, r6
 8005dae:	50a3      	str	r3, [r4, r2]
 8005db0:	e7b3      	b.n	8005d1a <_malloc_r+0x22>
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	bf0c      	ite	eq
 8005db8:	6032      	streq	r2, [r6, #0]
 8005dba:	605a      	strne	r2, [r3, #4]
 8005dbc:	e7ec      	b.n	8005d98 <_malloc_r+0xa0>
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	6864      	ldr	r4, [r4, #4]
 8005dc2:	e7b2      	b.n	8005d2a <_malloc_r+0x32>
 8005dc4:	4634      	mov	r4, r6
 8005dc6:	6876      	ldr	r6, [r6, #4]
 8005dc8:	e7b9      	b.n	8005d3e <_malloc_r+0x46>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	603b      	str	r3, [r7, #0]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f000 f81c 	bl	8005e0c <__malloc_unlock>
 8005dd4:	e7a1      	b.n	8005d1a <_malloc_r+0x22>
 8005dd6:	6025      	str	r5, [r4, #0]
 8005dd8:	e7de      	b.n	8005d98 <_malloc_r+0xa0>
 8005dda:	bf00      	nop
 8005ddc:	200002fc 	.word	0x200002fc

08005de0 <_sbrk_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	; (8005dfc <_sbrk_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fc f9f0 	bl	80021d0 <_sbrk>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_sbrk_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_sbrk_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000304 	.word	0x20000304

08005e00 <__malloc_lock>:
 8005e00:	4801      	ldr	r0, [pc, #4]	; (8005e08 <__malloc_lock+0x8>)
 8005e02:	f000 b809 	b.w	8005e18 <__retarget_lock_acquire_recursive>
 8005e06:	bf00      	nop
 8005e08:	20000308 	.word	0x20000308

08005e0c <__malloc_unlock>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	; (8005e14 <__malloc_unlock+0x8>)
 8005e0e:	f000 b804 	b.w	8005e1a <__retarget_lock_release_recursive>
 8005e12:	bf00      	nop
 8005e14:	20000308 	.word	0x20000308

08005e18 <__retarget_lock_acquire_recursive>:
 8005e18:	4770      	bx	lr

08005e1a <__retarget_lock_release_recursive>:
 8005e1a:	4770      	bx	lr

08005e1c <round>:
 8005e1c:	ec51 0b10 	vmov	r0, r1, d0
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8005e26:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8005e2a:	2c13      	cmp	r4, #19
 8005e2c:	ee10 2a10 	vmov	r2, s0
 8005e30:	460b      	mov	r3, r1
 8005e32:	dc19      	bgt.n	8005e68 <round+0x4c>
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	da09      	bge.n	8005e4c <round+0x30>
 8005e38:	3401      	adds	r4, #1
 8005e3a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005e3e:	d103      	bne.n	8005e48 <round+0x2c>
 8005e40:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e48:	2200      	movs	r2, #0
 8005e4a:	e028      	b.n	8005e9e <round+0x82>
 8005e4c:	4d15      	ldr	r5, [pc, #84]	; (8005ea4 <round+0x88>)
 8005e4e:	4125      	asrs	r5, r4
 8005e50:	ea01 0605 	and.w	r6, r1, r5
 8005e54:	4332      	orrs	r2, r6
 8005e56:	d00e      	beq.n	8005e76 <round+0x5a>
 8005e58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005e5c:	fa42 f404 	asr.w	r4, r2, r4
 8005e60:	4423      	add	r3, r4
 8005e62:	ea23 0305 	bic.w	r3, r3, r5
 8005e66:	e7ef      	b.n	8005e48 <round+0x2c>
 8005e68:	2c33      	cmp	r4, #51	; 0x33
 8005e6a:	dd07      	ble.n	8005e7c <round+0x60>
 8005e6c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005e70:	d101      	bne.n	8005e76 <round+0x5a>
 8005e72:	f7fa f9b5 	bl	80001e0 <__adddf3>
 8005e76:	ec41 0b10 	vmov	d0, r0, r1
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8005e80:	f04f 35ff 	mov.w	r5, #4294967295
 8005e84:	40f5      	lsrs	r5, r6
 8005e86:	4228      	tst	r0, r5
 8005e88:	d0f5      	beq.n	8005e76 <round+0x5a>
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8005e90:	fa01 f404 	lsl.w	r4, r1, r4
 8005e94:	1912      	adds	r2, r2, r4
 8005e96:	bf28      	it	cs
 8005e98:	185b      	addcs	r3, r3, r1
 8005e9a:	ea22 0205 	bic.w	r2, r2, r5
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	e7e8      	b.n	8005e76 <round+0x5a>
 8005ea4:	000fffff 	.word	0x000fffff

08005ea8 <_init>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_fini>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr
