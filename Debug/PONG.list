
PONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c8  08008d50  08008d50  00018d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e18  08009e18  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e20  08009e20  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000090  08009eb8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08009eb8  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001387b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349a  00000000  00000000  0003393b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00036dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00038000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab62  00000000  00000000  00039058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f77  00000000  00000000  00053bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b191  00000000  00000000  0006cb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  00107d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008d34 	.word	0x08008d34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008d34 	.word	0x08008d34

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000e8c:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <MX_ADC1_Init+0xf8>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e98:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <MX_ADC1_Init+0xfc>)
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	4823      	ldr	r0, [pc, #140]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000ee0:	f002 f908 	bl	80030f4 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000eea:	f000 fdf9 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	481b      	ldr	r0, [pc, #108]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000f00:	f002 fa88 	bl	8003414 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000f0a:	f000 fde9 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000f1c:	f002 fa7a 	bl	8003414 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f26:	f000 fddb 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000f38:	f002 fa6c 	bl	8003414 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000f42:	f000 fdcd 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC1_Init+0xf4>)
 8000f54:	f002 fa5e 	bl	8003414 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000f5e:	f000 fdbf 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000ac 	.word	0x200000ac
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_ADC_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000fd2:	231e      	movs	r3, #30
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_ADC_MspInit+0x84>)
 8000fe6:	f002 fd45 	bl	8003a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <eraseBall>:
#endif

#define PADDLE_HEIGHT 5

void eraseBall(int x, int y)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af02      	add	r7, sp, #8
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	ST7735_FillRectangleFast(x, y, 6, 6, ST7735_BLACK);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b298      	uxth	r0, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b299      	uxth	r1, r3
 8001012:	2300      	movs	r3, #0
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2306      	movs	r3, #6
 8001018:	2206      	movs	r2, #6
 800101a:	f001 f8e7 	bl	80021ec <ST7735_FillRectangleFast>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <drawBall>:

void drawBall(int x, int y)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af02      	add	r7, sp, #8
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	ST7735_FillRectangleFast(x, y, 6, 6, ST7735_WHITE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	b298      	uxth	r0, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b299      	uxth	r1, r3
 8001038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2306      	movs	r3, #6
 8001040:	2206      	movs	r2, #6
 8001042:	f001 f8d3 	bl	80021ec <ST7735_FillRectangleFast>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <clearDisplay>:

void clearDisplay()
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
	ST7735_FillScreenFast(ST7735_BLACK);
 8001052:	2000      	movs	r0, #0
 8001054:	f001 f961 	bl	800231a <ST7735_FillScreenFast>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <drawNewGame>:

void drawNewGame()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af02      	add	r7, sp, #8
	ST7735_FillRectangleFast(44, 0, 40, PADDLE_HEIGHT, ST7735_WHITE); 	//p1
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2305      	movs	r3, #5
 800106a:	2228      	movs	r2, #40	; 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	202c      	movs	r0, #44	; 0x2c
 8001070:	f001 f8bc 	bl	80021ec <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(44, 155, 40, PADDLE_HEIGHT, ST7735_WHITE); 	//p2
 8001074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2305      	movs	r3, #5
 800107c:	2228      	movs	r2, #40	; 0x28
 800107e:	219b      	movs	r1, #155	; 0x9b
 8001080:	202c      	movs	r0, #44	; 0x2c
 8001082:	f001 f8b3 	bl	80021ec <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(61, 71, 6, 6, ST7735_WHITE); 	//ball
 8001086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2306      	movs	r3, #6
 800108e:	2206      	movs	r2, #6
 8001090:	2147      	movs	r1, #71	; 0x47
 8001092:	203d      	movs	r0, #61	; 0x3d
 8001094:	f001 f8aa 	bl	80021ec <ST7735_FillRectangleFast>
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <drawGameOver>:

void drawGameOver()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af04      	add	r7, sp, #16
	 ST7735_FillScreen(ST7735_MAGENTA);
 80010a6:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80010aa:	f001 f925 	bl	80022f8 <ST7735_FillScreen>
	 ST7735_WriteString(15, 80, "GAME OVER", Font_11x18, ST7735_WHITE, ST7735_MAGENTA);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <drawGameOver+0x34>)
 80010b0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80010b4:	9202      	str	r2, [sp, #8]
 80010b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	9200      	str	r2, [sp, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <drawGameOver+0x38>)
 80010c4:	2150      	movs	r1, #80	; 0x50
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 ffd1 	bl	800206e <ST7735_WriteString>
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	08008d50 	.word	0x08008d50

080010dc <doGameTick>:
#define STDLIB_H_
#include <stdlib.h>
#endif

void doGameTick(ball *b, player *p1, player *p2)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	wallBounce(b);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f80c 	bl	8001106 <wallBounce>
	paddleBounce(b, p1, p2);
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 f822 	bl	800113c <paddleBounce>
	updateBall(b);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f8e9 	bl	80012d0 <updateBall>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <wallBounce>:

void wallBounce(ball *b)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	if(b->x<=3 || 125<=b->x) //check wall bounce
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	6809      	ldr	r1, [r1, #0]
 8001112:	2903      	cmp	r1, #3
 8001114:	dd03      	ble.n	800111e <wallBounce+0x18>
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	6809      	ldr	r1, [r1, #0]
 800111a:	297c      	cmp	r1, #124	; 0x7c
 800111c:	dd08      	ble.n	8001130 <wallBounce+0x2a>
	{
		b->vector_x = -b->vector_x;
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001124:	4602      	mov	r2, r0
 8001126:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <paddleBounce>:

void paddleBounce(ball *b, player *p1, player *p2)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	if(b->y<=p1->y+11 && abs(b->x-p1->x)<=23) //player 1 paddle bounce
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	330b      	adds	r3, #11
 8001152:	429a      	cmp	r2, r3
 8001154:	dc14      	bgt.n	8001180 <paddleBounce+0x44>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f113 0f17 	cmn.w	r3, #23
 8001164:	db0c      	blt.n	8001180 <paddleBounce+0x44>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b17      	cmp	r3, #23
 8001172:	dc05      	bgt.n	8001180 <paddleBounce+0x44>
	{
		calculatePaddleBounce(b, p1, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f821 	bl	80011c0 <calculatePaddleBounce>
	}
	else if(p2->y<=b->y && abs(b->x-p2->x)<=23) //player 2 paddle bounce
	{
		calculatePaddleBounce(b, p2, -1);
	}
}
 800117e:	e01a      	b.n	80011b6 <paddleBounce+0x7a>
	else if(p2->y<=b->y && abs(b->x-p2->x)<=23) //player 2 paddle bounce
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dc14      	bgt.n	80011b6 <paddleBounce+0x7a>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f113 0f17 	cmn.w	r3, #23
 800119a:	db0c      	blt.n	80011b6 <paddleBounce+0x7a>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b17      	cmp	r3, #23
 80011a8:	dc05      	bgt.n	80011b6 <paddleBounce+0x7a>
		calculatePaddleBounce(b, p2, -1);
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 f805 	bl	80011c0 <calculatePaddleBounce>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <calculatePaddleBounce>:

void calculatePaddleBounce(ball *b, player* p, int direction)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	b->vector_x = sin((p->x-b->x_f)/20*60*M_PI/180)*(-1);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edd3 7a02 	vldr	s15, [r3, #8]
 80011de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80012c8 <calculatePaddleBounce+0x108>
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	ee17 0a90 	vmov	r0, s15
 80011f6:	f7ff f953 	bl	80004a0 <__aeabi_f2d>
 80011fa:	a331      	add	r3, pc, #196	; (adr r3, 80012c0 <calculatePaddleBounce+0x100>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff f9a6 	bl	8000550 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <calculatePaddleBounce+0x10c>)
 8001212:	f7ff fac7 	bl	80007a4 <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	ec43 2b17 	vmov	d7, r2, r3
 800121e:	eeb0 0a47 	vmov.f32	s0, s14
 8001222:	eef0 0a67 	vmov.f32	s1, s15
 8001226:	f006 fd3b 	bl	8007ca0 <sin>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
 800122e:	4614      	mov	r4, r2
 8001230:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	e9c3 4504 	strd	r4, r5, [r3, #16]
	b->vector_y = cos((p->x-b->x_f)/20*60*M_PI/180)*direction;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	edd3 7a02 	vldr	s15, [r3, #8]
 800124c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001250:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001258:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012c8 <calculatePaddleBounce+0x108>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	ee17 0a90 	vmov	r0, s15
 8001264:	f7ff f91c 	bl	80004a0 <__aeabi_f2d>
 8001268:	a315      	add	r3, pc, #84	; (adr r3, 80012c0 <calculatePaddleBounce+0x100>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f96f 	bl	8000550 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <calculatePaddleBounce+0x10c>)
 8001280:	f7ff fa90 	bl	80007a4 <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ec43 2b17 	vmov	d7, r2, r3
 800128c:	eeb0 0a47 	vmov.f32	s0, s14
 8001290:	eef0 0a67 	vmov.f32	s1, s15
 8001294:	f006 fc68 	bl	8007b68 <cos>
 8001298:	ec55 4b10 	vmov	r4, r5, d0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff f8ed 	bl	800047c <__aeabi_i2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f951 	bl	8000550 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	54442d18 	.word	0x54442d18
 80012c4:	400921fb 	.word	0x400921fb
 80012c8:	42700000 	.word	0x42700000
 80012cc:	40668000 	.word	0x40668000

080012d0 <updateBall>:

void updateBall(ball *b)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	eraseBall(b->x-3, b->y-6);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	1eda      	subs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	3b06      	subs	r3, #6
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f7ff fe8a 	bl	8001000 <eraseBall>
    calculateBallPosition(b);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f80e 	bl	800130e <calculateBallPosition>
    drawBall(b->x-3, b->y-6);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1eda      	subs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b06      	subs	r3, #6
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f7ff fe90 	bl	8001026 <drawBall>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <calculateBallPosition>:

void calculateBallPosition(ball *b)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
    b->x_f = b->x_f+b->vector_x;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f8c0 	bl	80004a0 <__aeabi_f2d>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001326:	f7fe ff5d 	bl	80001e4 <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fbcf 	bl	8000ad4 <__aeabi_d2f>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
    b->y_f = b->y_f+b->vector_y;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8ad 	bl	80004a0 <__aeabi_f2d>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800134c:	f7fe ff4a 	bl	80001e4 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fbbc 	bl	8000ad4 <__aeabi_d2f>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]

    b->x = round(b->x_f);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f89a 	bl	80004a0 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	ec43 2b10 	vmov	d0, r2, r3
 8001374:	f006 fc4c 	bl	8007c10 <round>
 8001378:	ec53 2b10 	vmov	r2, r3, d0
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fb80 	bl	8000a84 <__aeabi_d2iz>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
    b->y = round(b->y_f);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f886 	bl	80004a0 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	ec43 2b10 	vmov	d0, r2, r3
 800139c:	f006 fc38 	bl	8007c10 <round>
 80013a0:	ec53 2b10 	vmov	r2, r3, d0
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fb6c 	bl	8000a84 <__aeabi_d2iz>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <restartGame>:

void restartGame(ball *b, player *p1, player *p2)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
	stopGameTicks();
 80013c6:	f000 f86f 	bl	80014a8 <stopGameTicks>
	clearDisplay();
 80013ca:	f7ff fe40 	bl	800104e <clearDisplay>
	resetGameData(b, p1, p2);
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f80c 	bl	80013f0 <resetGameData>
	drawNewGame();
 80013d8:	f7ff fe40 	bl	800105c <drawNewGame>
	HAL_Delay(500);
 80013dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e0:	f001 fe64 	bl	80030ac <HAL_Delay>
	startGameTicks();
 80013e4:	f000 f852 	bl	800148c <startGameTicks>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <resetGameData>:

void resetGameData(ball *b, player *p1, player *p2)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	p1->x=64;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	601a      	str	r2, [r3, #0]
	p1->y=0;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
	p1->y_min=0;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
	p1->y_max=10;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	220a      	movs	r2, #10
 8001412:	609a      	str	r2, [r3, #8]
	p2->x=64;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	601a      	str	r2, [r3, #0]
	p2->y=155;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	229b      	movs	r2, #155	; 0x9b
 800141e:	605a      	str	r2, [r3, #4]
	p2->y_min=145;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2291      	movs	r2, #145	; 0x91
 8001424:	60da      	str	r2, [r3, #12]
	p2->y_max=155;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	229b      	movs	r2, #155	; 0x9b
 800142a:	609a      	str	r2, [r3, #8]
	b->x = 64;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	601a      	str	r2, [r3, #0]
	b->y = 77;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	224d      	movs	r2, #77	; 0x4d
 8001436:	605a      	str	r2, [r3, #4]
	b->x_f = 64;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800143e:	609a      	str	r2, [r3, #8]
	b->y_f = 77;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <resetGameData+0x7c>)
 8001444:	60da      	str	r2, [r3, #12]
	b->vector_x = 0;
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9c1 2304 	strd	r2, r3, [r1, #16]
	b->vector_y = 1;
 8001454:	68f9      	ldr	r1, [r7, #12]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <resetGameData+0x80>)
 800145c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	429a0000 	.word	0x429a0000
 8001470:	3ff00000 	.word	0x3ff00000

08001474 <gameOver>:

void gameOver(ball *b)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	stopGameTicks();
 800147c:	f000 f814 	bl	80014a8 <stopGameTicks>
	drawGameOver();
 8001480:	f7ff fe0e 	bl	80010a0 <drawGameOver>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <startGameTicks>:

void startGameTicks()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&PADDLE_TIMER);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <startGameTicks+0x14>)
 8001492:	f003 fd4b 	bl	8004f2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&GAME_TIMER);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <startGameTicks+0x18>)
 8001498:	f003 fd48 	bl	8004f2c <HAL_TIM_Base_Start_IT>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200006a0 	.word	0x200006a0
 80014a4:	20000658 	.word	0x20000658

080014a8 <stopGameTicks>:

void stopGameTicks()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&PADDLE_TIMER);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <stopGameTicks+0x14>)
 80014ae:	f003 fd9f 	bl	8004ff0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&GAME_TIMER);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <stopGameTicks+0x18>)
 80014b4:	f003 fd9c 	bl	8004ff0 <HAL_TIM_Base_Stop_IT>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200006a0 	.word	0x200006a0
 80014c0:	20000658 	.word	0x20000658

080014c4 <calculateTilt>:

int calculateTilt(uint32_t var){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return (int)round(10.0*((var-2048.0)/4096.0)); //przy większych czułościach zamiast 2048 powinien być
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7fe ffc5 	bl	800045c <__aeabi_ui2d>
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <calculateTilt+0x68>)
 80014d8:	f7fe fe82 	bl	80001e0 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <calculateTilt+0x6c>)
 80014ea:	f7ff f95b 	bl	80007a4 <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <calculateTilt+0x70>)
 80014fc:	f7ff f828 	bl	8000550 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ec43 2b17 	vmov	d7, r2, r3
 8001508:	eeb0 0a47 	vmov.f32	s0, s14
 800150c:	eef0 0a67 	vmov.f32	s1, s15
 8001510:	f006 fb7e 	bl	8007c10 <round>
 8001514:	ec53 2b10 	vmov	r2, r3, d0
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fab2 	bl	8000a84 <__aeabi_d2iz>
 8001520:	4603      	mov	r3, r0
}                                                  //średni odczytany adc_value przy 0 przechyleniu
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40a00000 	.word	0x40a00000
 8001530:	40b00000 	.word	0x40b00000
 8001534:	40240000 	.word	0x40240000

08001538 <movePaddleX>:

void movePaddleX(player *p, int joystick_tilt){
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	if(joystick_tilt!=0){
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d075      	beq.n	8001634 <movePaddleX+0xfc>
		int paddle_direction_x = (joystick_tilt>0) ? 0 : 1;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	bfd4      	ite	le
 800154e:	2301      	movle	r3, #1
 8001550:	2300      	movgt	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	617b      	str	r3, [r7, #20]
	    int paddle_signum = (joystick_tilt>0) ? 1 : -1;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd01      	ble.n	8001560 <movePaddleX+0x28>
 800155c:	2301      	movs	r3, #1
 800155e:	e001      	b.n	8001564 <movePaddleX+0x2c>
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	613b      	str	r3, [r7, #16]
	    int paddle_limit_x = (p->x+joystick_tilt>=20) ? joystick_tilt : 20-p->x;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	2b13      	cmp	r3, #19
 8001570:	dc04      	bgt.n	800157c <movePaddleX+0x44>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1c3 0314 	rsb	r3, r3, #20
 800157a:	e000      	b.n	800157e <movePaddleX+0x46>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	60fb      	str	r3, [r7, #12]
		paddle_limit_x = (108>=p->x+joystick_tilt) ? paddle_limit_x : 108-p->x;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	2b6c      	cmp	r3, #108	; 0x6c
 800158a:	dd04      	ble.n	8001596 <movePaddleX+0x5e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1c3 036c 	rsb	r3, r3, #108	; 0x6c
 8001594:	e000      	b.n	8001598 <movePaddleX+0x60>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	60fb      	str	r3, [r7, #12]

		ST7735_FillRectangleFast(p->x-paddle_signum*20+paddle_direction_x*paddle_limit_x, p->y, abs(paddle_limit_x), 5, ST7735_BLACK);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	b299      	uxth	r1, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	fb11 f303 	smulbb	r3, r1, r3
 80015ac:	b299      	uxth	r1, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	0300      	lsls	r0, r0, #12
 80015b6:	1ac0      	subs	r0, r0, r3
 80015b8:	0080      	lsls	r0, r0, #2
 80015ba:	1ac3      	subs	r3, r0, r3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	440b      	add	r3, r1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	b298      	uxth	r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	b299      	uxth	r1, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bfb8      	it	lt
 80015d4:	425b      	neglt	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2305      	movs	r3, #5
 80015de:	f000 fe05 	bl	80021ec <ST7735_FillRectangleFast>
		ST7735_FillRectangleFast(p->x+paddle_signum*20+paddle_direction_x*paddle_limit_x, p->y, abs(paddle_limit_x), 5, ST7735_WHITE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b299      	uxth	r1, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	fb11 f303 	smulbb	r3, r1, r3
 80015f4:	b299      	uxth	r1, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	0080      	lsls	r0, r0, #2
 80015fe:	4403      	add	r3, r0
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	b29b      	uxth	r3, r3
 8001604:	440b      	add	r3, r1
 8001606:	b29b      	uxth	r3, r3
 8001608:	4413      	add	r3, r2
 800160a:	b298      	uxth	r0, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	b299      	uxth	r1, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	bfb8      	it	lt
 8001618:	425b      	neglt	r3, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2305      	movs	r3, #5
 8001624:	f000 fde2 	bl	80021ec <ST7735_FillRectangleFast>
		p->x=p->x+paddle_limit_x;}
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	441a      	add	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <movePaddleY>:

void movePaddleY(player *p, int joystick_tilt){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af02      	add	r7, sp, #8
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	if(joystick_tilt!=0){
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05b      	beq.n	8001704 <movePaddleY+0xc8>
		    	int paddle_direction_y = (0>joystick_tilt) ? 1 : 0;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	0fdb      	lsrs	r3, r3, #31
 8001650:	60fb      	str	r3, [r7, #12]
		    	int paddle_limit_y = (p->y+joystick_tilt>=p->y_min) ? joystick_tilt : p->y_min-p->y;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	441a      	add	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	429a      	cmp	r2, r3
 8001660:	da05      	bge.n	800166e <movePaddleY+0x32>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	e000      	b.n	8001670 <movePaddleY+0x34>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	60bb      	str	r3, [r7, #8]
		    	paddle_limit_y = (p->y_max>=p->y+joystick_tilt) ? paddle_limit_y : p->y_max-p->y;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	440b      	add	r3, r1
 800167e:	429a      	cmp	r2, r3
 8001680:	da05      	bge.n	800168e <movePaddleY+0x52>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	e000      	b.n	8001690 <movePaddleY+0x54>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	60bb      	str	r3, [r7, #8]

		        ST7735_FillRectangleFast(p->x-20, p->y+(5+paddle_limit_y)*paddle_direction_y, 40, abs(paddle_limit_y), ST7735_BLACK);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b14      	subs	r3, #20
 800169a:	b298      	uxth	r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3305      	adds	r3, #5
 80016a6:	b299      	uxth	r1, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	fb11 f303 	smulbb	r3, r1, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b299      	uxth	r1, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bfb8      	it	lt
 80016bc:	425b      	neglt	r3, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	2228      	movs	r2, #40	; 0x28
 80016c6:	f000 fd91 	bl	80021ec <ST7735_FillRectangleFast>
		    	ST7735_FillRectangleFast(p->x-20, p->y+paddle_limit_y, 40, abs(paddle_limit_y), ST7735_WHITE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b14      	subs	r3, #20
 80016d2:	b298      	uxth	r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b299      	uxth	r1, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfb8      	it	lt
 80016e8:	425b      	neglt	r3, r3
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	9200      	str	r2, [sp, #0]
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	f000 fd7a 	bl	80021ec <ST7735_FillRectangleFast>
		    	p->y=p->y+paddle_limit_y;}
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	441a      	add	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	605a      	str	r2, [r3, #4]
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <calculateJoystickTilt>:

void calculateJoystickTilt(int *joystick_tilt){
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	uint32_t adc_value[4];
    for (int i = 0; i < 4; i++) {
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	e023      	b.n	8001762 <calculateJoystickTilt+0x56>
		HAL_ADC_Start(&JOYSTICKS_ADC);
 800171a:	4816      	ldr	r0, [pc, #88]	; (8001774 <calculateJoystickTilt+0x68>)
 800171c:	f001 fd2e 	bl	800317c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&JOYSTICKS_ADC, 480);
 8001720:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <calculateJoystickTilt+0x68>)
 8001726:	f001 fddd 	bl	80032e4 <HAL_ADC_PollForConversion>
    	adc_value[i] = HAL_ADC_GetValue(&JOYSTICKS_ADC);
 800172a:	4812      	ldr	r0, [pc, #72]	; (8001774 <calculateJoystickTilt+0x68>)
 800172c:	f001 fe65 	bl	80033fa <HAL_ADC_GetValue>
 8001730:	4602      	mov	r2, r0
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	3320      	adds	r3, #32
 8001738:	443b      	add	r3, r7
 800173a:	f843 2c14 	str.w	r2, [r3, #-20]
    	joystick_tilt[i] = calculateTilt(adc_value[i]);
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	3320      	adds	r3, #32
 8001744:	443b      	add	r3, r7
 8001746:	f853 1c14 	ldr.w	r1, [r3, #-20]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	18d4      	adds	r4, r2, r3
 8001752:	4608      	mov	r0, r1
 8001754:	f7ff feb6 	bl	80014c4 <calculateTilt>
 8001758:	4603      	mov	r3, r0
 800175a:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 4; i++) {
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	3301      	adds	r3, #1
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b03      	cmp	r3, #3
 8001766:	ddd8      	ble.n	800171a <calculateJoystickTilt+0xe>
    }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	200000ac 	.word	0x200000ac

08001778 <movePlayersPaddles>:

void movePlayersPaddles(player *p1, player *p2){
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	int joystick_tilt[4];
	calculateJoystickTilt(joystick_tilt);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffc0 	bl	800170c <calculateJoystickTilt>
	movePaddleX(p1,joystick_tilt[0]);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4619      	mov	r1, r3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fed1 	bl	8001538 <movePaddleX>
	movePaddleY(p1,joystick_tilt[1]);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff4e 	bl	800163c <movePaddleY>
	movePaddleX(p2,joystick_tilt[2]);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4619      	mov	r1, r3
 80017a4:	6838      	ldr	r0, [r7, #0]
 80017a6:	f7ff fec7 	bl	8001538 <movePaddleX>
	movePaddleY(p2,joystick_tilt[3]);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4619      	mov	r1, r3
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f7ff ff44 	bl	800163c <movePaddleY>
}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <MX_GPIO_Init+0x124>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a41      	ldr	r2, [pc, #260]	; (80018e0 <MX_GPIO_Init+0x124>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <MX_GPIO_Init+0x124>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <MX_GPIO_Init+0x124>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a3a      	ldr	r2, [pc, #232]	; (80018e0 <MX_GPIO_Init+0x124>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <MX_GPIO_Init+0x124>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <MX_GPIO_Init+0x124>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a2c      	ldr	r2, [pc, #176]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001848:	4826      	ldr	r0, [pc, #152]	; (80018e4 <MX_GPIO_Init+0x128>)
 800184a:	f002 faaf 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 7121 	mov.w	r1, #644	; 0x284
 8001854:	4824      	ldr	r0, [pc, #144]	; (80018e8 <MX_GPIO_Init+0x12c>)
 8001856:	f002 faa9 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001860:	4822      	ldr	r0, [pc, #136]	; (80018ec <MX_GPIO_Init+0x130>)
 8001862:	f002 faa3 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4819      	ldr	r0, [pc, #100]	; (80018e4 <MX_GPIO_Init+0x128>)
 8001880:	f002 f8f8 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001884:	2302      	movs	r3, #2
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188c:	2301      	movs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <MX_GPIO_Init+0x12c>)
 8001898:	f002 f8ec 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin|LCD_RES_Pin;
 800189c:	f44f 7321 	mov.w	r3, #644	; 0x284
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_GPIO_Init+0x12c>)
 80018b6:	f002 f8dd 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80018ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_GPIO_Init+0x130>)
 80018d4:	f002 f8ce 	bl	8003a74 <HAL_GPIO_Init>

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020000 	.word	0x40020000

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f4:	f001 fb68 	bl	8002fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f000 f85c 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fc:	f7ff ff5e 	bl	80017bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001900:	f000 f950 	bl	8001ba4 <MX_SPI1_Init>
  MX_TIM10_Init();
 8001904:	f000 fdc8 	bl	8002498 <MX_TIM10_Init>
  MX_SPI2_Init();
 8001908:	f000 f982 	bl	8001c10 <MX_SPI2_Init>
  MX_FATFS_Init();
 800190c:	f003 fd64 	bl	80053d8 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001910:	f7ff fab2 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001914:	f000 fde4 	bl	80024e0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8001918:	f000 fb18 	bl	8001f4c <ST7735_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 800191c:	481e      	ldr	r0, [pc, #120]	; (8001998 <main+0xa8>)
 800191e:	f003 fb05 	bl	8004f2c <HAL_TIM_Base_Start_IT>
  restartGame(&b, &p1, &p2);
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <main+0xac>)
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <main+0xb0>)
 8001926:	481f      	ldr	r0, [pc, #124]	; (80019a4 <main+0xb4>)
 8001928:	f7ff fd47 	bl	80013ba <restartGame>
  HAL_Delay(500);
 800192c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001930:	f001 fbbc 	bl	80030ac <HAL_Delay>


  sd_err = SD_Init();
 8001934:	f000 f8da 	bl	8001aec <SD_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <main+0xb8>)
 800193c:	6013      	str	r3, [r2, #0]
  sd_err = SD_saveScore(3721);
 800193e:	f640 6089 	movw	r0, #3721	; 0xe89
 8001942:	f000 f8f3 	bl	8001b2c <SD_saveScore>
 8001946:	4603      	mov	r3, r0
 8001948:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <main+0xb8>)
 800194a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if((b.y>160 || b.y<0) && flaga==0){
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <main+0xb4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2ba0      	cmp	r3, #160	; 0xa0
 8001952:	dc03      	bgt.n	800195c <main+0x6c>
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <main+0xb4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da09      	bge.n	8001970 <main+0x80>
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <main+0xbc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <main+0x80>
		gameOver(&b);
 8001964:	480f      	ldr	r0, [pc, #60]	; (80019a4 <main+0xb4>)
 8001966:	f7ff fd85 	bl	8001474 <gameOver>
		flaga=1;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <main+0xbc>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
	 }

	 if(flaga==1 && HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET){
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <main+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d1e9      	bne.n	800194c <main+0x5c>
 8001978:	2102      	movs	r1, #2
 800197a:	480d      	ldr	r0, [pc, #52]	; (80019b0 <main+0xc0>)
 800197c:	f002 f9fe 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1e2      	bne.n	800194c <main+0x5c>
		restartGame(&b, &p1, &p2);
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <main+0xac>)
 8001988:	4905      	ldr	r1, [pc, #20]	; (80019a0 <main+0xb0>)
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <main+0xb4>)
 800198c:	f7ff fd15 	bl	80013ba <restartGame>
		flaga=0;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <main+0xbc>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	 if((b.y>160 || b.y<0) && flaga==0){
 8001996:	e7d9      	b.n	800194c <main+0x5c>
 8001998:	200006a0 	.word	0x200006a0
 800199c:	2000010c 	.word	0x2000010c
 80019a0:	200000fc 	.word	0x200000fc
 80019a4:	20000120 	.word	0x20000120
 80019a8:	200000f4 	.word	0x200000f4
 80019ac:	200000f8 	.word	0x200000f8
 80019b0:	40020400 	.word	0x40020400

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	2230      	movs	r2, #48	; 0x30
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f005 ff88 	bl	80078d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <SystemClock_Config+0xcc>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <SystemClock_Config+0xcc>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <SystemClock_Config+0xcc>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <SystemClock_Config+0xd0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <SystemClock_Config+0xd0>)
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <SystemClock_Config+0xd0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a14:	2301      	movs	r3, #1
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a28:	2319      	movs	r3, #25
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a2c:	23a8      	movs	r3, #168	; 0xa8
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 f9cf 	bl	8003de0 <HAL_RCC_OscConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a48:	f000 f84a 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a50:	2302      	movs	r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	2102      	movs	r1, #2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fc31 	bl	80042d0 <HAL_RCC_ClockConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a74:	f000 f834 	bl	8001ae0 <Error_Handler>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3750      	adds	r7, #80	; 0x50
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM11 && flaga==0){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d107      	bne.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x22>
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x22>
		movePlayersPaddles(&p1, &p2);
 8001aa2:	490b      	ldr	r1, [pc, #44]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001aa6:	f7ff fe67 	bl	8001778 <movePlayersPaddles>
	}

	if(htim->Instance== TIM10){
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d104      	bne.n	8001abe <HAL_TIM_PeriodElapsedCallback+0x36>
		doGameTick(&b, &p1, &p2);
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ab6:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001aba:	f7ff fb0f 	bl	80010dc <doGameTick>
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40014800 	.word	0x40014800
 8001acc:	200000f8 	.word	0x200000f8
 8001ad0:	2000010c 	.word	0x2000010c
 8001ad4:	200000fc 	.word	0x200000fc
 8001ad8:	40014400 	.word	0x40014400
 8001adc:	20000120 	.word	0x20000120

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <SD_Init>:

FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

int SD_Init(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
	int err = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
	fres = f_mount(&FatFs, "", 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	4909      	ldr	r1, [pc, #36]	; (8001b20 <SD_Init+0x34>)
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <SD_Init+0x38>)
 8001afc:	f005 fa1a 	bl	8006f34 <f_mount>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SD_Init+0x3c>)
 8001b06:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) err = 1;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <SD_Init+0x3c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SD_Init+0x28>
 8001b10:	2301      	movs	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
	return err;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08008d5c 	.word	0x08008d5c
 8001b24:	20000140 	.word	0x20000140
 8001b28:	200005a0 	.word	0x200005a0

08001b2c <SD_saveScore>:

int SD_saveScore(int score){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	int err = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
	char c_score[4];

	fres = f_open(&fil, "score.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001b38:	221a      	movs	r2, #26
 8001b3a:	4917      	ldr	r1, [pc, #92]	; (8001b98 <SD_saveScore+0x6c>)
 8001b3c:	4817      	ldr	r0, [pc, #92]	; (8001b9c <SD_saveScore+0x70>)
 8001b3e:	f005 fa3f 	bl	8006fc0 <f_open>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <SD_saveScore+0x74>)
 8001b48:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) err = 1;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <SD_saveScore+0x74>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SD_saveScore+0x2a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]

	itoa(score, c_score, 10);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 fea8 	bl	80078b4 <itoa>

	UINT bytesWrote;
    fres = f_write(&fil, c_score, 4, &bytesWrote);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	f107 0110 	add.w	r1, r7, #16
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <SD_saveScore+0x70>)
 8001b70:	f005 fbe4 	bl	800733c <f_write>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <SD_saveScore+0x74>)
 8001b7a:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK) err = 2;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <SD_saveScore+0x74>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SD_saveScore+0x5c>
 8001b84:	2302      	movs	r3, #2
 8001b86:	617b      	str	r3, [r7, #20]

    f_close(&fil);
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <SD_saveScore+0x70>)
 8001b8a:	f005 fdca 	bl	8007722 <f_close>
    //f_mount(NULL, "", 0);
    return err;
 8001b8e:	697b      	ldr	r3, [r7, #20]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	08008d60 	.word	0x08008d60
 8001b9c:	20000370 	.word	0x20000370
 8001ba0:	200005a0 	.word	0x200005a0

08001ba4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <MX_SPI1_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bf6:	f002 fd17 	bl	8004628 <HAL_SPI_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c00:	f7ff ff6e 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200005a4 	.word	0x200005a4
 8001c0c:	40013000 	.word	0x40013000

08001c10 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <MX_SPI2_Init+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c5c:	220a      	movs	r2, #10
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_SPI2_Init+0x64>)
 8001c62:	f002 fce1 	bl	8004628 <HAL_SPI_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f7ff ff38 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200005fc 	.word	0x200005fc
 8001c78:	40003800 	.word	0x40003800

08001c7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <HAL_SPI_MspInit+0xe8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12c      	bne.n	8001cf8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a30      	ldr	r2, [pc, #192]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8001cd6:	23e0      	movs	r3, #224	; 0xe0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481e      	ldr	r0, [pc, #120]	; (8001d6c <HAL_SPI_MspInit+0xf0>)
 8001cf2:	f001 febf 	bl	8003a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cf6:	e031      	b.n	8001d5c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_SPI_MspInit+0xf4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12c      	bne.n	8001d5c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_SPI_MspInit+0xec>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001d3a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <HAL_SPI_MspInit+0xf8>)
 8001d58:	f001 fe8c 	bl	8003a74 <HAL_GPIO_Init>
}
 8001d5c:	bf00      	nop
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013000 	.word	0x40013000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40003800 	.word	0x40003800
 8001d74:	40020400 	.word	0x40020400

08001d78 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <ST7735_Select+0x14>)
 8001d82:	f002 f813 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40020400 	.word	0x40020400

08001d90 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <ST7735_Unselect+0x14>)
 8001d9a:	f002 f807 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020400 	.word	0x40020400

08001da8 <ST7735_Reset>:

static void ST7735_Reset() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <ST7735_Reset+0x28>)
 8001db4:	f001 fffa 	bl	8003dac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001db8:	2005      	movs	r0, #5
 8001dba:	f001 f977 	bl	80030ac <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <ST7735_Reset+0x28>)
 8001dc6:	f001 fff1 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de4:	4806      	ldr	r0, [pc, #24]	; (8001e00 <ST7735_WriteCommand+0x2c>)
 8001de6:	f001 ffe1 	bl	8003dac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001dea:	1df9      	adds	r1, r7, #7
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	2201      	movs	r2, #1
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <ST7735_WriteCommand+0x30>)
 8001df4:	f002 fca1 	bl	800473a <HAL_SPI_Transmit>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40020000 	.word	0x40020000
 8001e04:	200005a4 	.word	0x200005a4

08001e08 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <ST7735_WriteData+0x30>)
 8001e1a:	f001 ffc7 	bl	8003dac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <ST7735_WriteData+0x34>)
 8001e2a:	f002 fc86 	bl	800473a <HAL_SPI_Transmit>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	200005a4 	.word	0x200005a4

08001e40 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001e52:	e034      	b.n	8001ebe <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ffb7 	bl	8001dd4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001e70:	7abb      	ldrb	r3, [r7, #10]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001e7a:	7abb      	ldrb	r3, [r7, #10]
 8001e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e80:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001e82:	7abb      	ldrb	r3, [r7, #10]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001e88:	7abb      	ldrb	r3, [r7, #10]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffbb 	bl	8001e08 <ST7735_WriteData>
            addr += numArgs;
 8001e92:	7abb      	ldrb	r3, [r7, #10]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001e9a:	89bb      	ldrh	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001eaa:	89bb      	ldrh	r3, [r7, #12]
 8001eac:	2bff      	cmp	r3, #255	; 0xff
 8001eae:	d102      	bne.n	8001eb6 <ST7735_ExecuteCommandList+0x76>
 8001eb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eb4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001eb6:	89bb      	ldrh	r3, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 f8f7 	bl	80030ac <HAL_Delay>
    while(numCommands--) {
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	73fa      	strb	r2, [r7, #15]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1c5      	bne.n	8001e54 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001ed2:	b590      	push	{r4, r7, lr}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4604      	mov	r4, r0
 8001eda:	4608      	mov	r0, r1
 8001edc:	4611      	mov	r1, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71bb      	strb	r3, [r7, #6]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	717b      	strb	r3, [r7, #5]
 8001eec:	4613      	mov	r3, r2
 8001eee:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001ef0:	202a      	movs	r0, #42	; 0x2a
 8001ef2:	f7ff ff6f 	bl	8001dd4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	733b      	strb	r3, [r7, #12]
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	3302      	adds	r3, #2
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	737b      	strb	r3, [r7, #13]
 8001f02:	2300      	movs	r3, #0
 8001f04:	73bb      	strb	r3, [r7, #14]
 8001f06:	797b      	ldrb	r3, [r7, #5]
 8001f08:	3302      	adds	r3, #2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	2104      	movs	r1, #4
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff77 	bl	8001e08 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001f1a:	202b      	movs	r0, #43	; 0x2b
 8001f1c:	f7ff ff5a 	bl	8001dd4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001f28:	793b      	ldrb	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2104      	movs	r1, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff66 	bl	8001e08 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001f3c:	202c      	movs	r0, #44	; 0x2c
 8001f3e:	f7ff ff49 	bl	8001dd4 <ST7735_WriteCommand>
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
	...

08001f4c <ST7735_Init>:

void ST7735_Init() {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001f50:	f7ff ff12 	bl	8001d78 <ST7735_Select>
    ST7735_Reset();
 8001f54:	f7ff ff28 	bl	8001da8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <ST7735_Init+0x28>)
 8001f5a:	f7ff ff71 	bl	8001e40 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001f5e:	4806      	ldr	r0, [pc, #24]	; (8001f78 <ST7735_Init+0x2c>)
 8001f60:	f7ff ff6e 	bl	8001e40 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <ST7735_Init+0x30>)
 8001f66:	f7ff ff6b 	bl	8001e40 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001f6a:	f7ff ff11 	bl	8001d90 <ST7735_Unselect>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	08009b0c 	.word	0x08009b0c
 8001f78:	08009b48 	.word	0x08009b48
 8001f7c:	08009b58 	.word	0x08009b58

08001f80 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001f80:	b082      	sub	sp, #8
 8001f82:	b590      	push	{r4, r7, lr}
 8001f84:	b089      	sub	sp, #36	; 0x24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	80bb      	strh	r3, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	b2d9      	uxtb	r1, r3
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b2dc      	uxtb	r4, r3
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	f7ff ff87 	bl	8001ed2 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e043      	b.n	8002052 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	3b20      	subs	r3, #32
 8001fd0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	440b      	add	r3, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	e029      	b.n	8002040 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ffc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b29b      	uxth	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	743b      	strb	r3, [r7, #16]
 8002006:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002008:	b2db      	uxtb	r3, r3
 800200a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	2102      	movs	r1, #2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fef8 	bl	8001e08 <ST7735_WriteData>
 8002018:	e00f      	b.n	800203a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800201a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b29b      	uxth	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800202a:	b2db      	uxtb	r3, r3
 800202c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2102      	movs	r1, #2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fee7 	bl	8001e08 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3301      	adds	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002044:	461a      	mov	r2, r3
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4293      	cmp	r3, r2
 800204a:	d3cf      	bcc.n	8001fec <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002056:	461a      	mov	r2, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4293      	cmp	r3, r2
 800205c:	d3b5      	bcc.n	8001fca <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	3724      	adds	r7, #36	; 0x24
 8002064:	46bd      	mov	sp, r7
 8002066:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800206a:	b002      	add	sp, #8
 800206c:	4770      	bx	lr

0800206e <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800206e:	b082      	sub	sp, #8
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af04      	add	r7, sp, #16
 8002076:	603a      	str	r2, [r7, #0]
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
 800207e:	460b      	mov	r3, r1
 8002080:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002082:	f7ff fe79 	bl	8001d78 <ST7735_Select>

    while(*str) {
 8002086:	e02d      	b.n	80020e4 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	7d3a      	ldrb	r2, [r7, #20]
 800208c:	4413      	add	r3, r2
 800208e:	2b7f      	cmp	r3, #127	; 0x7f
 8002090:	dd13      	ble.n	80020ba <ST7735_WriteString+0x4c>
            x = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002096:	7d7b      	ldrb	r3, [r7, #21]
 8002098:	b29a      	uxth	r2, r3
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	7d7a      	ldrb	r2, [r7, #21]
 80020a4:	4413      	add	r3, r2
 80020a6:	2b9f      	cmp	r3, #159	; 0x9f
 80020a8:	dc21      	bgt.n	80020ee <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d103      	bne.n	80020ba <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	603b      	str	r3, [r7, #0]
                continue;
 80020b8:	e014      	b.n	80020e4 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	88b9      	ldrh	r1, [r7, #4]
 80020c0:	88f8      	ldrh	r0, [r7, #6]
 80020c2:	8c3b      	ldrh	r3, [r7, #32]
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	8bbb      	ldrh	r3, [r7, #28]
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f7ff ff56 	bl	8001f80 <ST7735_WriteChar>
        x += font.width;
 80020d4:	7d3b      	ldrb	r3, [r7, #20]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	4413      	add	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
        str++;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1cd      	bne.n	8002088 <ST7735_WriteString+0x1a>
 80020ec:	e000      	b.n	80020f0 <ST7735_WriteString+0x82>
                break;
 80020ee:	bf00      	nop
    }

    ST7735_Unselect();
 80020f0:	f7ff fe4e 	bl	8001d90 <ST7735_Unselect>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020fe:	b002      	add	sp, #8
 8002100:	4770      	bx	lr
	...

08002104 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	80fb      	strh	r3, [r7, #6]
 8002116:	4603      	mov	r3, r0
 8002118:	80bb      	strh	r3, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	807b      	strh	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b7f      	cmp	r3, #127	; 0x7f
 8002126:	d858      	bhi.n	80021da <ST7735_FillRectangle+0xd6>
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	2b9f      	cmp	r3, #159	; 0x9f
 800212c:	d855      	bhi.n	80021da <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800212e:	88fa      	ldrh	r2, [r7, #6]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4413      	add	r3, r2
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	dd03      	ble.n	8002140 <ST7735_FillRectangle+0x3c>
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800213e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002140:	88ba      	ldrh	r2, [r7, #4]
 8002142:	883b      	ldrh	r3, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	2ba0      	cmp	r3, #160	; 0xa0
 8002148:	dd03      	ble.n	8002152 <ST7735_FillRectangle+0x4e>
 800214a:	88bb      	ldrh	r3, [r7, #4]
 800214c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002150:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002152:	f7ff fe11 	bl	8001d78 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	b2d8      	uxtb	r0, r3
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	b2d9      	uxtb	r1, r3
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4413      	add	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b2dc      	uxtb	r4, r3
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	883b      	ldrh	r3, [r7, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4413      	add	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4622      	mov	r2, r4
 8002180:	f7ff fea7 	bl	8001ed2 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002184:	8c3b      	ldrh	r3, [r7, #32]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	733b      	strb	r3, [r7, #12]
 800218e:	8c3b      	ldrh	r3, [r7, #32]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219a:	4812      	ldr	r0, [pc, #72]	; (80021e4 <ST7735_FillRectangle+0xe0>)
 800219c:	f001 fe06 	bl	8003dac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80021a0:	883b      	ldrh	r3, [r7, #0]
 80021a2:	80bb      	strh	r3, [r7, #4]
 80021a4:	e013      	b.n	80021ce <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	80fb      	strh	r3, [r7, #6]
 80021aa:	e00a      	b.n	80021c2 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80021ac:	f107 010c 	add.w	r1, r7, #12
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	2202      	movs	r2, #2
 80021b6:	480c      	ldr	r0, [pc, #48]	; (80021e8 <ST7735_FillRectangle+0xe4>)
 80021b8:	f002 fabf 	bl	800473a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	3b01      	subs	r3, #1
 80021c0:	80fb      	strh	r3, [r7, #6]
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f1      	bne.n	80021ac <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80021c8:	88bb      	ldrh	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	80bb      	strh	r3, [r7, #4]
 80021ce:	88bb      	ldrh	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e8      	bne.n	80021a6 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80021d4:	f7ff fddc 	bl	8001d90 <ST7735_Unselect>
 80021d8:	e000      	b.n	80021dc <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80021da:	bf00      	nop
}
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40020000 	.word	0x40020000
 80021e8:	200005a4 	.word	0x200005a4

080021ec <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	4603      	mov	r3, r0
 8002200:	80bb      	strh	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b7f      	cmp	r3, #127	; 0x7f
 800220e:	d86a      	bhi.n	80022e6 <ST7735_FillRectangleFast+0xfa>
 8002210:	88bb      	ldrh	r3, [r7, #4]
 8002212:	2b9f      	cmp	r3, #159	; 0x9f
 8002214:	d867      	bhi.n	80022e6 <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	4413      	add	r3, r2
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	dd03      	ble.n	8002228 <ST7735_FillRectangleFast+0x3c>
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002226:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002228:	88ba      	ldrh	r2, [r7, #4]
 800222a:	883b      	ldrh	r3, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	2ba0      	cmp	r3, #160	; 0xa0
 8002230:	dd03      	ble.n	800223a <ST7735_FillRectangleFast+0x4e>
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002238:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800223a:	f7ff fd9d 	bl	8001d78 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2d8      	uxtb	r0, r3
 8002242:	88bb      	ldrh	r3, [r7, #4]
 8002244:	b2d9      	uxtb	r1, r3
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b2dc      	uxtb	r4, r3
 8002256:	88bb      	ldrh	r3, [r7, #4]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	883b      	ldrh	r3, [r7, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4413      	add	r3, r2
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4622      	mov	r2, r4
 8002268:	f7ff fe33 	bl	8001ed2 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800226c:	8c3b      	ldrh	r3, [r7, #32]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	723b      	strb	r3, [r7, #8]
 8002276:	8c3b      	ldrh	r3, [r7, #32]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f005 fb19 	bl	80078b8 <malloc>
 8002286:	4603      	mov	r3, r0
 8002288:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800228a:	2300      	movs	r3, #0
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	e008      	b.n	80022a2 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	893a      	ldrh	r2, [r7, #8]
 800229a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	3301      	adds	r3, #1
 80022a0:	80fb      	strh	r3, [r7, #6]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3f2      	bcc.n	8002290 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b0:	480f      	ldr	r0, [pc, #60]	; (80022f0 <ST7735_FillRectangleFast+0x104>)
 80022b2:	f001 fd7b 	bl	8003dac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80022b6:	883b      	ldrh	r3, [r7, #0]
 80022b8:	80bb      	strh	r3, [r7, #4]
 80022ba:	e00b      	b.n	80022d4 <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <ST7735_FillRectangleFast+0x108>)
 80022ca:	f002 fa36 	bl	800473a <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	80bb      	strh	r3, [r7, #4]
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <ST7735_FillRectangleFast+0xd0>

    free(line);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f005 faf4 	bl	80078c8 <free>
    ST7735_Unselect();
 80022e0:	f7ff fd56 	bl	8001d90 <ST7735_Unselect>
 80022e4:	e000      	b.n	80022e8 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80022e6:	bf00      	nop
}
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40020000 	.word	0x40020000
 80022f4:	200005a4 	.word	0x200005a4

080022f8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	23a0      	movs	r3, #160	; 0xa0
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	2100      	movs	r1, #0
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fef9 	bl	8002104 <ST7735_FillRectangle>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af02      	add	r7, sp, #8
 8002320:	4603      	mov	r3, r0
 8002322:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	23a0      	movs	r3, #160	; 0xa0
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	2100      	movs	r1, #0
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff5c 	bl	80021ec <ST7735_FillRectangleFast>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_MspInit+0x4c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a0f      	ldr	r2, [pc, #60]	; (8002388 <HAL_MspInit+0x4c>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_MspInit+0x4c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_MspInit+0x4c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <HAL_MspInit+0x4c>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_MspInit+0x4c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d8:	f000 fe48 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023e6:	f002 fe32 	bl	800504e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000658 	.word	0x20000658

080023f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80023fa:	f002 fe28 	bl	800504e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200006a0 	.word	0x200006a0

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f005 f9fa 	bl	8007830 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20010000 	.word	0x20010000
 8002468:	00000400 	.word	0x00000400
 800246c:	20000654 	.word	0x20000654
 8002470:	20000748 	.word	0x20000748

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_TIM10_Init+0x40>)
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <MX_TIM10_Init+0x44>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 5000-1;
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <MX_TIM10_Init+0x40>)
 80024a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80024a8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <MX_TIM10_Init+0x40>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_TIM10_Init+0x40>)
 80024b2:	22c7      	movs	r2, #199	; 0xc7
 80024b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <MX_TIM10_Init+0x40>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_TIM10_Init+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_TIM10_Init+0x40>)
 80024c4:	f002 fce2 	bl	8004e8c <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80024ce:	f7ff fb07 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000658 	.word	0x20000658
 80024dc:	40014400 	.word	0x40014400

080024e0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_TIM11_Init+0x40>)
 80024e6:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <MX_TIM11_Init+0x44>)
 80024e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <MX_TIM11_Init+0x40>)
 80024ec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80024f0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <MX_TIM11_Init+0x40>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_TIM11_Init+0x40>)
 80024fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024fe:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_TIM11_Init+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_TIM11_Init+0x40>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_TIM11_Init+0x40>)
 800250e:	f002 fcbd 	bl	8004e8c <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002518:	f7ff fae2 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200006a0 	.word	0x200006a0
 8002524:	40014800 	.word	0x40014800

08002528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <HAL_TIM_Base_MspInit+0x80>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d116      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_TIM_Base_MspInit+0x84>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <HAL_TIM_Base_MspInit+0x84>)
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_TIM_Base_MspInit+0x84>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2019      	movs	r0, #25
 800255c:	f001 fa53 	bl	8003a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002560:	2019      	movs	r0, #25
 8002562:	f001 fa6c 	bl	8003a3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002566:	e01a      	b.n	800259e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <HAL_TIM_Base_MspInit+0x88>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d115      	bne.n	800259e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_TIM_Base_MspInit+0x84>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <HAL_TIM_Base_MspInit+0x84>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_TIM_Base_MspInit+0x84>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	201a      	movs	r0, #26
 8002594:	f001 fa37 	bl	8003a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002598:	201a      	movs	r0, #26
 800259a:	f001 fa50 	bl	8003a3e <HAL_NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40014800 	.word	0x40014800

080025b4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80025bc:	f000 fd6a 	bl	8003094 <HAL_GetTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <SPI_Timer_On+0x20>)
 80025c4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <SPI_Timer_On+0x24>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200006ec 	.word	0x200006ec
 80025d8:	200006f0 	.word	0x200006f0

080025dc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80025e0:	f000 fd58 	bl	8003094 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <SPI_Timer_Status+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1ad2      	subs	r2, r2, r3
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SPI_Timer_Status+0x28>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	bf34      	ite	cc
 80025f4:	2301      	movcc	r3, #1
 80025f6:	2300      	movcs	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200006ec 	.word	0x200006ec
 8002604:	200006f0 	.word	0x200006f0

08002608 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af02      	add	r7, sp, #8
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002612:	f107 020f 	add.w	r2, r7, #15
 8002616:	1df9      	adds	r1, r7, #7
 8002618:	2332      	movs	r3, #50	; 0x32
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	4804      	ldr	r0, [pc, #16]	; (8002630 <xchg_spi+0x28>)
 8002620:	f002 f9c7 	bl	80049b2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200005fc 	.word	0x200005fc

08002634 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e00a      	b.n	800265a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	18d4      	adds	r4, r2, r3
 800264a:	20ff      	movs	r0, #255	; 0xff
 800264c:	f7ff ffdc 	bl	8002608 <xchg_spi>
 8002650:	4603      	mov	r3, r0
 8002652:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3f0      	bcc.n	8002644 <rcvr_spi_multi+0x10>
	}
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}

0800266c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e009      	b.n	8002690 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ffbf 	bl	8002608 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d3f1      	bcc.n	800267c <xmit_spi_multi+0x10>
	}
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80026aa:	f000 fcf3 	bl	8003094 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80026b4:	20ff      	movs	r0, #255	; 0xff
 80026b6:	f7ff ffa7 	bl	8002608 <xchg_spi>
 80026ba:	4603      	mov	r3, r0
 80026bc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2bff      	cmp	r3, #255	; 0xff
 80026c2:	d007      	beq.n	80026d4 <wait_ready+0x32>
 80026c4:	f000 fce6 	bl	8003094 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8ef      	bhi.n	80026b4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2bff      	cmp	r3, #255	; 0xff
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80026ec:	2201      	movs	r2, #1
 80026ee:	2104      	movs	r1, #4
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <despiselect+0x18>)
 80026f2:	f001 fb5b 	bl	8003dac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80026f6:	20ff      	movs	r0, #255	; 0xff
 80026f8:	f7ff ff86 	bl	8002608 <xchg_spi>

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020400 	.word	0x40020400

08002704 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002708:	2200      	movs	r2, #0
 800270a:	2104      	movs	r1, #4
 800270c:	4809      	ldr	r0, [pc, #36]	; (8002734 <spiselect+0x30>)
 800270e:	f001 fb4d 	bl	8003dac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002712:	20ff      	movs	r0, #255	; 0xff
 8002714:	f7ff ff78 	bl	8002608 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800271c:	f7ff ffc1 	bl	80026a2 <wait_ready>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <spiselect+0x26>
 8002726:	2301      	movs	r3, #1
 8002728:	e002      	b.n	8002730 <spiselect+0x2c>

	despiselect();
 800272a:	f7ff ffdd 	bl	80026e8 <despiselect>
	return 0;	/* Timeout */
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40020400 	.word	0x40020400

08002738 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002742:	20c8      	movs	r0, #200	; 0xc8
 8002744:	f7ff ff36 	bl	80025b4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002748:	20ff      	movs	r0, #255	; 0xff
 800274a:	f7ff ff5d 	bl	8002608 <xchg_spi>
 800274e:	4603      	mov	r3, r0
 8002750:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2bff      	cmp	r3, #255	; 0xff
 8002756:	d104      	bne.n	8002762 <rcvr_datablock+0x2a>
 8002758:	f7ff ff40 	bl	80025dc <SPI_Timer_Status>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f2      	bne.n	8002748 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2bfe      	cmp	r3, #254	; 0xfe
 8002766:	d001      	beq.n	800276c <rcvr_datablock+0x34>
 8002768:	2300      	movs	r3, #0
 800276a:	e00a      	b.n	8002782 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff60 	bl	8002634 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002774:	20ff      	movs	r0, #255	; 0xff
 8002776:	f7ff ff47 	bl	8002608 <xchg_spi>
 800277a:	20ff      	movs	r0, #255	; 0xff
 800277c:	f7ff ff44 	bl	8002608 <xchg_spi>

	return 1;						/* Function succeeded */
 8002780:	2301      	movs	r3, #1
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800279a:	f7ff ff82 	bl	80026a2 <wait_ready>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <xmit_datablock+0x1e>
 80027a4:	2300      	movs	r3, #0
 80027a6:	e01e      	b.n	80027e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff2c 	bl	8002608 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	2bfd      	cmp	r3, #253	; 0xfd
 80027b4:	d016      	beq.n	80027e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80027b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ff56 	bl	800266c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80027c0:	20ff      	movs	r0, #255	; 0xff
 80027c2:	f7ff ff21 	bl	8002608 <xchg_spi>
 80027c6:	20ff      	movs	r0, #255	; 0xff
 80027c8:	f7ff ff1e 	bl	8002608 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80027cc:	20ff      	movs	r0, #255	; 0xff
 80027ce:	f7ff ff1b 	bl	8002608 <xchg_spi>
 80027d2:	4603      	mov	r3, r0
 80027d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d001      	beq.n	80027e4 <xmit_datablock+0x5a>
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <xmit_datablock+0x5c>
	}
	return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	6039      	str	r1, [r7, #0]
 80027f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da0e      	bge.n	8002820 <send_cmd+0x32>
		cmd &= 0x7F;
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002808:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800280a:	2100      	movs	r1, #0
 800280c:	2037      	movs	r0, #55	; 0x37
 800280e:	f7ff ffee 	bl	80027ee <send_cmd>
 8002812:	4603      	mov	r3, r0
 8002814:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002816:	7bbb      	ldrb	r3, [r7, #14]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d901      	bls.n	8002820 <send_cmd+0x32>
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	e051      	b.n	80028c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d008      	beq.n	8002838 <send_cmd+0x4a>
		despiselect();
 8002826:	f7ff ff5f 	bl	80026e8 <despiselect>
		if (!spiselect()) return 0xFF;
 800282a:	f7ff ff6b 	bl	8002704 <spiselect>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <send_cmd+0x4a>
 8002834:	23ff      	movs	r3, #255	; 0xff
 8002836:	e045      	b.n	80028c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fee1 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fedb 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fed5 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fecf 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff feca 	bl	8002608 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <send_cmd+0x94>
 800287e:	2395      	movs	r3, #149	; 0x95
 8002880:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d101      	bne.n	800288c <send_cmd+0x9e>
 8002888:	2387      	movs	r3, #135	; 0x87
 800288a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff feba 	bl	8002608 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d102      	bne.n	80028a0 <send_cmd+0xb2>
 800289a:	20ff      	movs	r0, #255	; 0xff
 800289c:	f7ff feb4 	bl	8002608 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80028a0:	230a      	movs	r3, #10
 80028a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80028a4:	20ff      	movs	r0, #255	; 0xff
 80028a6:	f7ff feaf 	bl	8002608 <xchg_spi>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80028ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da05      	bge.n	80028c2 <send_cmd+0xd4>
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <USER_SPI_initialize+0x14>
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d6      	b.n	8002a8e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80028e0:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <USER_SPI_initialize+0x1cc>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <USER_SPI_initialize+0x2a>
 80028ee:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <USER_SPI_initialize+0x1cc>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e0cb      	b.n	8002a8e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80028f6:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <USER_SPI_initialize+0x1d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002900:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <USER_SPI_initialize+0x1d0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002908:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800290a:	230a      	movs	r3, #10
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e005      	b.n	800291c <USER_SPI_initialize+0x50>
 8002910:	20ff      	movs	r0, #255	; 0xff
 8002912:	f7ff fe79 	bl	8002608 <xchg_spi>
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	3b01      	subs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f6      	bne.n	8002910 <USER_SPI_initialize+0x44>

	ty = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002926:	2100      	movs	r1, #0
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff ff60 	bl	80027ee <send_cmd>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	f040 808b 	bne.w	8002a4c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293a:	f7ff fe3b 	bl	80025b4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800293e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002942:	2008      	movs	r0, #8
 8002944:	f7ff ff53 	bl	80027ee <send_cmd>
 8002948:	4603      	mov	r3, r0
 800294a:	2b01      	cmp	r3, #1
 800294c:	d151      	bne.n	80029f2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e00d      	b.n	8002970 <USER_SPI_initialize+0xa4>
 8002954:	7bfc      	ldrb	r4, [r7, #15]
 8002956:	20ff      	movs	r0, #255	; 0xff
 8002958:	f7ff fe56 	bl	8002608 <xchg_spi>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	f104 0310 	add.w	r3, r4, #16
 8002964:	443b      	add	r3, r7
 8002966:	f803 2c08 	strb.w	r2, [r3, #-8]
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	3301      	adds	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d9ee      	bls.n	8002954 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002976:	7abb      	ldrb	r3, [r7, #10]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d167      	bne.n	8002a4c <USER_SPI_initialize+0x180>
 800297c:	7afb      	ldrb	r3, [r7, #11]
 800297e:	2baa      	cmp	r3, #170	; 0xaa
 8002980:	d164      	bne.n	8002a4c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002982:	bf00      	nop
 8002984:	f7ff fe2a 	bl	80025dc <SPI_Timer_Status>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <USER_SPI_initialize+0xd2>
 800298e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002992:	20a9      	movs	r0, #169	; 0xa9
 8002994:	f7ff ff2b 	bl	80027ee <send_cmd>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f2      	bne.n	8002984 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800299e:	f7ff fe1d 	bl	80025dc <SPI_Timer_Status>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d051      	beq.n	8002a4c <USER_SPI_initialize+0x180>
 80029a8:	2100      	movs	r1, #0
 80029aa:	203a      	movs	r0, #58	; 0x3a
 80029ac:	f7ff ff1f 	bl	80027ee <send_cmd>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d14a      	bne.n	8002a4c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e00d      	b.n	80029d8 <USER_SPI_initialize+0x10c>
 80029bc:	7bfc      	ldrb	r4, [r7, #15]
 80029be:	20ff      	movs	r0, #255	; 0xff
 80029c0:	f7ff fe22 	bl	8002608 <xchg_spi>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	f104 0310 	add.w	r3, r4, #16
 80029cc:	443b      	add	r3, r7
 80029ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d9ee      	bls.n	80029bc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80029de:	7a3b      	ldrb	r3, [r7, #8]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <USER_SPI_initialize+0x120>
 80029e8:	230c      	movs	r3, #12
 80029ea:	e000      	b.n	80029ee <USER_SPI_initialize+0x122>
 80029ec:	2304      	movs	r3, #4
 80029ee:	737b      	strb	r3, [r7, #13]
 80029f0:	e02c      	b.n	8002a4c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80029f2:	2100      	movs	r1, #0
 80029f4:	20a9      	movs	r0, #169	; 0xa9
 80029f6:	f7ff fefa 	bl	80027ee <send_cmd>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d804      	bhi.n	8002a0a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002a00:	2302      	movs	r3, #2
 8002a02:	737b      	strb	r3, [r7, #13]
 8002a04:	23a9      	movs	r3, #169	; 0xa9
 8002a06:	73bb      	strb	r3, [r7, #14]
 8002a08:	e003      	b.n	8002a12 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	737b      	strb	r3, [r7, #13]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002a12:	bf00      	nop
 8002a14:	f7ff fde2 	bl	80025dc <SPI_Timer_Status>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <USER_SPI_initialize+0x162>
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fee3 	bl	80027ee <send_cmd>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f2      	bne.n	8002a14 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002a2e:	f7ff fdd5 	bl	80025dc <SPI_Timer_Status>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <USER_SPI_initialize+0x17c>
 8002a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a3c:	2010      	movs	r0, #16
 8002a3e:	f7ff fed6 	bl	80027ee <send_cmd>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <USER_SPI_initialize+0x180>
				ty = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <USER_SPI_initialize+0x1d4>)
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002a52:	f7ff fe49 	bl	80026e8 <despiselect>

	if (ty) {			/* OK */
 8002a56:	7b7b      	ldrb	r3, [r7, #13]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <USER_SPI_initialize+0x1d0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <USER_SPI_initialize+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0210 	orr.w	r2, r2, #16
 8002a6e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <USER_SPI_initialize+0x1cc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <USER_SPI_initialize+0x1cc>)
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e002      	b.n	8002a88 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <USER_SPI_initialize+0x1cc>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <USER_SPI_initialize+0x1cc>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b2db      	uxtb	r3, r3
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	200005fc 	.word	0x200005fc
 8002aa0:	200006e8 	.word	0x200006e8

08002aa4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <USER_SPI_status+0x14>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e002      	b.n	8002abe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <USER_SPI_status+0x28>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000000c 	.word	0x2000000c

08002ad0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <USER_SPI_read+0x1c>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <USER_SPI_read+0x20>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e04d      	b.n	8002b8c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <USER_SPI_read+0xc4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <USER_SPI_read+0x32>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e044      	b.n	8002b8c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <USER_SPI_read+0xc8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <USER_SPI_read+0x44>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	025b      	lsls	r3, r3, #9
 8002b12:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d111      	bne.n	8002b3e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	2011      	movs	r0, #17
 8002b1e:	f7ff fe66 	bl	80027ee <send_cmd>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d129      	bne.n	8002b7c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b2c:	68b8      	ldr	r0, [r7, #8]
 8002b2e:	f7ff fe03 	bl	8002738 <rcvr_datablock>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d021      	beq.n	8002b7c <USER_SPI_read+0xac>
			count = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	e01e      	b.n	8002b7c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	2012      	movs	r0, #18
 8002b42:	f7ff fe54 	bl	80027ee <send_cmd>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d117      	bne.n	8002b7c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f7ff fdf1 	bl	8002738 <rcvr_datablock>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <USER_SPI_read+0xa2>
				buff += 512;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ed      	bne.n	8002b4c <USER_SPI_read+0x7c>
 8002b70:	e000      	b.n	8002b74 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002b72:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002b74:	2100      	movs	r1, #0
 8002b76:	200c      	movs	r0, #12
 8002b78:	f7ff fe39 	bl	80027ee <send_cmd>
		}
	}
	despiselect();
 8002b7c:	f7ff fdb4 	bl	80026e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000000c 	.word	0x2000000c
 8002b98:	200006e8 	.word	0x200006e8

08002b9c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <USER_SPI_write+0x1c>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <USER_SPI_write+0x20>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e063      	b.n	8002c84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <USER_SPI_write+0xf0>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <USER_SPI_write+0x32>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e05a      	b.n	8002c84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <USER_SPI_write+0xf0>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <USER_SPI_write+0x44>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e051      	b.n	8002c84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <USER_SPI_write+0xf4>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <USER_SPI_write+0x56>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d110      	bne.n	8002c1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	2018      	movs	r0, #24
 8002bfc:	f7ff fdf7 	bl	80027ee <send_cmd>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d136      	bne.n	8002c74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002c06:	21fe      	movs	r1, #254	; 0xfe
 8002c08:	68b8      	ldr	r0, [r7, #8]
 8002c0a:	f7ff fdbe 	bl	800278a <xmit_datablock>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02f      	beq.n	8002c74 <USER_SPI_write+0xd8>
			count = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	e02c      	b.n	8002c74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <USER_SPI_write+0xf4>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f003 0306 	and.w	r3, r3, #6
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <USER_SPI_write+0x92>
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	2097      	movs	r0, #151	; 0x97
 8002c2a:	f7ff fde0 	bl	80027ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	2019      	movs	r0, #25
 8002c32:	f7ff fddc 	bl	80027ee <send_cmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11b      	bne.n	8002c74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002c3c:	21fc      	movs	r1, #252	; 0xfc
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff fda3 	bl	800278a <xmit_datablock>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <USER_SPI_write+0xc4>
				buff += 512;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <USER_SPI_write+0xa0>
 8002c5e:	e000      	b.n	8002c62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002c60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002c62:	21fd      	movs	r1, #253	; 0xfd
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7ff fd90 	bl	800278a <xmit_datablock>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <USER_SPI_write+0xd8>
 8002c70:	2301      	movs	r3, #1
 8002c72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002c74:	f7ff fd38 	bl	80026e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	200006e8 	.word	0x200006e8

08002c94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	; 0x30
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	603a      	str	r2, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <USER_SPI_ioctl+0x1a>
 8002caa:	2304      	movs	r3, #4
 8002cac:	e15a      	b.n	8002f64 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002cae:	4baf      	ldr	r3, [pc, #700]	; (8002f6c <USER_SPI_ioctl+0x2d8>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <USER_SPI_ioctl+0x2c>
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e151      	b.n	8002f64 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	f200 8136 	bhi.w	8002f3a <USER_SPI_ioctl+0x2a6>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <USER_SPI_ioctl+0x40>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002ce9 	.word	0x08002ce9
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	08002f3b 	.word	0x08002f3b
 8002ce0:	08002da9 	.word	0x08002da9
 8002ce4:	08002e9f 	.word	0x08002e9f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002ce8:	f7ff fd0c 	bl	8002704 <spiselect>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8127 	beq.w	8002f42 <USER_SPI_ioctl+0x2ae>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002cfa:	e122      	b.n	8002f42 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2009      	movs	r0, #9
 8002d00:	f7ff fd75 	bl	80027ee <send_cmd>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 811d 	bne.w	8002f46 <USER_SPI_ioctl+0x2b2>
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	2110      	movs	r1, #16
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd10 	bl	8002738 <rcvr_datablock>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8113 	beq.w	8002f46 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002d20:	7b3b      	ldrb	r3, [r7, #12]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d111      	bne.n	8002d4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002d2a:	7d7b      	ldrb	r3, [r7, #21]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	7d3b      	ldrb	r3, [r7, #20]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	4413      	add	r3, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002d3e:	4413      	add	r3, r2
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	029a      	lsls	r2, r3, #10
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e028      	b.n	8002da0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d4e:	7c7b      	ldrb	r3, [r7, #17]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	7dbb      	ldrb	r3, [r7, #22]
 8002d58:	09db      	lsrs	r3, r3, #7
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	7d7b      	ldrb	r3, [r7, #21]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 0306 	and.w	r3, r3, #6
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3302      	adds	r3, #2
 8002d72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002d76:	7d3b      	ldrb	r3, [r7, #20]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	7cbb      	ldrb	r3, [r7, #18]
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002d92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d96:	3b09      	subs	r3, #9
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002da6:	e0ce      	b.n	8002f46 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002da8:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <USER_SPI_ioctl+0x2dc>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d031      	beq.n	8002e18 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002db4:	2100      	movs	r1, #0
 8002db6:	208d      	movs	r0, #141	; 0x8d
 8002db8:	f7ff fd19 	bl	80027ee <send_cmd>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 80c3 	bne.w	8002f4a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002dc4:	20ff      	movs	r0, #255	; 0xff
 8002dc6:	f7ff fc1f 	bl	8002608 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	2110      	movs	r1, #16
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fcb1 	bl	8002738 <rcvr_datablock>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80b6 	beq.w	8002f4a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002dde:	2330      	movs	r3, #48	; 0x30
 8002de0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002de4:	e007      	b.n	8002df6 <USER_SPI_ioctl+0x162>
 8002de6:	20ff      	movs	r0, #255	; 0xff
 8002de8:	f7ff fc0e 	bl	8002608 <xchg_spi>
 8002dec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002df0:	3b01      	subs	r3, #1
 8002df2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002df6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f3      	bne.n	8002de6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002dfe:	7dbb      	ldrb	r3, [r7, #22]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	2310      	movs	r3, #16
 8002e08:	fa03 f202 	lsl.w	r2, r3, r2
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002e16:	e098      	b.n	8002f4a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2009      	movs	r0, #9
 8002e1c:	f7ff fce7 	bl	80027ee <send_cmd>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8091 	bne.w	8002f4a <USER_SPI_ioctl+0x2b6>
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc82 	bl	8002738 <rcvr_datablock>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8087 	beq.w	8002f4a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002e3c:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <USER_SPI_ioctl+0x2dc>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002e48:	7dbb      	ldrb	r3, [r7, #22]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002e50:	7dfa      	ldrb	r2, [r7, #23]
 8002e52:	09d2      	lsrs	r2, r2, #7
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	4413      	add	r3, r2
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	7e7b      	ldrb	r3, [r7, #25]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e013      	b.n	8002e96 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002e6e:	7dbb      	ldrb	r3, [r7, #22]
 8002e70:	109b      	asrs	r3, r3, #2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	3301      	adds	r3, #1
 8002e7a:	7dfa      	ldrb	r2, [r7, #23]
 8002e7c:	00d2      	lsls	r2, r2, #3
 8002e7e:	f002 0218 	and.w	r2, r2, #24
 8002e82:	7df9      	ldrb	r1, [r7, #23]
 8002e84:	0949      	lsrs	r1, r1, #5
 8002e86:	b2c9      	uxtb	r1, r1
 8002e88:	440a      	add	r2, r1
 8002e8a:	3201      	adds	r2, #1
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002e9c:	e055      	b.n	8002f4a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e9e:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <USER_SPI_ioctl+0x2dc>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f003 0306 	and.w	r3, r3, #6
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d051      	beq.n	8002f4e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002eaa:	f107 020c 	add.w	r2, r7, #12
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	210b      	movs	r1, #11
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff feee 	bl	8002c94 <USER_SPI_ioctl>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d149      	bne.n	8002f52 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ebe:	7b3b      	ldrb	r3, [r7, #12]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <USER_SPI_ioctl+0x23e>
 8002ec8:	7dbb      	ldrb	r3, [r7, #22]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d041      	beq.n	8002f56 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <USER_SPI_ioctl+0x2dc>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	025b      	lsls	r3, r3, #9
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efc:	2020      	movs	r0, #32
 8002efe:	f7ff fc76 	bl	80027ee <send_cmd>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d128      	bne.n	8002f5a <USER_SPI_ioctl+0x2c6>
 8002f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0a:	2021      	movs	r0, #33	; 0x21
 8002f0c:	f7ff fc6f 	bl	80027ee <send_cmd>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d121      	bne.n	8002f5a <USER_SPI_ioctl+0x2c6>
 8002f16:	2100      	movs	r1, #0
 8002f18:	2026      	movs	r0, #38	; 0x26
 8002f1a:	f7ff fc68 	bl	80027ee <send_cmd>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11a      	bne.n	8002f5a <USER_SPI_ioctl+0x2c6>
 8002f24:	f247 5030 	movw	r0, #30000	; 0x7530
 8002f28:	f7ff fbbb 	bl	80026a2 <wait_ready>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d013      	beq.n	8002f5a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002f38:	e00f      	b.n	8002f5a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f40:	e00c      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		break;
 8002f42:	bf00      	nop
 8002f44:	e00a      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		break;
 8002f46:	bf00      	nop
 8002f48:	e008      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		break;
 8002f4a:	bf00      	nop
 8002f4c:	e006      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002f4e:	bf00      	nop
 8002f50:	e004      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <USER_SPI_ioctl+0x2c8>
		break;
 8002f5a:	bf00      	nop
	}

	despiselect();
 8002f5c:	f7ff fbc4 	bl	80026e8 <despiselect>

	return res;
 8002f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	200006e8 	.word	0x200006e8

08002f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f7a:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f90:	4c0b      	ldr	r4, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f9e:	f7ff fa69 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f004 fc4b 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa6:	f7fe fca3 	bl	80018f0 <main>
  bx  lr    
 8002faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002fb8:	08009e28 	.word	0x08009e28
  ldr r2, =_sbss
 8002fbc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002fc0:	20000744 	.word	0x20000744

08002fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC_IRQHandler>
	...

08002fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_Init+0x40>)
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_Init+0x40>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_Init+0x40>)
 8002fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_Init+0x40>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_Init+0x40>)
 8002fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f000 fcfd 	bl	80039f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff6:	200f      	movs	r0, #15
 8002ff8:	f000 f808 	bl	800300c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffc:	f7ff f99e 	bl	800233c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00

0800300c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_InitTick+0x54>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_InitTick+0x58>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003022:	fbb3 f3f1 	udiv	r3, r3, r1
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fd15 	bl	8003a5a <HAL_SYSTICK_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00e      	b.n	8003058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d80a      	bhi.n	8003056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003040:	2200      	movs	r2, #0
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f000 fcdd 	bl	8003a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <HAL_InitTick+0x5c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000008 	.word	0x20000008
 8003064:	20000014 	.word	0x20000014
 8003068:	20000010 	.word	0x20000010

0800306c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_IncTick+0x20>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x24>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_IncTick+0x24>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000014 	.word	0x20000014
 8003090:	200006f4 	.word	0x200006f4

08003094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_GetTick+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	200006f4 	.word	0x200006f4

080030ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff ffee 	bl	8003094 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d005      	beq.n	80030d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_Delay+0x44>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030d2:	bf00      	nop
 80030d4:	f7ff ffde 	bl	8003094 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d8f7      	bhi.n	80030d4 <HAL_Delay+0x28>
  {
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000014 	.word	0x20000014

080030f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e033      	b.n	8003172 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd ff30 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d118      	bne.n	8003164 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800313a:	f023 0302 	bic.w	r3, r3, #2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa86 	bl	8003658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
 8003162:	e001      	b.n	8003168 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Start+0x1a>
 8003192:	2302      	movs	r3, #2
 8003194:	e097      	b.n	80032c6 <HAL_ADC_Start+0x14a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d018      	beq.n	80031de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <HAL_ADC_Start+0x158>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <HAL_ADC_Start+0x15c>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9a      	lsrs	r2, r3, #18
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031d0:	e002      	b.n	80031d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f9      	bne.n	80031d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d15f      	bne.n	80032ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003216:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d106      	bne.n	800323a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f023 0206 	bic.w	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
 8003238:	e002      	b.n	8003240 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_ADC_Start+0x160>)
 800324a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003254:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d129      	bne.n	80032c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e020      	b.n	80032c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_ADC_Start+0x164>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d11b      	bne.n	80032c4 <HAL_ADC_Start+0x148>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d114      	bne.n	80032c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	e00b      	b.n	80032c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000008 	.word	0x20000008
 80032d8:	431bde83 	.word	0x431bde83
 80032dc:	40012300 	.word	0x40012300
 80032e0:	40012000 	.word	0x40012000

080032e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003300:	d113      	bne.n	800332a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800330c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003310:	d10b      	bne.n	800332a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e063      	b.n	80033f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800332a:	f7ff feb3 	bl	8003094 <HAL_GetTick>
 800332e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003330:	e021      	b.n	8003376 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d01d      	beq.n	8003376 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_ADC_PollForConversion+0x6c>
 8003340:	f7ff fea8 	bl	8003094 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d212      	bcs.n	8003376 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d00b      	beq.n	8003376 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0204 	orr.w	r2, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e03d      	b.n	80033f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d1d6      	bne.n	8003332 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0212 	mvn.w	r2, #18
 800338c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d123      	bne.n	80033f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11f      	bne.n	80033f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1c>
 800342c:	2302      	movs	r3, #2
 800342e:	e105      	b.n	800363c <HAL_ADC_ConfigChannel+0x228>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b09      	cmp	r3, #9
 800343e:	d925      	bls.n	800348c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	3b1e      	subs	r3, #30
 8003456:	2207      	movs	r2, #7
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43da      	mvns	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	400a      	ands	r2, r1
 8003464:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68d9      	ldr	r1, [r3, #12]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	4618      	mov	r0, r3
 8003478:	4603      	mov	r3, r0
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4403      	add	r3, r0
 800347e:	3b1e      	subs	r3, #30
 8003480:	409a      	lsls	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e022      	b.n	80034d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6919      	ldr	r1, [r3, #16]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	2207      	movs	r2, #7
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6919      	ldr	r1, [r3, #16]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4618      	mov	r0, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4403      	add	r3, r0
 80034c8:	409a      	lsls	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d824      	bhi.n	8003524 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	3b05      	subs	r3, #5
 80034ec:	221f      	movs	r2, #31
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	400a      	ands	r2, r1
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	4618      	mov	r0, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	3b05      	subs	r3, #5
 8003516:	fa00 f203 	lsl.w	r2, r0, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	635a      	str	r2, [r3, #52]	; 0x34
 8003522:	e04c      	b.n	80035be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d824      	bhi.n	8003576 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b23      	subs	r3, #35	; 0x23
 800353e:	221f      	movs	r2, #31
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43da      	mvns	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	400a      	ands	r2, r1
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	4618      	mov	r0, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	3b23      	subs	r3, #35	; 0x23
 8003568:	fa00 f203 	lsl.w	r2, r0, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
 8003574:	e023      	b.n	80035be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	3b41      	subs	r3, #65	; 0x41
 8003588:	221f      	movs	r2, #31
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	400a      	ands	r2, r1
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4618      	mov	r0, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b41      	subs	r3, #65	; 0x41
 80035b2:	fa00 f203 	lsl.w	r2, r0, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_ADC_ConfigChannel+0x234>)
 80035c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_ADC_ConfigChannel+0x238>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d109      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x1cc>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b12      	cmp	r3, #18
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_ADC_ConfigChannel+0x238>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d123      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x21e>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d003      	beq.n	80035fa <HAL_ADC_ConfigChannel+0x1e6>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b11      	cmp	r3, #17
 80035f8:	d11b      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d111      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_ADC_ConfigChannel+0x23c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a10      	ldr	r2, [pc, #64]	; (8003654 <HAL_ADC_ConfigChannel+0x240>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	0c9a      	lsrs	r2, r3, #18
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003624:	e002      	b.n	800362c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3b01      	subs	r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f9      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40012300 	.word	0x40012300
 800364c:	40012000 	.word	0x40012000
 8003650:	20000008 	.word	0x20000008
 8003654:	431bde83 	.word	0x431bde83

08003658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003660:	4b79      	ldr	r3, [pc, #484]	; (8003848 <ADC_Init+0x1f0>)
 8003662:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800368c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	021a      	lsls	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	4a58      	ldr	r2, [pc, #352]	; (800384c <ADC_Init+0x1f4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6899      	ldr	r1, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6899      	ldr	r1, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	e00f      	b.n	8003756 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003754:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0202 	bic.w	r2, r2, #2
 8003764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6899      	ldr	r1, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7e1b      	ldrb	r3, [r3, #24]
 8003770:	005a      	lsls	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	3b01      	subs	r3, #1
 80037b0:	035a      	lsls	r2, r3, #13
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	e007      	b.n	80037cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	051a      	lsls	r2, r3, #20
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800380e:	025a      	lsls	r2, r3, #9
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	029a      	lsls	r2, r3, #10
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40012300 	.word	0x40012300
 800384c:	0f000001 	.word	0x0f000001

08003850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60d3      	str	r3, [r2, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__NVIC_GetPriorityGrouping+0x18>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0307 	and.w	r3, r3, #7
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	db0b      	blt.n	80038de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	4907      	ldr	r1, [pc, #28]	; (80038ec <__NVIC_EnableIRQ+0x38>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2001      	movs	r0, #1
 80038d6:	fa00 f202 	lsl.w	r2, r0, r2
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000e100 	.word	0xe000e100

080038f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db0a      	blt.n	800391a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <__NVIC_SetPriority+0x4c>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003918:	e00a      	b.n	8003930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <__NVIC_SetPriority+0x50>)
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3b04      	subs	r3, #4
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	440b      	add	r3, r1
 800392e:	761a      	strb	r2, [r3, #24]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f1c3 0307 	rsb	r3, r3, #7
 800395e:	2b04      	cmp	r3, #4
 8003960:	bf28      	it	cs
 8003962:	2304      	movcs	r3, #4
 8003964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3304      	adds	r3, #4
 800396a:	2b06      	cmp	r3, #6
 800396c:	d902      	bls.n	8003974 <NVIC_EncodePriority+0x30>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3b03      	subs	r3, #3
 8003972:	e000      	b.n	8003976 <NVIC_EncodePriority+0x32>
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	401a      	ands	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800398c:	f04f 31ff 	mov.w	r1, #4294967295
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	43d9      	mvns	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800399c:	4313      	orrs	r3, r2
         );
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039bc:	d301      	bcc.n	80039c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039be:	2301      	movs	r3, #1
 80039c0:	e00f      	b.n	80039e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <SysTick_Config+0x40>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ca:	210f      	movs	r1, #15
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	f7ff ff8e 	bl	80038f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <SysTick_Config+0x40>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <SysTick_Config+0x40>)
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010

080039f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff29 	bl	8003850 <__NVIC_SetPriorityGrouping>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a18:	f7ff ff3e 	bl	8003898 <__NVIC_GetPriorityGrouping>
 8003a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7ff ff8e 	bl	8003944 <NVIC_EncodePriority>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff5d 	bl	80038f0 <__NVIC_SetPriority>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff31 	bl	80038b4 <__NVIC_EnableIRQ>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ffa2 	bl	80039ac <SysTick_Config>
 8003a68:	4603      	mov	r3, r0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e159      	b.n	8003d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a90:	2201      	movs	r2, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	f040 8148 	bne.w	8003d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d005      	beq.n	8003ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d130      	bne.n	8003b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 0201 	and.w	r2, r3, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d017      	beq.n	8003b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d123      	bne.n	8003bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	08da      	lsrs	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3208      	adds	r2, #8
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	220f      	movs	r2, #15
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0203 	and.w	r2, r3, #3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a2 	beq.w	8003d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b57      	ldr	r3, [pc, #348]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b54      	ldr	r3, [pc, #336]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c16:	4a52      	ldr	r2, [pc, #328]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a49      	ldr	r2, [pc, #292]	; (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x202>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a48      	ldr	r2, [pc, #288]	; (8003d68 <HAL_GPIO_Init+0x2f4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x1fe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a47      	ldr	r2, [pc, #284]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x1fa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a46      	ldr	r2, [pc, #280]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x1f6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a45      	ldr	r2, [pc, #276]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x1f2>
 8003c62:	2304      	movs	r3, #4
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c76:	2300      	movs	r3, #0
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c88:	4935      	ldr	r1, [pc, #212]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a2f      	ldr	r2, [pc, #188]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d14:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d38:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f aea2 	bls.w	8003a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40013800 	.word	0x40013800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020c00 	.word	0x40020c00
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e001      	b.n	8003d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e267      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b82      	ldr	r3, [pc, #520]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e242      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x74>
 8003e46:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6f      	ldr	r2, [pc, #444]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6c      	ldr	r2, [pc, #432]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e78:	4b69      	ldr	r3, [pc, #420]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a65      	ldr	r2, [pc, #404]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7ff f8fc 	bl	8003094 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7ff f8f8 	bl	8003094 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e207      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc0>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7ff f8e8 	bl	8003094 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7ff f8e4 	bl	8003094 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1f3      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b51      	ldr	r3, [pc, #324]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe8>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c7      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4937      	ldr	r1, [pc, #220]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b34      	ldr	r3, [pc, #208]	; (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7ff f89d 	bl	8003094 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7ff f899 	bl	8003094 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a8      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4925      	ldr	r1, [pc, #148]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7ff f87c 	bl	8003094 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7ff f878 	bl	8003094 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e187      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d036      	beq.n	8004038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_RCC_OscConfig+0x248>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7ff f85c 	bl	8003094 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7ff f858 	bl	8003094 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e167      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003ffe:	e01b      	b.n	8004038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_RCC_OscConfig+0x248>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7ff f845 	bl	8003094 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	e00e      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400e:	f7ff f841 	bl	8003094 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d907      	bls.n	800402c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e150      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	42470000 	.word	0x42470000
 8004028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	4b88      	ldr	r3, [pc, #544]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ea      	bne.n	800400e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8097 	beq.w	8004174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b81      	ldr	r3, [pc, #516]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b7d      	ldr	r3, [pc, #500]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a7c      	ldr	r2, [pc, #496]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b7a      	ldr	r3, [pc, #488]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b77      	ldr	r3, [pc, #476]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b74      	ldr	r3, [pc, #464]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7ff f801 	bl	8003094 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fe fffd 	bl	8003094 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e10c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d106      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ea>
 80040bc:	4b64      	ldr	r3, [pc, #400]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a63      	ldr	r2, [pc, #396]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e01c      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x30c>
 80040d2:	4b5f      	ldr	r3, [pc, #380]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	4a5e      	ldr	r2, [pc, #376]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	6713      	str	r3, [r2, #112]	; 0x70
 80040de:	4b5c      	ldr	r3, [pc, #368]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	4a5b      	ldr	r2, [pc, #364]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ec:	4b58      	ldr	r3, [pc, #352]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	4a57      	ldr	r2, [pc, #348]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	6713      	str	r3, [r2, #112]	; 0x70
 80040f8:	4b55      	ldr	r3, [pc, #340]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a54      	ldr	r2, [pc, #336]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 0304 	bic.w	r3, r3, #4
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fe ffc2 	bl	8003094 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fe ffbe 	bl	8003094 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0cb      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	4b49      	ldr	r3, [pc, #292]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ee      	beq.n	8004114 <HAL_RCC_OscConfig+0x334>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7fe ffac 	bl	8003094 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe ffa8 	bl	8003094 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0b5      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ee      	bne.n	8004140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	4a38      	ldr	r2, [pc, #224]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a1 	beq.w	80042c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417e:	4b34      	ldr	r3, [pc, #208]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d05c      	beq.n	8004244 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d141      	bne.n	8004216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCC_OscConfig+0x478>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fe ff7c 	bl	8003094 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fe ff78 	bl	8003094 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e087      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	491b      	ldr	r1, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x478>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fe ff51 	bl	8003094 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fe ff4d 	bl	8003094 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x416>
 8004214:	e054      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCC_OscConfig+0x478>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe ff3a 	bl	8003094 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004224:	f7fe ff36 	bl	8003094 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e045      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x444>
 8004242:	e03d      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e038      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
 8004258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d028      	beq.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d121      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d11a      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7fe fe68 	bl	8003094 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7fe fe64 	bl	8003094 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004456:	f000 f821 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fdc8 	bl	800300c <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	08009b84 	.word	0x08009b84
 8004494:	20000008 	.word	0x20000008
 8004498:	20000010 	.word	0x20000010

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b090      	sub	sp, #64	; 0x40
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
 80044a8:	2300      	movs	r3, #0
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ac:	2300      	movs	r3, #0
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x40>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	f200 80a1 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x16c>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ce:	e09b      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCC_GetSysClockFreq+0x184>)
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80044d4:	e09b      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044da:	e098      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b4d      	ldr	r3, [pc, #308]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d028      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	627a      	str	r2, [r7, #36]	; 0x24
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004504:	2100      	movs	r1, #0
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_GetSysClockFreq+0x188>)
 8004508:	fb03 f201 	mul.w	r2, r3, r1
 800450c:	2300      	movs	r3, #0
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	4413      	add	r3, r2
 8004514:	4a43      	ldr	r2, [pc, #268]	; (8004624 <HAL_RCC_GetSysClockFreq+0x188>)
 8004516:	fba0 1202 	umull	r1, r2, r0, r2
 800451a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451c:	460a      	mov	r2, r1
 800451e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004522:	4413      	add	r3, r2
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	2200      	movs	r2, #0
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	61fa      	str	r2, [r7, #28]
 800452e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004532:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004536:	f7fc fb1d 	bl	8000b74 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4613      	mov	r3, r2
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004542:	e053      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004544:	4b35      	ldr	r3, [pc, #212]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	2200      	movs	r2, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	617a      	str	r2, [r7, #20]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004556:	f04f 0b00 	mov.w	fp, #0
 800455a:	4652      	mov	r2, sl
 800455c:	465b      	mov	r3, fp
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456c:	0150      	lsls	r0, r2, #5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	ebb2 080a 	subs.w	r8, r2, sl
 8004576:	eb63 090b 	sbc.w	r9, r3, fp
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004586:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800458a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800458e:	ebb2 0408 	subs.w	r4, r2, r8
 8004592:	eb63 0509 	sbc.w	r5, r3, r9
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	00eb      	lsls	r3, r5, #3
 80045a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a4:	00e2      	lsls	r2, r4, #3
 80045a6:	4614      	mov	r4, r2
 80045a8:	461d      	mov	r5, r3
 80045aa:	eb14 030a 	adds.w	r3, r4, sl
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	eb45 030b 	adc.w	r3, r5, fp
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c2:	4629      	mov	r1, r5
 80045c4:	028b      	lsls	r3, r1, #10
 80045c6:	4621      	mov	r1, r4
 80045c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045cc:	4621      	mov	r1, r4
 80045ce:	028a      	lsls	r2, r1, #10
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	2200      	movs	r2, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045e0:	f7fc fac8 	bl	8000b74 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004606:	e002      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetSysClockFreq+0x184>)
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800460c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004610:	4618      	mov	r0, r3
 8004612:	3740      	adds	r7, #64	; 0x40
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	00f42400 	.word	0x00f42400
 8004624:	017d7840 	.word	0x017d7840

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07b      	b.n	8004732 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	e005      	b.n	8004660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fd fafe 	bl	8001c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f003 0104 	and.w	r1, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0210 	and.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b088      	sub	sp, #32
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_SPI_Transmit+0x22>
 8004758:	2302      	movs	r3, #2
 800475a:	e126      	b.n	80049aa <HAL_SPI_Transmit+0x270>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004764:	f7fe fc96 	bl	8003094 <HAL_GetTick>
 8004768:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800477e:	e10b      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_Transmit+0x52>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004790:	e102      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2203      	movs	r2, #3
 8004796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d8:	d10f      	bne.n	80047fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d007      	beq.n	8004818 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d14b      	bne.n	80048ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0xf6>
 800482a:	8afb      	ldrh	r3, [r7, #22]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d13e      	bne.n	80048ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004854:	e02b      	b.n	80048ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d112      	bne.n	800488a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	86da      	strh	r2, [r3, #54]	; 0x36
 8004888:	e011      	b.n	80048ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488a:	f7fe fc03 	bl	8003094 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d803      	bhi.n	80048a2 <HAL_SPI_Transmit+0x168>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d102      	bne.n	80048a8 <HAL_SPI_Transmit+0x16e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ac:	e074      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ce      	bne.n	8004856 <HAL_SPI_Transmit+0x11c>
 80048b8:	e04c      	b.n	8004954 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_Transmit+0x18e>
 80048c2:	8afb      	ldrh	r3, [r7, #22]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d140      	bne.n	800494a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048ee:	e02c      	b.n	800494a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d113      	bne.n	8004926 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	86da      	strh	r2, [r3, #54]	; 0x36
 8004924:	e011      	b.n	800494a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004926:	f7fe fbb5 	bl	8003094 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d803      	bhi.n	800493e <HAL_SPI_Transmit+0x204>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d102      	bne.n	8004944 <HAL_SPI_Transmit+0x20a>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004948:	e026      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1cd      	bne.n	80048f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fa55 	bl	8004e08 <SPI_EndRxTxTransaction>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e000      	b.n	8004998 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004996:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08c      	sub	sp, #48	; 0x30
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049c0:	2301      	movs	r3, #1
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x26>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e18a      	b.n	8004cee <HAL_SPI_TransmitReceive+0x33c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e0:	f7fe fb58 	bl	8003094 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d00f      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x70>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a08:	d107      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x68>
 8004a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d003      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a20:	e15b      	b.n	8004cda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0x82>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0x82>
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a3a:	e14e      	b.n	8004cda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d003      	beq.n	8004a50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2205      	movs	r2, #5
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	887a      	ldrh	r2, [r7, #2]
 8004a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	887a      	ldrh	r2, [r7, #2]
 8004a72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d007      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aac:	d178      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x10a>
 8004ab6:	8b7b      	ldrh	r3, [r7, #26]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d166      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae0:	e053      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d11b      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x176>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x176>
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d113      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	881a      	ldrh	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d119      	bne.n	8004b6a <HAL_SPI_TransmitReceive+0x1b8>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d014      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b66:	2301      	movs	r3, #1
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b6a:	f7fe fa93 	bl	8003094 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d807      	bhi.n	8004b8a <HAL_SPI_TransmitReceive+0x1d8>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d003      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b88:	e0a7      	b.n	8004cda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1a6      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x130>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1a1      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x130>
 8004b9e:	e07c      	b.n	8004c9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x1fc>
 8004ba8:	8b7b      	ldrh	r3, [r7, #26]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d16b      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	7812      	ldrb	r2, [r2, #0]
 8004bba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd4:	e057      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d11c      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x26c>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x26c>
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d114      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	7812      	ldrb	r2, [r2, #0]
 8004c00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d119      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x2ae>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d014      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c60:	f7fe fa18 	bl	8003094 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d803      	bhi.n	8004c78 <HAL_SPI_TransmitReceive+0x2c6>
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x2cc>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c84:	e029      	b.n	8004cda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1a2      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x224>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d19d      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8b2 	bl	8004e08 <SPI_EndRxTxTransaction>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d006      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cb6:	e010      	b.n	8004cda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	e000      	b.n	8004cda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3730      	adds	r7, #48	; 0x30
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d08:	f7fe f9c4 	bl	8003094 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4413      	add	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d18:	f7fe f9bc 	bl	8003094 <HAL_GetTick>
 8004d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	015b      	lsls	r3, r3, #5
 8004d24:	0d1b      	lsrs	r3, r3, #20
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2e:	e054      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d050      	beq.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d38:	f7fe f9ac 	bl	8003094 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d902      	bls.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d13d      	bne.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d66:	d111      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d70:	d004      	beq.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7a:	d107      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d94:	d10f      	bne.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e017      	b.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d19b      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000008 	.word	0x20000008

08004e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <SPI_EndRxTxTransaction+0x7c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <SPI_EndRxTxTransaction+0x80>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0d5b      	lsrs	r3, r3, #21
 8004e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d112      	bne.n	8004e5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff ff5a 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00f      	b.n	8004e7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d0f2      	beq.n	8004e5a <SPI_EndRxTxTransaction+0x52>
 8004e74:	e000      	b.n	8004e78 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e76:	bf00      	nop
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000008 	.word	0x20000008
 8004e88:	165e9f81 	.word	0x165e9f81

08004e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e041      	b.n	8004f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fd fb38 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f000 f9f0 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e044      	b.n	8004fce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_TIM_Base_Start_IT+0xb0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6e:	d013      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x6c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a16      	ldr	r2, [pc, #88]	; (8004fec <HAL_TIM_Base_Start_IT+0xc0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d111      	bne.n	8004fbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d010      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	e007      	b.n	8004fcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40014000 	.word	0x40014000

08004ff0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10f      	bne.n	8005038 <HAL_TIM_Base_Stop_IT+0x48>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a1a      	ldr	r2, [r3, #32]
 800501e:	f240 4344 	movw	r3, #1092	; 0x444
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d107      	bne.n	8005038 <HAL_TIM_Base_Stop_IT+0x48>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d122      	bne.n	80050aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d11b      	bne.n	80050aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0202 	mvn.w	r2, #2
 800507a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f8ee 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8005096:	e005      	b.n	80050a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8e0 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f8f1 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d122      	bne.n	80050fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d11b      	bne.n	80050fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0204 	mvn.w	r2, #4
 80050ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8c4 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 80050ea:	e005      	b.n	80050f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8b6 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8c7 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d122      	bne.n	8005152 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d11b      	bne.n	8005152 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0208 	mvn.w	r2, #8
 8005122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2204      	movs	r2, #4
 8005128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f89a 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 800513e:	e005      	b.n	800514c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f88c 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f89d 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b10      	cmp	r3, #16
 800515e:	d122      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d11b      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0210 	mvn.w	r2, #16
 8005176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2208      	movs	r2, #8
 800517c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f870 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8005192:	e005      	b.n	80051a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f862 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f873 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10e      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d107      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f06f 0201 	mvn.w	r2, #1
 80051ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fc fc5b 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d10e      	bne.n	80051fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d107      	bne.n	80051fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f8e3 	bl	80053c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d10e      	bne.n	800522a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d107      	bne.n	800522a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f838 	bl	800529a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b20      	cmp	r3, #32
 8005236:	d10e      	bne.n	8005256 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d107      	bne.n	8005256 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f06f 0220 	mvn.w	r2, #32
 800524e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8ad 	bl	80053b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a34      	ldr	r2, [pc, #208]	; (8005394 <TIM_Base_SetConfig+0xe4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a31      	ldr	r2, [pc, #196]	; (8005398 <TIM_Base_SetConfig+0xe8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a30      	ldr	r2, [pc, #192]	; (800539c <TIM_Base_SetConfig+0xec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <TIM_Base_SetConfig+0xf0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <TIM_Base_SetConfig+0xe4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01b      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005308:	d017      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <TIM_Base_SetConfig+0xe8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a21      	ldr	r2, [pc, #132]	; (800539c <TIM_Base_SetConfig+0xec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <TIM_Base_SetConfig+0xf0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <TIM_Base_SetConfig+0xf4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <TIM_Base_SetConfig+0xf8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1d      	ldr	r2, [pc, #116]	; (80053ac <TIM_Base_SetConfig+0xfc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a08      	ldr	r2, [pc, #32]	; (8005394 <TIM_Base_SetConfig+0xe4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800

080053b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80053dc:	4904      	ldr	r1, [pc, #16]	; (80053f0 <MX_FATFS_Init+0x18>)
 80053de:	4805      	ldr	r0, [pc, #20]	; (80053f4 <MX_FATFS_Init+0x1c>)
 80053e0:	f002 fa16 	bl	8007810 <FATFS_LinkDriver>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <MX_FATFS_Init+0x20>)
 80053ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	200006fc 	.word	0x200006fc
 80053f4:	20000018 	.word	0x20000018
 80053f8:	200006f8 	.word	0x200006f8

080053fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005400:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7fd fa57 	bl	80028cc <USER_SPI_initialize>
 800541e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fd fb35 	bl	8002aa4 <USER_SPI_status>
 800543a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005454:	7bf8      	ldrb	r0, [r7, #15]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	f7fd fb38 	bl	8002ad0 <USER_SPI_read>
 8005460:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800547a:	7bf8      	ldrb	r0, [r7, #15]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	f7fd fb8b 	bl	8002b9c <USER_SPI_write>
 8005486:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	603a      	str	r2, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
 800549c:	460b      	mov	r3, r1
 800549e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80054a0:	79b9      	ldrb	r1, [r7, #6]
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd fbf4 	bl	8002c94 <USER_SPI_ioctl>
 80054ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <disk_status+0x30>)
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	79fa      	ldrb	r2, [r7, #7]
 80054d0:	4905      	ldr	r1, [pc, #20]	; (80054e8 <disk_status+0x30>)
 80054d2:	440a      	add	r2, r1
 80054d4:	7a12      	ldrb	r2, [r2, #8]
 80054d6:	4610      	mov	r0, r2
 80054d8:	4798      	blx	r3
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000728 	.word	0x20000728

080054ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <disk_initialize+0x48>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d111      	bne.n	8005528 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	4a0b      	ldr	r2, [pc, #44]	; (8005534 <disk_initialize+0x48>)
 8005508:	2101      	movs	r1, #1
 800550a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <disk_initialize+0x48>)
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	79fa      	ldrb	r2, [r7, #7]
 800551a:	4906      	ldr	r1, [pc, #24]	; (8005534 <disk_initialize+0x48>)
 800551c:	440a      	add	r2, r1
 800551e:	7a12      	ldrb	r2, [r2, #8]
 8005520:	4610      	mov	r0, r2
 8005522:	4798      	blx	r3
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000728 	.word	0x20000728

08005538 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <disk_read+0x3c>)
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	689c      	ldr	r4, [r3, #8]
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	4a07      	ldr	r2, [pc, #28]	; (8005574 <disk_read+0x3c>)
 8005558:	4413      	add	r3, r2
 800555a:	7a18      	ldrb	r0, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	47a0      	blx	r4
 8005564:	4603      	mov	r3, r0
 8005566:	75fb      	strb	r3, [r7, #23]
  return res;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}
 8005572:	bf00      	nop
 8005574:	20000728 	.word	0x20000728

08005578 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <disk_write+0x3c>)
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68dc      	ldr	r4, [r3, #12]
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	4a07      	ldr	r2, [pc, #28]	; (80055b4 <disk_write+0x3c>)
 8005598:	4413      	add	r3, r2
 800559a:	7a18      	ldrb	r0, [r3, #8]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	47a0      	blx	r4
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd90      	pop	{r4, r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000728 	.word	0x20000728

080055b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	603a      	str	r2, [r7, #0]
 80055c2:	71fb      	strb	r3, [r7, #7]
 80055c4:	460b      	mov	r3, r1
 80055c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <disk_ioctl+0x38>)
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	79fa      	ldrb	r2, [r7, #7]
 80055d6:	4906      	ldr	r1, [pc, #24]	; (80055f0 <disk_ioctl+0x38>)
 80055d8:	440a      	add	r2, r1
 80055da:	7a10      	ldrb	r0, [r2, #8]
 80055dc:	79b9      	ldrb	r1, [r7, #6]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	4798      	blx	r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000728 	.word	0x20000728

080055f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3301      	adds	r3, #1
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005604:	89fb      	ldrh	r3, [r7, #14]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	b21a      	sxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b21b      	sxth	r3, r3
 8005610:	4313      	orrs	r3, r2
 8005612:	b21b      	sxth	r3, r3
 8005614:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005616:	89fb      	ldrh	r3, [r7, #14]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3303      	adds	r3, #3
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	3202      	adds	r2, #2
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	3201      	adds	r2, #1
 800564a:	7812      	ldrb	r2, [r2, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
	return rv;
 800565c:	68fb      	ldr	r3, [r7, #12]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	887b      	ldrh	r3, [r7, #2]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	0a1b      	lsrs	r3, r3, #8
 80056cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	1c53      	adds	r3, r2, #1
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	6179      	str	r1, [r7, #20]
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f1      	bne.n	8005712 <mem_cpy+0x1a>
	}
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	617a      	str	r2, [r7, #20]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3b01      	subs	r3, #1
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f3      	bne.n	800574a <mem_set+0x10>
}
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	61fa      	str	r2, [r7, #28]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	4619      	mov	r1, r3
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	61ba      	str	r2, [r7, #24]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	1acb      	subs	r3, r1, r3
 800579c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <mem_cmp+0x40>
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0eb      	beq.n	8005788 <mem_cmp+0x18>

	return r;
 80057b0:	697b      	ldr	r3, [r7, #20]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3724      	adds	r7, #36	; 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057c8:	e002      	b.n	80057d0 <chk_chr+0x12>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3301      	adds	r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <chk_chr+0x26>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d1f2      	bne.n	80057ca <chk_chr+0xc>
	return *str;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	781b      	ldrb	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e029      	b.n	800585c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005808:	4a27      	ldr	r2, [pc, #156]	; (80058a8 <chk_lock+0xb4>)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	4413      	add	r3, r2
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01d      	beq.n	8005852 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005816:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <chk_lock+0xb4>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	4413      	add	r3, r2
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d116      	bne.n	8005856 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <chk_lock+0xb4>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	4413      	add	r3, r2
 8005830:	3304      	adds	r3, #4
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005838:	429a      	cmp	r2, r3
 800583a:	d10c      	bne.n	8005856 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800583c:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <chk_lock+0xb4>)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	4413      	add	r3, r2
 8005844:	3308      	adds	r3, #8
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800584c:	429a      	cmp	r2, r3
 800584e:	d102      	bne.n	8005856 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005850:	e007      	b.n	8005862 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005852:	2301      	movs	r3, #1
 8005854:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d9d2      	bls.n	8005808 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d109      	bne.n	800587c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <chk_lock+0x80>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d101      	bne.n	8005878 <chk_lock+0x84>
 8005874:	2300      	movs	r3, #0
 8005876:	e010      	b.n	800589a <chk_lock+0xa6>
 8005878:	2312      	movs	r3, #18
 800587a:	e00e      	b.n	800589a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d108      	bne.n	8005894 <chk_lock+0xa0>
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <chk_lock+0xb4>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	4413      	add	r3, r2
 800588a:	330c      	adds	r3, #12
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d101      	bne.n	8005898 <chk_lock+0xa4>
 8005894:	2310      	movs	r3, #16
 8005896:	e000      	b.n	800589a <chk_lock+0xa6>
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000708 	.word	0x20000708

080058ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	e002      	b.n	80058be <enq_lock+0x12>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3301      	adds	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d806      	bhi.n	80058d2 <enq_lock+0x26>
 80058c4:	4a09      	ldr	r2, [pc, #36]	; (80058ec <enq_lock+0x40>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	4413      	add	r3, r2
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f2      	bne.n	80058b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000708 	.word	0x20000708

080058f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e01f      	b.n	8005940 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005900:	4a41      	ldr	r2, [pc, #260]	; (8005a08 <inc_lock+0x118>)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	4413      	add	r3, r2
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d113      	bne.n	800593a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005912:	4a3d      	ldr	r2, [pc, #244]	; (8005a08 <inc_lock+0x118>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	4413      	add	r3, r2
 800591a:	3304      	adds	r3, #4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005922:	429a      	cmp	r2, r3
 8005924:	d109      	bne.n	800593a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005926:	4a38      	ldr	r2, [pc, #224]	; (8005a08 <inc_lock+0x118>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	4413      	add	r3, r2
 800592e:	3308      	adds	r3, #8
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005936:	429a      	cmp	r2, r3
 8005938:	d006      	beq.n	8005948 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d9dc      	bls.n	8005900 <inc_lock+0x10>
 8005946:	e000      	b.n	800594a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005948:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d132      	bne.n	80059b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e002      	b.n	800595c <inc_lock+0x6c>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d806      	bhi.n	8005970 <inc_lock+0x80>
 8005962:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <inc_lock+0x118>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	4413      	add	r3, r2
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f2      	bne.n	8005956 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d101      	bne.n	800597a <inc_lock+0x8a>
 8005976:	2300      	movs	r3, #0
 8005978:	e040      	b.n	80059fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4922      	ldr	r1, [pc, #136]	; (8005a08 <inc_lock+0x118>)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	440b      	add	r3, r1
 8005986:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	491e      	ldr	r1, [pc, #120]	; (8005a08 <inc_lock+0x118>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	440b      	add	r3, r1
 8005994:	3304      	adds	r3, #4
 8005996:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	491a      	ldr	r1, [pc, #104]	; (8005a08 <inc_lock+0x118>)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	440b      	add	r3, r1
 80059a4:	3308      	adds	r3, #8
 80059a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80059a8:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <inc_lock+0x118>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4413      	add	r3, r2
 80059b0:	330c      	adds	r3, #12
 80059b2:	2200      	movs	r2, #0
 80059b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <inc_lock+0xe0>
 80059bc:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <inc_lock+0x118>)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	4413      	add	r3, r2
 80059c4:	330c      	adds	r3, #12
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <inc_lock+0xe0>
 80059cc:	2300      	movs	r3, #0
 80059ce:	e015      	b.n	80059fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <inc_lock+0xf8>
 80059d6:	4a0c      	ldr	r2, [pc, #48]	; (8005a08 <inc_lock+0x118>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	4413      	add	r3, r2
 80059de:	330c      	adds	r3, #12
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	e001      	b.n	80059ec <inc_lock+0xfc>
 80059e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <inc_lock+0x118>)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	440b      	add	r3, r1
 80059f4:	330c      	adds	r3, #12
 80059f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	20000708 	.word	0x20000708

08005a0c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d825      	bhi.n	8005a6c <dec_lock+0x60>
		n = Files[i].ctr;
 8005a20:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <dec_lock+0x74>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4413      	add	r3, r2
 8005a28:	330c      	adds	r3, #12
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a2e:	89fb      	ldrh	r3, [r7, #14]
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a34:	d101      	bne.n	8005a3a <dec_lock+0x2e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a3a:	89fb      	ldrh	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <dec_lock+0x3a>
 8005a40:	89fb      	ldrh	r3, [r7, #14]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a46:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <dec_lock+0x74>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4413      	add	r3, r2
 8005a4e:	330c      	adds	r3, #12
 8005a50:	89fa      	ldrh	r2, [r7, #14]
 8005a52:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a54:	89fb      	ldrh	r3, [r7, #14]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <dec_lock+0x5a>
 8005a5a:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <dec_lock+0x74>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	4413      	add	r3, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	737b      	strb	r3, [r7, #13]
 8005a6a:	e001      	b.n	8005a70 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a70:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000708 	.word	0x20000708

08005a84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e010      	b.n	8005ab4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a92:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <clear_lock+0x44>)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	4413      	add	r3, r2
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d105      	bne.n	8005aae <clear_lock+0x2a>
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <clear_lock+0x44>)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	4413      	add	r3, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d9eb      	bls.n	8005a92 <clear_lock+0xe>
	}
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000708 	.word	0x20000708

08005acc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	78db      	ldrb	r3, [r3, #3]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d034      	beq.n	8005b4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	7858      	ldrb	r0, [r3, #1]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005af0:	2301      	movs	r3, #1
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	f7ff fd40 	bl	8005578 <disk_write>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
 8005b02:	e022      	b.n	8005b4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	1ad2      	subs	r2, r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d217      	bcs.n	8005b4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	789b      	ldrb	r3, [r3, #2]
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e010      	b.n	8005b44 <sync_window+0x78>
					wsect += fs->fsize;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7858      	ldrb	r0, [r3, #1]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b36:	2301      	movs	r3, #1
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	f7ff fd1d 	bl	8005578 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d8eb      	bhi.n	8005b22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d01b      	beq.n	8005ba4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ffad 	bl	8005acc <sync_window>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d113      	bne.n	8005ba4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7858      	ldrb	r0, [r3, #1]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b86:	2301      	movs	r3, #1
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	f7ff fcd5 	bl	8005538 <disk_read>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295
 8005b98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff87 	bl	8005acc <sync_window>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d158      	bne.n	8005c7a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d148      	bne.n	8005c62 <sync_fs+0xb2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	791b      	ldrb	r3, [r3, #4]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d144      	bne.n	8005c62 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3330      	adds	r3, #48	; 0x30
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fda9 	bl	800573a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3330      	adds	r3, #48	; 0x30
 8005bec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bf0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fd38 	bl	800566a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3330      	adds	r3, #48	; 0x30
 8005bfe:	4921      	ldr	r1, [pc, #132]	; (8005c84 <sync_fs+0xd4>)
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fd4d 	bl	80056a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3330      	adds	r3, #48	; 0x30
 8005c0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005c0e:	491e      	ldr	r1, [pc, #120]	; (8005c88 <sync_fs+0xd8>)
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fd45 	bl	80056a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3330      	adds	r3, #48	; 0x30
 8005c1a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7ff fd3b 	bl	80056a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3330      	adds	r3, #48	; 0x30
 8005c2e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7ff fd31 	bl	80056a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7858      	ldrb	r0, [r3, #1]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	2301      	movs	r3, #1
 8005c58:	f7ff fc8e 	bl	8005578 <disk_write>
			fs->fsi_flag = 0;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2200      	movs	r2, #0
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fca4 	bl	80055b8 <disk_ioctl>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <sync_fs+0xca>
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	41615252 	.word	0x41615252
 8005c88:	61417272 	.word	0x61417272

08005c8c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	3b02      	subs	r3, #2
 8005c9a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	3b02      	subs	r3, #2
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d301      	bcc.n	8005cac <clust2sect+0x20>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e008      	b.n	8005cbe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	895b      	ldrh	r3, [r3, #10]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	fb03 f202 	mul.w	r2, r3, r2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	4413      	add	r3, r2
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d904      	bls.n	8005cea <get_fat+0x20>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005cea:	2301      	movs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	e08f      	b.n	8005e10 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d062      	beq.n	8005dc4 <get_fat+0xfa>
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	dc7c      	bgt.n	8005dfc <get_fat+0x132>
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d002      	beq.n	8005d0c <get_fat+0x42>
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d042      	beq.n	8005d90 <get_fat+0xc6>
 8005d0a:	e077      	b.n	8005dfc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	0a5b      	lsrs	r3, r3, #9
 8005d22:	4413      	add	r3, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	6938      	ldr	r0, [r7, #16]
 8005d28:	f7ff ff14 	bl	8005b54 <move_window>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d167      	bne.n	8005e02 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	60fa      	str	r2, [r7, #12]
 8005d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6a1a      	ldr	r2, [r3, #32]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0a5b      	lsrs	r3, r3, #9
 8005d4e:	4413      	add	r3, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f7ff fefe 	bl	8005b54 <move_window>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d153      	bne.n	8005e06 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <get_fat+0xbc>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	e002      	b.n	8005d8c <get_fat+0xc2>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d8c:	617b      	str	r3, [r7, #20]
			break;
 8005d8e:	e03f      	b.n	8005e10 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	4413      	add	r3, r2
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6938      	ldr	r0, [r7, #16]
 8005d9e:	f7ff fed9 	bl	8005b54 <move_window>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d130      	bne.n	8005e0a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005db6:	4413      	add	r3, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fc1b 	bl	80055f4 <ld_word>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	617b      	str	r3, [r7, #20]
			break;
 8005dc2:	e025      	b.n	8005e10 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	6a1a      	ldr	r2, [r3, #32]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	09db      	lsrs	r3, r3, #7
 8005dcc:	4413      	add	r3, r2
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6938      	ldr	r0, [r7, #16]
 8005dd2:	f7ff febf 	bl	8005b54 <move_window>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d118      	bne.n	8005e0e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005dea:	4413      	add	r3, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fc19 	bl	8005624 <ld_dword>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005df8:	617b      	str	r3, [r7, #20]
			break;
 8005dfa:	e009      	b.n	8005e10 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e006      	b.n	8005e10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e02:	bf00      	nop
 8005e04:	e004      	b.n	8005e10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e0e:	bf00      	nop
		}
	}

	return val;
 8005e10:	697b      	ldr	r3, [r7, #20]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e1a:	b590      	push	{r4, r7, lr}
 8005e1c:	b089      	sub	sp, #36	; 0x24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e26:	2302      	movs	r3, #2
 8005e28:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f240 80d2 	bls.w	8005fd6 <put_fat+0x1bc>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	f080 80cc 	bcs.w	8005fd6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	f000 8096 	beq.w	8005f74 <put_fat+0x15a>
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	f300 80cd 	bgt.w	8005fe8 <put_fat+0x1ce>
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d002      	beq.n	8005e58 <put_fat+0x3e>
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d06e      	beq.n	8005f34 <put_fat+0x11a>
 8005e56:	e0c7      	b.n	8005fe8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4413      	add	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1a      	ldr	r2, [r3, #32]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	0a5b      	lsrs	r3, r3, #9
 8005e6e:	4413      	add	r3, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fe6e 	bl	8005b54 <move_window>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 80ab 	bne.w	8005fda <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	61b9      	str	r1, [r7, #24]
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	4413      	add	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <put_fat+0xa4>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	b25a      	sxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	e001      	b.n	8005ec2 <put_fat+0xa8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	0a5b      	lsrs	r3, r3, #9
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff fe3b 	bl	8005b54 <move_window>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ee2:	7ffb      	ldrb	r3, [r7, #31]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d17a      	bne.n	8005fde <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef4:	4413      	add	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <put_fat+0xf0>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	e00e      	b.n	8005f28 <put_fat+0x10e>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	f023 030f 	bic.w	r3, r3, #15
 8005f14:	b25a      	sxtb	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	70da      	strb	r2, [r3, #3]
			break;
 8005f32:	e059      	b.n	8005fe8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff fe07 	bl	8005b54 <move_window>
 8005f46:	4603      	mov	r3, r0
 8005f48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f4a:	7ffb      	ldrb	r3, [r7, #31]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d148      	bne.n	8005fe2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f5e:	4413      	add	r3, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	b292      	uxth	r2, r2
 8005f64:	4611      	mov	r1, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fb7f 	bl	800566a <st_word>
			fs->wflag = 1;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	70da      	strb	r2, [r3, #3]
			break;
 8005f72:	e039      	b.n	8005fe8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	4413      	add	r3, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff fde7 	bl	8005b54 <move_window>
 8005f86:	4603      	mov	r3, r0
 8005f88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d12a      	bne.n	8005fe6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fb3c 	bl	8005624 <ld_dword>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fb2:	4323      	orrs	r3, r4
 8005fb4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005fc4:	4413      	add	r3, r2
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff fb69 	bl	80056a0 <st_dword>
			fs->wflag = 1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	70da      	strb	r2, [r3, #3]
			break;
 8005fd4:	e008      	b.n	8005fe8 <put_fat+0x1ce>
		}
	}
 8005fd6:	bf00      	nop
 8005fd8:	e006      	b.n	8005fe8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005fe6:	bf00      	nop
	return res;
 8005fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3724      	adds	r7, #36	; 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd90      	pop	{r4, r7, pc}

08005ff2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b088      	sub	sp, #32
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d904      	bls.n	8006018 <remove_chain+0x26>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	429a      	cmp	r2, r3
 8006016:	d301      	bcc.n	800601c <remove_chain+0x2a>
 8006018:	2302      	movs	r3, #2
 800601a:	e04b      	b.n	80060b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006022:	f04f 32ff 	mov.w	r2, #4294967295
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	69b8      	ldr	r0, [r7, #24]
 800602a:	f7ff fef6 	bl	8005e1a <put_fat>
 800602e:	4603      	mov	r3, r0
 8006030:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006032:	7ffb      	ldrb	r3, [r7, #31]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <remove_chain+0x4a>
 8006038:	7ffb      	ldrb	r3, [r7, #31]
 800603a:	e03b      	b.n	80060b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fe43 	bl	8005cca <get_fat>
 8006044:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d031      	beq.n	80060b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <remove_chain+0x64>
 8006052:	2302      	movs	r3, #2
 8006054:	e02e      	b.n	80060b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d101      	bne.n	8006062 <remove_chain+0x70>
 800605e:	2301      	movs	r3, #1
 8006060:	e028      	b.n	80060b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006062:	2200      	movs	r2, #0
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	69b8      	ldr	r0, [r7, #24]
 8006068:	f7ff fed7 	bl	8005e1a <put_fat>
 800606c:	4603      	mov	r3, r0
 800606e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006070:	7ffb      	ldrb	r3, [r7, #31]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <remove_chain+0x88>
 8006076:	7ffb      	ldrb	r3, [r7, #31]
 8006078:	e01c      	b.n	80060b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	3b02      	subs	r3, #2
 8006084:	429a      	cmp	r2, r3
 8006086:	d20b      	bcs.n	80060a0 <remove_chain+0xae>
			fs->free_clst++;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d3c6      	bcc.n	800603c <remove_chain+0x4a>
 80060ae:	e000      	b.n	80060b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80060b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <create_chain+0x2c>
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d31b      	bcc.n	8006120 <create_chain+0x64>
 80060e8:	2301      	movs	r3, #1
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e018      	b.n	8006120 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fdea 	bl	8005cca <get_fat>
 80060f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d801      	bhi.n	8006102 <create_chain+0x46>
 80060fe:	2301      	movs	r3, #1
 8006100:	e070      	b.n	80061e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d101      	bne.n	800610e <create_chain+0x52>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	e06a      	b.n	80061e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	429a      	cmp	r2, r3
 8006116:	d201      	bcs.n	800611c <create_chain+0x60>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	e063      	b.n	80061e4 <create_chain+0x128>
		scl = clst;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	3301      	adds	r3, #1
 8006128:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	429a      	cmp	r2, r3
 8006132:	d307      	bcc.n	8006144 <create_chain+0x88>
				ncl = 2;
 8006134:	2302      	movs	r3, #2
 8006136:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	429a      	cmp	r2, r3
 800613e:	d901      	bls.n	8006144 <create_chain+0x88>
 8006140:	2300      	movs	r3, #0
 8006142:	e04f      	b.n	80061e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fdbf 	bl	8005cca <get_fat>
 800614c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d003      	beq.n	8006162 <create_chain+0xa6>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d101      	bne.n	8006166 <create_chain+0xaa>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	e03e      	b.n	80061e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	429a      	cmp	r2, r3
 800616c:	d1da      	bne.n	8006124 <create_chain+0x68>
 800616e:	2300      	movs	r3, #0
 8006170:	e038      	b.n	80061e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006172:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	69f9      	ldr	r1, [r7, #28]
 800617a:	6938      	ldr	r0, [r7, #16]
 800617c:	f7ff fe4d 	bl	8005e1a <put_fat>
 8006180:	4603      	mov	r3, r0
 8006182:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <create_chain+0xe2>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6938      	ldr	r0, [r7, #16]
 8006196:	f7ff fe40 	bl	8005e1a <put_fat>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d116      	bne.n	80061d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	3b02      	subs	r3, #2
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d804      	bhi.n	80061c2 <create_chain+0x106>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	791b      	ldrb	r3, [r3, #4]
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	711a      	strb	r2, [r3, #4]
 80061d0:	e007      	b.n	80061e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d102      	bne.n	80061de <create_chain+0x122>
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295
 80061dc:	e000      	b.n	80061e0 <create_chain+0x124>
 80061de:	2301      	movs	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80061e2:	69fb      	ldr	r3, [r7, #28]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	3304      	adds	r3, #4
 8006202:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	0a5b      	lsrs	r3, r3, #9
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	8952      	ldrh	r2, [r2, #10]
 800620c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006210:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	613a      	str	r2, [r7, #16]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <clmt_clust+0x3a>
 8006222:	2300      	movs	r3, #0
 8006224:	e010      	b.n	8006248 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	d307      	bcc.n	800623e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3304      	adds	r3, #4
 800623a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800623c:	e7e9      	b.n	8006212 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800623e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4413      	add	r3, r2
}
 8006248:	4618      	mov	r0, r3
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800626a:	d204      	bcs.n	8006276 <dir_sdi+0x22>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006276:	2302      	movs	r3, #2
 8006278:	e063      	b.n	8006342 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <dir_sdi+0x46>
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d902      	bls.n	800629a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10c      	bne.n	80062ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	8912      	ldrh	r2, [r2, #8]
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d301      	bcc.n	80062b0 <dir_sdi+0x5c>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e048      	b.n	8006342 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	e029      	b.n	800630e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	895b      	ldrh	r3, [r3, #10]
 80062be:	025b      	lsls	r3, r3, #9
 80062c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062c2:	e019      	b.n	80062f8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6979      	ldr	r1, [r7, #20]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff fcfe 	bl	8005cca <get_fat>
 80062ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d101      	bne.n	80062dc <dir_sdi+0x88>
 80062d8:	2301      	movs	r3, #1
 80062da:	e032      	b.n	8006342 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d904      	bls.n	80062ec <dir_sdi+0x98>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d301      	bcc.n	80062f0 <dir_sdi+0x9c>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e028      	b.n	8006342 <dir_sdi+0xee>
			ofs -= csz;
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d2e1      	bcs.n	80062c4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	6938      	ldr	r0, [r7, #16]
 8006304:	f7ff fcc2 	bl	8005c8c <clust2sect>
 8006308:	4602      	mov	r2, r0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <dir_sdi+0xcc>
 800631c:	2302      	movs	r3, #2
 800631e:	e010      	b.n	8006342 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	0a5b      	lsrs	r3, r3, #9
 8006328:	441a      	add	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	441a      	add	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b086      	sub	sp, #24
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	3320      	adds	r3, #32
 8006360:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <dir_next+0x28>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006370:	d301      	bcc.n	8006376 <dir_next+0x2c>
 8006372:	2304      	movs	r3, #4
 8006374:	e0aa      	b.n	80064cc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 8098 	bne.w	80064b2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	8912      	ldrh	r2, [r2, #8]
 800639c:	4293      	cmp	r3, r2
 800639e:	f0c0 8088 	bcc.w	80064b2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	61da      	str	r2, [r3, #28]
 80063a8:	2304      	movs	r3, #4
 80063aa:	e08f      	b.n	80064cc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	0a5b      	lsrs	r3, r3, #9
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	8952      	ldrh	r2, [r2, #10]
 80063b4:	3a01      	subs	r2, #1
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d17a      	bne.n	80064b2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f7ff fc80 	bl	8005cca <get_fat>
 80063ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d801      	bhi.n	80063d6 <dir_next+0x8c>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e07a      	b.n	80064cc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d101      	bne.n	80063e2 <dir_next+0x98>
 80063de:	2301      	movs	r3, #1
 80063e0:	e074      	b.n	80064cc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d358      	bcc.n	800649e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	61da      	str	r2, [r3, #28]
 80063f8:	2304      	movs	r3, #4
 80063fa:	e067      	b.n	80064cc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7ff fe59 	bl	80060bc <create_chain>
 800640a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <dir_next+0xcc>
 8006412:	2307      	movs	r3, #7
 8006414:	e05a      	b.n	80064cc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <dir_next+0xd6>
 800641c:	2302      	movs	r3, #2
 800641e:	e055      	b.n	80064cc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d101      	bne.n	800642c <dir_next+0xe2>
 8006428:	2301      	movs	r3, #1
 800642a:	e04f      	b.n	80064cc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fb4d 	bl	8005acc <sync_window>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <dir_next+0xf2>
 8006438:	2301      	movs	r3, #1
 800643a:	e047      	b.n	80064cc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3330      	adds	r3, #48	; 0x30
 8006440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f977 	bl	800573a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fc1a 	bl	8005c8c <clust2sect>
 8006458:	4602      	mov	r2, r0
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	62da      	str	r2, [r3, #44]	; 0x2c
 800645e:	e012      	b.n	8006486 <dir_next+0x13c>
						fs->wflag = 1;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff fb30 	bl	8005acc <sync_window>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <dir_next+0x12c>
 8006472:	2301      	movs	r3, #1
 8006474:	e02a      	b.n	80064cc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	62da      	str	r2, [r3, #44]	; 0x2c
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	895b      	ldrh	r3, [r3, #10]
 800648a:	461a      	mov	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4293      	cmp	r3, r2
 8006490:	d3e6      	bcc.n	8006460 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad2      	subs	r2, r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80064a4:	6979      	ldr	r1, [r7, #20]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7ff fbf0 	bl	8005c8c <clust2sect>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80064e4:	2100      	movs	r1, #0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff feb4 	bl	8006254 <dir_sdi>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d12b      	bne.n	800654e <dir_alloc+0x7a>
		n = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	4619      	mov	r1, r3
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff fb27 	bl	8005b54 <move_window>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11d      	bne.n	800654c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2be5      	cmp	r3, #229	; 0xe5
 8006518:	d004      	beq.n	8006524 <dir_alloc+0x50>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d102      	bne.n	8006538 <dir_alloc+0x64>
 8006532:	e00c      	b.n	800654e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006538:	2101      	movs	r1, #1
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ff05 	bl	800634a <dir_next>
 8006540:	4603      	mov	r3, r0
 8006542:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0d7      	beq.n	80064fa <dir_alloc+0x26>
 800654a:	e000      	b.n	800654e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800654c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d101      	bne.n	8006558 <dir_alloc+0x84>
 8006554:	2307      	movs	r3, #7
 8006556:	75fb      	strb	r3, [r7, #23]
	return res;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	331a      	adds	r3, #26
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff f83f 	bl	80055f4 <ld_word>
 8006576:	4603      	mov	r3, r0
 8006578:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d109      	bne.n	8006596 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	3314      	adds	r3, #20
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff f834 	bl	80055f4 <ld_word>
 800658c:	4603      	mov	r3, r0
 800658e:	041b      	lsls	r3, r3, #16
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	331a      	adds	r3, #26
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	b292      	uxth	r2, r2
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f857 	bl	800566a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d109      	bne.n	80065d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f103 0214 	add.w	r2, r3, #20
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7ff f849 	bl	800566a <st_word>
	}
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80065ee:	2100      	movs	r1, #0
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fe2f 	bl	8006254 <dir_sdi>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <dir_find+0x24>
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	e03e      	b.n	8006682 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4619      	mov	r1, r3
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f7ff faa2 	bl	8005b54 <move_window>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d12f      	bne.n	800667a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <dir_find+0x4e>
 8006628:	2304      	movs	r3, #4
 800662a:	75fb      	strb	r3, [r7, #23]
 800662c:	e028      	b.n	8006680 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	330b      	adds	r3, #11
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800663a:	b2da      	uxtb	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	330b      	adds	r3, #11
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <dir_find+0x86>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a18      	ldr	r0, [r3, #32]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3324      	adds	r3, #36	; 0x24
 8006658:	220b      	movs	r2, #11
 800665a:	4619      	mov	r1, r3
 800665c:	f7ff f888 	bl	8005770 <mem_cmp>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006666:	2100      	movs	r1, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fe6e 	bl	800634a <dir_next>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0c5      	beq.n	8006604 <dir_find+0x24>
 8006678:	e002      	b.n	8006680 <dir_find+0xa0>
		if (res != FR_OK) break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800667e:	bf00      	nop

	return res;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006698:	2101      	movs	r1, #1
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ff1a 	bl	80064d4 <dir_alloc>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11c      	bne.n	80066e4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4619      	mov	r1, r3
 80066b0:	68b8      	ldr	r0, [r7, #8]
 80066b2:	f7ff fa4f 	bl	8005b54 <move_window>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d111      	bne.n	80066e4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	2220      	movs	r2, #32
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff f836 	bl	800573a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a18      	ldr	r0, [r3, #32]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3324      	adds	r3, #36	; 0x24
 80066d6:	220b      	movs	r2, #11
 80066d8:	4619      	mov	r1, r3
 80066da:	f7ff f80d 	bl	80056f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2201      	movs	r2, #1
 80066e2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006706:	220b      	movs	r2, #11
 8006708:	2120      	movs	r1, #32
 800670a:	68b8      	ldr	r0, [r7, #8]
 800670c:	f7ff f815 	bl	800573a <mem_set>
	si = i = 0; ni = 8;
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	2308      	movs	r3, #8
 800671a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	61fa      	str	r2, [r7, #28]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800672a:	7efb      	ldrb	r3, [r7, #27]
 800672c:	2b20      	cmp	r3, #32
 800672e:	d94e      	bls.n	80067ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006730:	7efb      	ldrb	r3, [r7, #27]
 8006732:	2b2f      	cmp	r3, #47	; 0x2f
 8006734:	d006      	beq.n	8006744 <create_name+0x54>
 8006736:	7efb      	ldrb	r3, [r7, #27]
 8006738:	2b5c      	cmp	r3, #92	; 0x5c
 800673a:	d110      	bne.n	800675e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800673c:	e002      	b.n	8006744 <create_name+0x54>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b2f      	cmp	r3, #47	; 0x2f
 800674e:	d0f6      	beq.n	800673e <create_name+0x4e>
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b5c      	cmp	r3, #92	; 0x5c
 800675a:	d0f0      	beq.n	800673e <create_name+0x4e>
			break;
 800675c:	e038      	b.n	80067d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800675e:	7efb      	ldrb	r3, [r7, #27]
 8006760:	2b2e      	cmp	r3, #46	; 0x2e
 8006762:	d003      	beq.n	800676c <create_name+0x7c>
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	d30c      	bcc.n	8006786 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b0b      	cmp	r3, #11
 8006770:	d002      	beq.n	8006778 <create_name+0x88>
 8006772:	7efb      	ldrb	r3, [r7, #27]
 8006774:	2b2e      	cmp	r3, #46	; 0x2e
 8006776:	d001      	beq.n	800677c <create_name+0x8c>
 8006778:	2306      	movs	r3, #6
 800677a:	e044      	b.n	8006806 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800677c:	2308      	movs	r3, #8
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	230b      	movs	r3, #11
 8006782:	617b      	str	r3, [r7, #20]
			continue;
 8006784:	e022      	b.n	80067cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006786:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800678a:	2b00      	cmp	r3, #0
 800678c:	da04      	bge.n	8006798 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800678e:	7efb      	ldrb	r3, [r7, #27]
 8006790:	3b80      	subs	r3, #128	; 0x80
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <create_name+0x120>)
 8006794:	5cd3      	ldrb	r3, [r2, r3]
 8006796:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006798:	7efb      	ldrb	r3, [r7, #27]
 800679a:	4619      	mov	r1, r3
 800679c:	481d      	ldr	r0, [pc, #116]	; (8006814 <create_name+0x124>)
 800679e:	f7ff f80e 	bl	80057be <chk_chr>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <create_name+0xbc>
 80067a8:	2306      	movs	r3, #6
 80067aa:	e02c      	b.n	8006806 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80067ac:	7efb      	ldrb	r3, [r7, #27]
 80067ae:	2b60      	cmp	r3, #96	; 0x60
 80067b0:	d905      	bls.n	80067be <create_name+0xce>
 80067b2:	7efb      	ldrb	r3, [r7, #27]
 80067b4:	2b7a      	cmp	r3, #122	; 0x7a
 80067b6:	d802      	bhi.n	80067be <create_name+0xce>
 80067b8:	7efb      	ldrb	r3, [r7, #27]
 80067ba:	3b20      	subs	r3, #32
 80067bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	613a      	str	r2, [r7, #16]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	7efa      	ldrb	r2, [r7, #27]
 80067ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80067cc:	e7a6      	b.n	800671c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80067ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	441a      	add	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <create_name+0xf4>
 80067e0:	2306      	movs	r3, #6
 80067e2:	e010      	b.n	8006806 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2be5      	cmp	r3, #229	; 0xe5
 80067ea:	d102      	bne.n	80067f2 <create_name+0x102>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2205      	movs	r2, #5
 80067f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067f2:	7efb      	ldrb	r3, [r7, #27]
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d801      	bhi.n	80067fc <create_name+0x10c>
 80067f8:	2204      	movs	r2, #4
 80067fa:	e000      	b.n	80067fe <create_name+0x10e>
 80067fc:	2200      	movs	r2, #0
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	330b      	adds	r3, #11
 8006802:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006804:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	08009b94 	.word	0x08009b94
 8006814:	08008d6c 	.word	0x08008d6c

08006818 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800682c:	e002      	b.n	8006834 <follow_path+0x1c>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b2f      	cmp	r3, #47	; 0x2f
 800683a:	d0f8      	beq.n	800682e <follow_path+0x16>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b5c      	cmp	r3, #92	; 0x5c
 8006842:	d0f4      	beq.n	800682e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b1f      	cmp	r3, #31
 8006850:	d80a      	bhi.n	8006868 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800685a:	2100      	movs	r1, #0
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fcf9 	bl	8006254 <dir_sdi>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
 8006866:	e043      	b.n	80068f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006868:	463b      	mov	r3, r7
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff3f 	bl	80066f0 <create_name>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d134      	bne.n	80068e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff feaf 	bl	80065e0 <dir_find>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800688c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b04      	cmp	r3, #4
 8006898:	d127      	bne.n	80068ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d122      	bne.n	80068ea <follow_path+0xd2>
 80068a4:	2305      	movs	r3, #5
 80068a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80068a8:	e01f      	b.n	80068ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11c      	bne.n	80068ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	799b      	ldrb	r3, [r3, #6]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80068c0:	2305      	movs	r3, #5
 80068c2:	75fb      	strb	r3, [r7, #23]
 80068c4:	e014      	b.n	80068f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	4413      	add	r3, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff fe42 	bl	8006562 <ld_clust>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068e4:	e7c0      	b.n	8006868 <follow_path+0x50>
			if (res != FR_OK) break;
 80068e6:	bf00      	nop
 80068e8:	e002      	b.n	80068f0 <follow_path+0xd8>
				break;
 80068ea:	bf00      	nop
 80068ec:	e000      	b.n	80068f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068ee:	bf00      	nop
			}
		}
	}

	return res;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d031      	beq.n	8006974 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e002      	b.n	800691e <get_ldnumber+0x24>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	3301      	adds	r3, #1
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b20      	cmp	r3, #32
 8006924:	d903      	bls.n	800692e <get_ldnumber+0x34>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b3a      	cmp	r3, #58	; 0x3a
 800692c:	d1f4      	bne.n	8006918 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b3a      	cmp	r3, #58	; 0x3a
 8006934:	d11c      	bne.n	8006970 <get_ldnumber+0x76>
			tp = *path;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	60fa      	str	r2, [r7, #12]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	3b30      	subs	r3, #48	; 0x30
 8006946:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b09      	cmp	r3, #9
 800694c:	d80e      	bhi.n	800696c <get_ldnumber+0x72>
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	429a      	cmp	r2, r3
 8006954:	d10a      	bne.n	800696c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <get_ldnumber+0x72>
					vol = (int)i;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3301      	adds	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	e002      	b.n	8006976 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006974:	693b      	ldr	r3, [r7, #16]
}
 8006976:	4618      	mov	r0, r3
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	70da      	strb	r2, [r3, #3]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff f8d8 	bl	8005b54 <move_window>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <check_fs+0x2a>
 80069aa:	2304      	movs	r3, #4
 80069ac:	e038      	b.n	8006a20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3330      	adds	r3, #48	; 0x30
 80069b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe fe1c 	bl	80055f4 <ld_word>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <check_fs+0x48>
 80069c8:	2303      	movs	r3, #3
 80069ca:	e029      	b.n	8006a20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069d2:	2be9      	cmp	r3, #233	; 0xe9
 80069d4:	d009      	beq.n	80069ea <check_fs+0x66>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069dc:	2beb      	cmp	r3, #235	; 0xeb
 80069de:	d11e      	bne.n	8006a1e <check_fs+0x9a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80069e6:	2b90      	cmp	r3, #144	; 0x90
 80069e8:	d119      	bne.n	8006a1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3330      	adds	r3, #48	; 0x30
 80069ee:	3336      	adds	r3, #54	; 0x36
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fe17 	bl	8005624 <ld_dword>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	4a0a      	ldr	r2, [pc, #40]	; (8006a28 <check_fs+0xa4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <check_fs+0x82>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e00c      	b.n	8006a20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3330      	adds	r3, #48	; 0x30
 8006a0a:	3352      	adds	r3, #82	; 0x52
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fe09 	bl	8005624 <ld_dword>
 8006a12:	4603      	mov	r3, r0
 8006a14:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <check_fs+0xa8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <check_fs+0x9a>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006a1e:	2302      	movs	r3, #2
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	00544146 	.word	0x00544146
 8006a2c:	33544146 	.word	0x33544146

08006a30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b096      	sub	sp, #88	; 0x58
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff ff58 	bl	80068fa <get_ldnumber>
 8006a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da01      	bge.n	8006a56 <find_volume+0x26>
 8006a52:	230b      	movs	r3, #11
 8006a54:	e22d      	b.n	8006eb2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006a56:	4aa1      	ldr	r2, [pc, #644]	; (8006cdc <find_volume+0x2ac>)
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <find_volume+0x3a>
 8006a66:	230c      	movs	r3, #12
 8006a68:	e223      	b.n	8006eb2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01a      	beq.n	8006ab6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fd17 	bl	80054b8 <disk_status>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <find_volume+0x82>
 8006aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e1ff      	b.n	8006eb2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e1fd      	b.n	8006eb2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fd0f 	bl	80054ec <disk_initialize>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e1e6      	b.n	8006eb2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <find_volume+0xca>
 8006aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006af6:	230a      	movs	r3, #10
 8006af8:	e1db      	b.n	8006eb2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006afe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b02:	f7ff ff3f 	bl	8006984 <check_fs>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d149      	bne.n	8006ba8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b14:	2300      	movs	r3, #0
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
 8006b18:	e01e      	b.n	8006b58 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006b28:	4413      	add	r3, r2
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	3304      	adds	r3, #4
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d006      	beq.n	8006b44 <find_volume+0x114>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	3308      	adds	r3, #8
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fd72 	bl	8005624 <ld_dword>
 8006b40:	4602      	mov	r2, r0
 8006b42:	e000      	b.n	8006b46 <find_volume+0x116>
 8006b44:	2200      	movs	r2, #0
 8006b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	3358      	adds	r3, #88	; 0x58
 8006b4c:	443b      	add	r3, r7
 8006b4e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b54:	3301      	adds	r3, #1
 8006b56:	643b      	str	r3, [r7, #64]	; 0x40
 8006b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d9dd      	bls.n	8006b1a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006b5e:	2300      	movs	r3, #0
 8006b60:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <find_volume+0x13e>
 8006b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	3358      	adds	r3, #88	; 0x58
 8006b74:	443b      	add	r3, r7
 8006b76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <find_volume+0x15e>
 8006b82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b86:	f7ff fefd 	bl	8006984 <check_fs>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	e000      	b.n	8006b90 <find_volume+0x160>
 8006b8e:	2303      	movs	r3, #3
 8006b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d905      	bls.n	8006ba8 <find_volume+0x178>
 8006b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d9e2      	bls.n	8006b6e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d101      	bne.n	8006bb4 <find_volume+0x184>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e17e      	b.n	8006eb2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d901      	bls.n	8006bc0 <find_volume+0x190>
 8006bbc:	230d      	movs	r3, #13
 8006bbe:	e178      	b.n	8006eb2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	3330      	adds	r3, #48	; 0x30
 8006bc4:	330b      	adds	r3, #11
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fd14 	bl	80055f4 <ld_word>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd2:	d001      	beq.n	8006bd8 <find_volume+0x1a8>
 8006bd4:	230d      	movs	r3, #13
 8006bd6:	e16c      	b.n	8006eb2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	3330      	adds	r3, #48	; 0x30
 8006bdc:	3316      	adds	r3, #22
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fd08 	bl	80055f4 <ld_word>
 8006be4:	4603      	mov	r3, r0
 8006be6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <find_volume+0x1cc>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	3330      	adds	r3, #48	; 0x30
 8006bf2:	3324      	adds	r3, #36	; 0x24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fd15 	bl	8005624 <ld_dword>
 8006bfa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c00:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	789b      	ldrb	r3, [r3, #2]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d005      	beq.n	8006c20 <find_volume+0x1f0>
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	789b      	ldrb	r3, [r3, #2]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d001      	beq.n	8006c20 <find_volume+0x1f0>
 8006c1c:	230d      	movs	r3, #13
 8006c1e:	e148      	b.n	8006eb2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	789b      	ldrb	r3, [r3, #2]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <find_volume+0x224>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	895b      	ldrh	r3, [r3, #10]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	895b      	ldrh	r3, [r3, #10]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <find_volume+0x228>
 8006c54:	230d      	movs	r3, #13
 8006c56:	e12c      	b.n	8006eb2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	3330      	adds	r3, #48	; 0x30
 8006c5c:	3311      	adds	r3, #17
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fcc8 	bl	80055f4 <ld_word>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	891b      	ldrh	r3, [r3, #8]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <find_volume+0x24e>
 8006c7a:	230d      	movs	r3, #13
 8006c7c:	e119      	b.n	8006eb2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	3330      	adds	r3, #48	; 0x30
 8006c82:	3313      	adds	r3, #19
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fcb5 	bl	80055f4 <ld_word>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <find_volume+0x272>
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	3330      	adds	r3, #48	; 0x30
 8006c98:	3320      	adds	r3, #32
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fcc2 	bl	8005624 <ld_dword>
 8006ca0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	3330      	adds	r3, #48	; 0x30
 8006ca6:	330e      	adds	r3, #14
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe fca3 	bl	80055f4 <ld_word>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006cb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <find_volume+0x28c>
 8006cb8:	230d      	movs	r3, #13
 8006cba:	e0fa      	b.n	8006eb2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006cbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc0:	4413      	add	r3, r2
 8006cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cc4:	8912      	ldrh	r2, [r2, #8]
 8006cc6:	0912      	lsrs	r2, r2, #4
 8006cc8:	b292      	uxth	r2, r2
 8006cca:	4413      	add	r3, r2
 8006ccc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d204      	bcs.n	8006ce0 <find_volume+0x2b0>
 8006cd6:	230d      	movs	r3, #13
 8006cd8:	e0eb      	b.n	8006eb2 <find_volume+0x482>
 8006cda:	bf00      	nop
 8006cdc:	20000700 	.word	0x20000700
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce8:	8952      	ldrh	r2, [r2, #10]
 8006cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <find_volume+0x2ca>
 8006cf6:	230d      	movs	r3, #13
 8006cf8:	e0db      	b.n	8006eb2 <find_volume+0x482>
		fmt = FS_FAT32;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d802      	bhi.n	8006d10 <find_volume+0x2e0>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d802      	bhi.n	8006d20 <find_volume+0x2f0>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d2c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006d2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d32:	441a      	add	r2, r3
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006d38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	441a      	add	r2, r3
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006d42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d11e      	bne.n	8006d88 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	3330      	adds	r3, #48	; 0x30
 8006d4e:	332a      	adds	r3, #42	; 0x2a
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe fc4f 	bl	80055f4 <ld_word>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <find_volume+0x330>
 8006d5c:	230d      	movs	r3, #13
 8006d5e:	e0a8      	b.n	8006eb2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	891b      	ldrh	r3, [r3, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <find_volume+0x33c>
 8006d68:	230d      	movs	r3, #13
 8006d6a:	e0a2      	b.n	8006eb2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	3330      	adds	r3, #48	; 0x30
 8006d70:	332c      	adds	r3, #44	; 0x2c
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fc56 	bl	8005624 <ld_dword>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
 8006d86:	e01f      	b.n	8006dc8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	891b      	ldrh	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <find_volume+0x364>
 8006d90:	230d      	movs	r3, #13
 8006d92:	e08e      	b.n	8006eb2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	441a      	add	r2, r3
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d103      	bne.n	8006db0 <find_volume+0x380>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	e00a      	b.n	8006dc6 <find_volume+0x396>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	085a      	lsrs	r2, r3, #1
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006dc6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006dd2:	0a5b      	lsrs	r3, r3, #9
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d201      	bcs.n	8006ddc <find_volume+0x3ac>
 8006dd8:	230d      	movs	r3, #13
 8006dda:	e06a      	b.n	8006eb2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295
 8006de2:	611a      	str	r2, [r3, #16]
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	2280      	movs	r2, #128	; 0x80
 8006df0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006df2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d149      	bne.n	8006e8e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	3330      	adds	r3, #48	; 0x30
 8006dfe:	3330      	adds	r3, #48	; 0x30
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fbf7 	bl	80055f4 <ld_word>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d140      	bne.n	8006e8e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0e:	3301      	adds	r3, #1
 8006e10:	4619      	mov	r1, r3
 8006e12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e14:	f7fe fe9e 	bl	8005b54 <move_window>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d137      	bne.n	8006e8e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2200      	movs	r2, #0
 8006e22:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	3330      	adds	r3, #48	; 0x30
 8006e28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fbe1 	bl	80055f4 <ld_word>
 8006e32:	4603      	mov	r3, r0
 8006e34:	461a      	mov	r2, r3
 8006e36:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d127      	bne.n	8006e8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	3330      	adds	r3, #48	; 0x30
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fbee 	bl	8005624 <ld_dword>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <find_volume+0x48c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d11e      	bne.n	8006e8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	3330      	adds	r3, #48	; 0x30
 8006e54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fbe3 	bl	8005624 <ld_dword>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <find_volume+0x490>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d113      	bne.n	8006e8e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	3330      	adds	r3, #48	; 0x30
 8006e6a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fbd8 	bl	8005624 <ld_dword>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	3330      	adds	r3, #48	; 0x30
 8006e7e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fbce 	bl	8005624 <ld_dword>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006e94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <find_volume+0x494>)
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <find_volume+0x494>)
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <find_volume+0x494>)
 8006ea4:	881a      	ldrh	r2, [r3, #0]
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006eaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eac:	f7fe fdea 	bl	8005a84 <clear_lock>
#endif
	return FR_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3758      	adds	r7, #88	; 0x58
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	41615252 	.word	0x41615252
 8006ec0:	61417272 	.word	0x61417272
 8006ec4:	20000704 	.word	0x20000704

08006ec8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006ed2:	2309      	movs	r3, #9
 8006ed4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01c      	beq.n	8006f16 <validate+0x4e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d018      	beq.n	8006f16 <validate+0x4e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d013      	beq.n	8006f16 <validate+0x4e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	889a      	ldrh	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d10c      	bne.n	8006f16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fad8 	bl	80054b8 <disk_status>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <validate+0x4e>
			res = FR_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <validate+0x5a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	e000      	b.n	8006f24 <validate+0x5c>
 8006f22:	2300      	movs	r3, #0
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	6013      	str	r3, [r2, #0]
	return res;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006f46:	f107 0310 	add.w	r3, r7, #16
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fcd5 	bl	80068fa <get_ldnumber>
 8006f50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	da01      	bge.n	8006f5c <f_mount+0x28>
 8006f58:	230b      	movs	r3, #11
 8006f5a:	e02b      	b.n	8006fb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006f5c:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <f_mount+0x88>)
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006f6c:	69b8      	ldr	r0, [r7, #24]
 8006f6e:	f7fe fd89 	bl	8005a84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	490d      	ldr	r1, [pc, #52]	; (8006fbc <f_mount+0x88>)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <f_mount+0x66>
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d001      	beq.n	8006f9e <f_mount+0x6a>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e00a      	b.n	8006fb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f9e:	f107 010c 	add.w	r1, r7, #12
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fd41 	bl	8006a30 <find_volume>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000700 	.word	0x20000700

08006fc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b098      	sub	sp, #96	; 0x60
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <f_open+0x18>
 8006fd4:	2309      	movs	r3, #9
 8006fd6:	e1ad      	b.n	8007334 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006fe0:	79fa      	ldrb	r2, [r7, #7]
 8006fe2:	f107 0110 	add.w	r1, r7, #16
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fd20 	bl	8006a30 <find_volume>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 8191 	bne.w	8007322 <f_open+0x362>
		dj.obj.fs = fs;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	f107 0314 	add.w	r3, r7, #20
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fc03 	bl	8006818 <follow_path>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11a      	bne.n	8007056 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007020:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007024:	b25b      	sxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	da03      	bge.n	8007032 <f_open+0x72>
				res = FR_INVALID_NAME;
 800702a:	2306      	movs	r3, #6
 800702c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007030:	e011      	b.n	8007056 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	bf14      	ite	ne
 800703c:	2301      	movne	r3, #1
 800703e:	2300      	moveq	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	f107 0314 	add.w	r3, r7, #20
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fbd2 	bl	80057f4 <chk_lock>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	f003 031c 	and.w	r3, r3, #28
 800705c:	2b00      	cmp	r3, #0
 800705e:	d07f      	beq.n	8007160 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007064:	2b00      	cmp	r3, #0
 8007066:	d017      	beq.n	8007098 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800706c:	2b04      	cmp	r3, #4
 800706e:	d10e      	bne.n	800708e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007070:	f7fe fc1c 	bl	80058ac <enq_lock>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d006      	beq.n	8007088 <f_open+0xc8>
 800707a:	f107 0314 	add.w	r3, r7, #20
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fb03 	bl	800668a <dir_register>
 8007084:	4603      	mov	r3, r0
 8007086:	e000      	b.n	800708a <f_open+0xca>
 8007088:	2312      	movs	r3, #18
 800708a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	f043 0308 	orr.w	r3, r3, #8
 8007094:	71fb      	strb	r3, [r7, #7]
 8007096:	e010      	b.n	80070ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007098:	7ebb      	ldrb	r3, [r7, #26]
 800709a:	f003 0311 	and.w	r3, r3, #17
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <f_open+0xea>
					res = FR_DENIED;
 80070a2:	2307      	movs	r3, #7
 80070a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80070a8:	e007      	b.n	80070ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <f_open+0xfa>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80070ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d168      	bne.n	8007194 <f_open+0x1d4>
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d063      	beq.n	8007194 <f_open+0x1d4>
				dw = GET_FATTIME();
 80070cc:	f7fe f996 	bl	80053fc <get_fattime>
 80070d0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80070d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d4:	330e      	adds	r3, #14
 80070d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fae1 	bl	80056a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80070de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e0:	3316      	adds	r3, #22
 80070e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fadb 	bl	80056a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	330b      	adds	r3, #11
 80070ee:	2220      	movs	r2, #32
 80070f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fa32 	bl	8006562 <ld_clust>
 80070fe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007104:	2200      	movs	r2, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fa4a 	bl	80065a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800710c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710e:	331c      	adds	r3, #28
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fac4 	bl	80056a0 <st_dword>
					fs->wflag = 1;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2201      	movs	r2, #1
 800711c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800711e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d037      	beq.n	8007194 <f_open+0x1d4>
						dw = fs->winsect;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800712a:	f107 0314 	add.w	r3, r7, #20
 800712e:	2200      	movs	r2, #0
 8007130:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe ff5d 	bl	8005ff2 <remove_chain>
 8007138:	4603      	mov	r3, r0
 800713a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800713e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007142:	2b00      	cmp	r3, #0
 8007144:	d126      	bne.n	8007194 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fd02 	bl	8005b54 <move_window>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800715a:	3a01      	subs	r2, #1
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e019      	b.n	8007194 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007164:	2b00      	cmp	r3, #0
 8007166:	d115      	bne.n	8007194 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007168:	7ebb      	ldrb	r3, [r7, #26]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007172:	2304      	movs	r3, #4
 8007174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007178:	e00c      	b.n	8007194 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <f_open+0x1d4>
 8007184:	7ebb      	ldrb	r3, [r7, #26]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <f_open+0x1d4>
						res = FR_DENIED;
 800718e:	2307      	movs	r3, #7
 8007190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007198:	2b00      	cmp	r3, #0
 800719a:	d128      	bne.n	80071ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80071b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf14      	ite	ne
 80071c6:	2301      	movne	r3, #1
 80071c8:	2300      	moveq	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	f107 0314 	add.w	r3, r7, #20
 80071d2:	4611      	mov	r1, r2
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fb8b 	bl	80058f0 <inc_lock>
 80071da:	4602      	mov	r2, r0
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <f_open+0x22e>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80071ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 8095 	bne.w	8007322 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff f9af 	bl	8006562 <ld_clust>
 8007204:	4602      	mov	r2, r0
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	331c      	adds	r3, #28
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fa08 	bl	8005624 <ld_dword>
 8007214:	4602      	mov	r2, r0
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	88da      	ldrh	r2, [r3, #6]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	79fa      	ldrb	r2, [r7, #7]
 8007232:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3330      	adds	r3, #48	; 0x30
 800724a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe fa72 	bl	800573a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d060      	beq.n	8007322 <f_open+0x362>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d05c      	beq.n	8007322 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	895b      	ldrh	r3, [r3, #10]
 8007274:	025b      	lsls	r3, r3, #9
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	657b      	str	r3, [r7, #84]	; 0x54
 8007284:	e016      	b.n	80072b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fd1d 	bl	8005cca <get_fat>
 8007290:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007294:	2b01      	cmp	r3, #1
 8007296:	d802      	bhi.n	800729e <f_open+0x2de>
 8007298:	2302      	movs	r3, #2
 800729a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800729e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d102      	bne.n	80072ac <f_open+0x2ec>
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80072ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	657b      	str	r3, [r7, #84]	; 0x54
 80072b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <f_open+0x304>
 80072bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d8e0      	bhi.n	8007286 <f_open+0x2c6>
				}
				fp->clust = clst;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80072ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d127      	bne.n	8007322 <f_open+0x362>
 80072d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d022      	beq.n	8007322 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe fcd3 	bl	8005c8c <clust2sect>
 80072e6:	6478      	str	r0, [r7, #68]	; 0x44
 80072e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <f_open+0x336>
						res = FR_INT_ERR;
 80072ee:	2302      	movs	r3, #2
 80072f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072f4:	e015      	b.n	8007322 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f8:	0a5a      	lsrs	r2, r3, #9
 80072fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fc:	441a      	add	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	7858      	ldrb	r0, [r3, #1]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1a      	ldr	r2, [r3, #32]
 8007310:	2301      	movs	r3, #1
 8007312:	f7fe f911 	bl	8005538 <disk_read>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <f_open+0x362>
 800731c:	2301      	movs	r3, #1
 800731e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <f_open+0x370>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007334:	4618      	mov	r0, r3
 8007336:	3760      	adds	r7, #96	; 0x60
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	; 0x30
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f107 0210 	add.w	r2, r7, #16
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fdb3 	bl	8006ec8 <validate>
 8007362:	4603      	mov	r3, r0
 8007364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736c:	2b00      	cmp	r3, #0
 800736e:	d107      	bne.n	8007380 <f_write+0x44>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	7d5b      	ldrb	r3, [r3, #21]
 8007374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <f_write+0x4a>
 8007380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007384:	e14b      	b.n	800761e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	7d1b      	ldrb	r3, [r3, #20]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <f_write+0x5a>
 8007392:	2307      	movs	r3, #7
 8007394:	e143      	b.n	800761e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	441a      	add	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	f080 812d 	bcs.w	8007602 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073b0:	e127      	b.n	8007602 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80e3 	bne.w	8007586 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	0a5b      	lsrs	r3, r3, #9
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	8952      	ldrh	r2, [r2, #10]
 80073ca:	3a01      	subs	r2, #1
 80073cc:	4013      	ands	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d143      	bne.n	800745e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10c      	bne.n	80073f8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d11a      	bne.n	8007420 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fe64 	bl	80060bc <create_chain>
 80073f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80073f6:	e013      	b.n	8007420 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	4619      	mov	r1, r3
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7fe fef0 	bl	80061ec <clmt_clust>
 800740c:	62b8      	str	r0, [r7, #40]	; 0x28
 800740e:	e007      	b.n	8007420 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f7fe fe4f 	bl	80060bc <create_chain>
 800741e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80f2 	beq.w	800760c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	2b01      	cmp	r3, #1
 800742c:	d104      	bne.n	8007438 <f_write+0xfc>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2202      	movs	r2, #2
 8007432:	755a      	strb	r2, [r3, #21]
 8007434:	2302      	movs	r3, #2
 8007436:	e0f2      	b.n	800761e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d104      	bne.n	800744a <f_write+0x10e>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	755a      	strb	r2, [r3, #21]
 8007446:	2301      	movs	r3, #1
 8007448:	e0e9      	b.n	800761e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800744e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <f_write+0x122>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800745c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	7d1b      	ldrb	r3, [r3, #20]
 8007462:	b25b      	sxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	da18      	bge.n	800749a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	7858      	ldrb	r0, [r3, #1]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	2301      	movs	r3, #1
 8007478:	f7fe f87e 	bl	8005578 <disk_write>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <f_write+0x150>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	755a      	strb	r2, [r3, #21]
 8007488:	2301      	movs	r3, #1
 800748a:	e0c8      	b.n	800761e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	7d1b      	ldrb	r3, [r3, #20]
 8007490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007494:	b2da      	uxtb	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe fbf2 	bl	8005c8c <clust2sect>
 80074a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <f_write+0x17e>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2202      	movs	r2, #2
 80074b4:	755a      	strb	r2, [r3, #21]
 80074b6:	2302      	movs	r3, #2
 80074b8:	e0b1      	b.n	800761e <f_write+0x2e2>
			sect += csect;
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	4413      	add	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	0a5b      	lsrs	r3, r3, #9
 80074c6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d03c      	beq.n	8007548 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	4413      	add	r3, r2
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	8952      	ldrh	r2, [r2, #10]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d905      	bls.n	80074e8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	895b      	ldrh	r3, [r3, #10]
 80074e0:	461a      	mov	r2, r3
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	7858      	ldrb	r0, [r3, #1]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	69f9      	ldr	r1, [r7, #28]
 80074f2:	f7fe f841 	bl	8005578 <disk_write>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <f_write+0x1ca>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	755a      	strb	r2, [r3, #21]
 8007502:	2301      	movs	r3, #1
 8007504:	e08b      	b.n	800761e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	6a3a      	ldr	r2, [r7, #32]
 8007510:	429a      	cmp	r2, r3
 8007512:	d915      	bls.n	8007540 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	025b      	lsls	r3, r3, #9
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	4413      	add	r3, r2
 8007528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800752c:	4619      	mov	r1, r3
 800752e:	f7fe f8e3 	bl	80056f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	7d1b      	ldrb	r3, [r3, #20]
 8007536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753a:	b2da      	uxtb	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	025b      	lsls	r3, r3, #9
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007546:	e03f      	b.n	80075c8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	429a      	cmp	r2, r3
 8007550:	d016      	beq.n	8007580 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800755a:	429a      	cmp	r2, r3
 800755c:	d210      	bcs.n	8007580 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	7858      	ldrb	r0, [r3, #1]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007568:	2301      	movs	r3, #1
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	f7fd ffe4 	bl	8005538 <disk_read>
 8007570:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	755a      	strb	r2, [r3, #21]
 800757c:	2301      	movs	r3, #1
 800757e:	e04e      	b.n	800761e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d901      	bls.n	80075a0 <f_write+0x264>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	4413      	add	r3, r2
 80075b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b2:	69f9      	ldr	r1, [r7, #28]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe f89f 	bl	80056f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	7d1b      	ldrb	r3, [r3, #20]
 80075be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	4413      	add	r3, r2
 80075ce:	61fb      	str	r3, [r7, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	619a      	str	r2, [r3, #24]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	bf38      	it	cc
 80075e8:	461a      	movcc	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	441a      	add	r2, r3
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f aed4 	bne.w	80073b2 <f_write+0x76>
 800760a:	e000      	b.n	800760e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800760c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	7d1b      	ldrb	r3, [r3, #20]
 8007612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007616:	b2da      	uxtb	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3730      	adds	r7, #48	; 0x30
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f107 0208 	add.w	r2, r7, #8
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fc46 	bl	8006ec8 <validate>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d168      	bne.n	8007718 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7d1b      	ldrb	r3, [r3, #20]
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d062      	beq.n	8007718 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7d1b      	ldrb	r3, [r3, #20]
 8007656:	b25b      	sxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	da15      	bge.n	8007688 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	7858      	ldrb	r0, [r3, #1]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1a      	ldr	r2, [r3, #32]
 800766a:	2301      	movs	r3, #1
 800766c:	f7fd ff84 	bl	8005578 <disk_write>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <f_sync+0x54>
 8007676:	2301      	movs	r3, #1
 8007678:	e04f      	b.n	800771a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7d1b      	ldrb	r3, [r3, #20]
 800767e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007682:	b2da      	uxtb	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007688:	f7fd feb8 	bl	80053fc <get_fattime>
 800768c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7fe fa5c 	bl	8005b54 <move_window>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d138      	bne.n	8007718 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	330b      	adds	r3, #11
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	330b      	adds	r3, #11
 80076b6:	f042 0220 	orr.w	r2, r2, #32
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	461a      	mov	r2, r3
 80076c8:	68f9      	ldr	r1, [r7, #12]
 80076ca:	f7fe ff69 	bl	80065a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f103 021c 	add.w	r2, r3, #28
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fd ffe0 	bl	80056a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3316      	adds	r3, #22
 80076e4:	6939      	ldr	r1, [r7, #16]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd ffda 	bl	80056a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3312      	adds	r3, #18
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd ffb9 	bl	800566a <st_word>
					fs->wflag = 1;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2201      	movs	r2, #1
 80076fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fa55 	bl	8005bb0 <sync_fs>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7d1b      	ldrb	r3, [r3, #20]
 800770e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007712:	b2da      	uxtb	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007718:	7dfb      	ldrb	r3, [r7, #23]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff ff7b 	bl	8007626 <f_sync>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d118      	bne.n	800776c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f107 0208 	add.w	r2, r7, #8
 8007740:	4611      	mov	r1, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fbc0 	bl	8006ec8 <validate>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10c      	bne.n	800776c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe f958 	bl	8005a0c <dec_lock>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800778e:	4b1f      	ldr	r3, [pc, #124]	; (800780c <FATFS_LinkDriverEx+0x94>)
 8007790:	7a5b      	ldrb	r3, [r3, #9]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d131      	bne.n	80077fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007798:	4b1c      	ldr	r3, [pc, #112]	; (800780c <FATFS_LinkDriverEx+0x94>)
 800779a:	7a5b      	ldrb	r3, [r3, #9]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077a2:	2100      	movs	r1, #0
 80077a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077a6:	4b19      	ldr	r3, [pc, #100]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077a8:	7a5b      	ldrb	r3, [r3, #9]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4a17      	ldr	r2, [pc, #92]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077b6:	4b15      	ldr	r3, [pc, #84]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077b8:	7a5b      	ldrb	r3, [r3, #9]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077c0:	4413      	add	r3, r2
 80077c2:	79fa      	ldrb	r2, [r7, #7]
 80077c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077c6:	4b11      	ldr	r3, [pc, #68]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077c8:	7a5b      	ldrb	r3, [r3, #9]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	b2d1      	uxtb	r1, r2
 80077d0:	4a0e      	ldr	r2, [pc, #56]	; (800780c <FATFS_LinkDriverEx+0x94>)
 80077d2:	7251      	strb	r1, [r2, #9]
 80077d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80077d6:	7dbb      	ldrb	r3, [r7, #22]
 80077d8:	3330      	adds	r3, #48	; 0x30
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	3301      	adds	r3, #1
 80077e4:	223a      	movs	r2, #58	; 0x3a
 80077e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	3302      	adds	r3, #2
 80077ec:	222f      	movs	r2, #47	; 0x2f
 80077ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	3303      	adds	r3, #3
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20000728 	.word	0x20000728

08007810 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800781a:	2200      	movs	r2, #0
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff ffaa 	bl	8007778 <FATFS_LinkDriverEx>
 8007824:	4603      	mov	r3, r0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <__errno>:
 8007830:	4b01      	ldr	r3, [pc, #4]	; (8007838 <__errno+0x8>)
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	2000002c 	.word	0x2000002c

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	4d0d      	ldr	r5, [pc, #52]	; (8007874 <__libc_init_array+0x38>)
 8007840:	4c0d      	ldr	r4, [pc, #52]	; (8007878 <__libc_init_array+0x3c>)
 8007842:	1b64      	subs	r4, r4, r5
 8007844:	10a4      	asrs	r4, r4, #2
 8007846:	2600      	movs	r6, #0
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	4d0b      	ldr	r5, [pc, #44]	; (800787c <__libc_init_array+0x40>)
 800784e:	4c0c      	ldr	r4, [pc, #48]	; (8007880 <__libc_init_array+0x44>)
 8007850:	f001 fa70 	bl	8008d34 <_init>
 8007854:	1b64      	subs	r4, r4, r5
 8007856:	10a4      	asrs	r4, r4, #2
 8007858:	2600      	movs	r6, #0
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	08009e20 	.word	0x08009e20
 8007878:	08009e20 	.word	0x08009e20
 800787c:	08009e20 	.word	0x08009e20
 8007880:	08009e24 	.word	0x08009e24

08007884 <__itoa>:
 8007884:	1e93      	subs	r3, r2, #2
 8007886:	2b22      	cmp	r3, #34	; 0x22
 8007888:	b510      	push	{r4, lr}
 800788a:	460c      	mov	r4, r1
 800788c:	d904      	bls.n	8007898 <__itoa+0x14>
 800788e:	2300      	movs	r3, #0
 8007890:	700b      	strb	r3, [r1, #0]
 8007892:	461c      	mov	r4, r3
 8007894:	4620      	mov	r0, r4
 8007896:	bd10      	pop	{r4, pc}
 8007898:	2a0a      	cmp	r2, #10
 800789a:	d109      	bne.n	80078b0 <__itoa+0x2c>
 800789c:	2800      	cmp	r0, #0
 800789e:	da07      	bge.n	80078b0 <__itoa+0x2c>
 80078a0:	232d      	movs	r3, #45	; 0x2d
 80078a2:	700b      	strb	r3, [r1, #0]
 80078a4:	4240      	negs	r0, r0
 80078a6:	2101      	movs	r1, #1
 80078a8:	4421      	add	r1, r4
 80078aa:	f000 f90d 	bl	8007ac8 <__utoa>
 80078ae:	e7f1      	b.n	8007894 <__itoa+0x10>
 80078b0:	2100      	movs	r1, #0
 80078b2:	e7f9      	b.n	80078a8 <__itoa+0x24>

080078b4 <itoa>:
 80078b4:	f7ff bfe6 	b.w	8007884 <__itoa>

080078b8 <malloc>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <malloc+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f000 b87f 	b.w	80079c0 <_malloc_r>
 80078c2:	bf00      	nop
 80078c4:	2000002c 	.word	0x2000002c

080078c8 <free>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <free+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f000 b80b 	b.w	80078e8 <_free_r>
 80078d2:	bf00      	nop
 80078d4:	2000002c 	.word	0x2000002c

080078d8 <memset>:
 80078d8:	4402      	add	r2, r0
 80078da:	4603      	mov	r3, r0
 80078dc:	4293      	cmp	r3, r2
 80078de:	d100      	bne.n	80078e2 <memset+0xa>
 80078e0:	4770      	bx	lr
 80078e2:	f803 1b01 	strb.w	r1, [r3], #1
 80078e6:	e7f9      	b.n	80078dc <memset+0x4>

080078e8 <_free_r>:
 80078e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ea:	2900      	cmp	r1, #0
 80078ec:	d044      	beq.n	8007978 <_free_r+0x90>
 80078ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f2:	9001      	str	r0, [sp, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f1a1 0404 	sub.w	r4, r1, #4
 80078fa:	bfb8      	it	lt
 80078fc:	18e4      	addlt	r4, r4, r3
 80078fe:	f000 f925 	bl	8007b4c <__malloc_lock>
 8007902:	4a1e      	ldr	r2, [pc, #120]	; (800797c <_free_r+0x94>)
 8007904:	9801      	ldr	r0, [sp, #4]
 8007906:	6813      	ldr	r3, [r2, #0]
 8007908:	b933      	cbnz	r3, 8007918 <_free_r+0x30>
 800790a:	6063      	str	r3, [r4, #4]
 800790c:	6014      	str	r4, [r2, #0]
 800790e:	b003      	add	sp, #12
 8007910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007914:	f000 b920 	b.w	8007b58 <__malloc_unlock>
 8007918:	42a3      	cmp	r3, r4
 800791a:	d908      	bls.n	800792e <_free_r+0x46>
 800791c:	6825      	ldr	r5, [r4, #0]
 800791e:	1961      	adds	r1, r4, r5
 8007920:	428b      	cmp	r3, r1
 8007922:	bf01      	itttt	eq
 8007924:	6819      	ldreq	r1, [r3, #0]
 8007926:	685b      	ldreq	r3, [r3, #4]
 8007928:	1949      	addeq	r1, r1, r5
 800792a:	6021      	streq	r1, [r4, #0]
 800792c:	e7ed      	b.n	800790a <_free_r+0x22>
 800792e:	461a      	mov	r2, r3
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	b10b      	cbz	r3, 8007938 <_free_r+0x50>
 8007934:	42a3      	cmp	r3, r4
 8007936:	d9fa      	bls.n	800792e <_free_r+0x46>
 8007938:	6811      	ldr	r1, [r2, #0]
 800793a:	1855      	adds	r5, r2, r1
 800793c:	42a5      	cmp	r5, r4
 800793e:	d10b      	bne.n	8007958 <_free_r+0x70>
 8007940:	6824      	ldr	r4, [r4, #0]
 8007942:	4421      	add	r1, r4
 8007944:	1854      	adds	r4, r2, r1
 8007946:	42a3      	cmp	r3, r4
 8007948:	6011      	str	r1, [r2, #0]
 800794a:	d1e0      	bne.n	800790e <_free_r+0x26>
 800794c:	681c      	ldr	r4, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	6053      	str	r3, [r2, #4]
 8007952:	4421      	add	r1, r4
 8007954:	6011      	str	r1, [r2, #0]
 8007956:	e7da      	b.n	800790e <_free_r+0x26>
 8007958:	d902      	bls.n	8007960 <_free_r+0x78>
 800795a:	230c      	movs	r3, #12
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	e7d6      	b.n	800790e <_free_r+0x26>
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	1961      	adds	r1, r4, r5
 8007964:	428b      	cmp	r3, r1
 8007966:	bf04      	itt	eq
 8007968:	6819      	ldreq	r1, [r3, #0]
 800796a:	685b      	ldreq	r3, [r3, #4]
 800796c:	6063      	str	r3, [r4, #4]
 800796e:	bf04      	itt	eq
 8007970:	1949      	addeq	r1, r1, r5
 8007972:	6021      	streq	r1, [r4, #0]
 8007974:	6054      	str	r4, [r2, #4]
 8007976:	e7ca      	b.n	800790e <_free_r+0x26>
 8007978:	b003      	add	sp, #12
 800797a:	bd30      	pop	{r4, r5, pc}
 800797c:	20000734 	.word	0x20000734

08007980 <sbrk_aligned>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4e0e      	ldr	r6, [pc, #56]	; (80079bc <sbrk_aligned+0x3c>)
 8007984:	460c      	mov	r4, r1
 8007986:	6831      	ldr	r1, [r6, #0]
 8007988:	4605      	mov	r5, r0
 800798a:	b911      	cbnz	r1, 8007992 <sbrk_aligned+0x12>
 800798c:	f000 f88c 	bl	8007aa8 <_sbrk_r>
 8007990:	6030      	str	r0, [r6, #0]
 8007992:	4621      	mov	r1, r4
 8007994:	4628      	mov	r0, r5
 8007996:	f000 f887 	bl	8007aa8 <_sbrk_r>
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	d00a      	beq.n	80079b4 <sbrk_aligned+0x34>
 800799e:	1cc4      	adds	r4, r0, #3
 80079a0:	f024 0403 	bic.w	r4, r4, #3
 80079a4:	42a0      	cmp	r0, r4
 80079a6:	d007      	beq.n	80079b8 <sbrk_aligned+0x38>
 80079a8:	1a21      	subs	r1, r4, r0
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 f87c 	bl	8007aa8 <_sbrk_r>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d101      	bne.n	80079b8 <sbrk_aligned+0x38>
 80079b4:	f04f 34ff 	mov.w	r4, #4294967295
 80079b8:	4620      	mov	r0, r4
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	20000738 	.word	0x20000738

080079c0 <_malloc_r>:
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	1ccd      	adds	r5, r1, #3
 80079c6:	f025 0503 	bic.w	r5, r5, #3
 80079ca:	3508      	adds	r5, #8
 80079cc:	2d0c      	cmp	r5, #12
 80079ce:	bf38      	it	cc
 80079d0:	250c      	movcc	r5, #12
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	4607      	mov	r7, r0
 80079d6:	db01      	blt.n	80079dc <_malloc_r+0x1c>
 80079d8:	42a9      	cmp	r1, r5
 80079da:	d905      	bls.n	80079e8 <_malloc_r+0x28>
 80079dc:	230c      	movs	r3, #12
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	2600      	movs	r6, #0
 80079e2:	4630      	mov	r0, r6
 80079e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e8:	4e2e      	ldr	r6, [pc, #184]	; (8007aa4 <_malloc_r+0xe4>)
 80079ea:	f000 f8af 	bl	8007b4c <__malloc_lock>
 80079ee:	6833      	ldr	r3, [r6, #0]
 80079f0:	461c      	mov	r4, r3
 80079f2:	bb34      	cbnz	r4, 8007a42 <_malloc_r+0x82>
 80079f4:	4629      	mov	r1, r5
 80079f6:	4638      	mov	r0, r7
 80079f8:	f7ff ffc2 	bl	8007980 <sbrk_aligned>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	4604      	mov	r4, r0
 8007a00:	d14d      	bne.n	8007a9e <_malloc_r+0xde>
 8007a02:	6834      	ldr	r4, [r6, #0]
 8007a04:	4626      	mov	r6, r4
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	d140      	bne.n	8007a8c <_malloc_r+0xcc>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4638      	mov	r0, r7
 8007a10:	eb04 0803 	add.w	r8, r4, r3
 8007a14:	f000 f848 	bl	8007aa8 <_sbrk_r>
 8007a18:	4580      	cmp	r8, r0
 8007a1a:	d13a      	bne.n	8007a92 <_malloc_r+0xd2>
 8007a1c:	6821      	ldr	r1, [r4, #0]
 8007a1e:	3503      	adds	r5, #3
 8007a20:	1a6d      	subs	r5, r5, r1
 8007a22:	f025 0503 	bic.w	r5, r5, #3
 8007a26:	3508      	adds	r5, #8
 8007a28:	2d0c      	cmp	r5, #12
 8007a2a:	bf38      	it	cc
 8007a2c:	250c      	movcc	r5, #12
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4638      	mov	r0, r7
 8007a32:	f7ff ffa5 	bl	8007980 <sbrk_aligned>
 8007a36:	3001      	adds	r0, #1
 8007a38:	d02b      	beq.n	8007a92 <_malloc_r+0xd2>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	442b      	add	r3, r5
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	e00e      	b.n	8007a60 <_malloc_r+0xa0>
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	1b52      	subs	r2, r2, r5
 8007a46:	d41e      	bmi.n	8007a86 <_malloc_r+0xc6>
 8007a48:	2a0b      	cmp	r2, #11
 8007a4a:	d916      	bls.n	8007a7a <_malloc_r+0xba>
 8007a4c:	1961      	adds	r1, r4, r5
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	6025      	str	r5, [r4, #0]
 8007a52:	bf18      	it	ne
 8007a54:	6059      	strne	r1, [r3, #4]
 8007a56:	6863      	ldr	r3, [r4, #4]
 8007a58:	bf08      	it	eq
 8007a5a:	6031      	streq	r1, [r6, #0]
 8007a5c:	5162      	str	r2, [r4, r5]
 8007a5e:	604b      	str	r3, [r1, #4]
 8007a60:	4638      	mov	r0, r7
 8007a62:	f104 060b 	add.w	r6, r4, #11
 8007a66:	f000 f877 	bl	8007b58 <__malloc_unlock>
 8007a6a:	f026 0607 	bic.w	r6, r6, #7
 8007a6e:	1d23      	adds	r3, r4, #4
 8007a70:	1af2      	subs	r2, r6, r3
 8007a72:	d0b6      	beq.n	80079e2 <_malloc_r+0x22>
 8007a74:	1b9b      	subs	r3, r3, r6
 8007a76:	50a3      	str	r3, [r4, r2]
 8007a78:	e7b3      	b.n	80079e2 <_malloc_r+0x22>
 8007a7a:	6862      	ldr	r2, [r4, #4]
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	bf0c      	ite	eq
 8007a80:	6032      	streq	r2, [r6, #0]
 8007a82:	605a      	strne	r2, [r3, #4]
 8007a84:	e7ec      	b.n	8007a60 <_malloc_r+0xa0>
 8007a86:	4623      	mov	r3, r4
 8007a88:	6864      	ldr	r4, [r4, #4]
 8007a8a:	e7b2      	b.n	80079f2 <_malloc_r+0x32>
 8007a8c:	4634      	mov	r4, r6
 8007a8e:	6876      	ldr	r6, [r6, #4]
 8007a90:	e7b9      	b.n	8007a06 <_malloc_r+0x46>
 8007a92:	230c      	movs	r3, #12
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	4638      	mov	r0, r7
 8007a98:	f000 f85e 	bl	8007b58 <__malloc_unlock>
 8007a9c:	e7a1      	b.n	80079e2 <_malloc_r+0x22>
 8007a9e:	6025      	str	r5, [r4, #0]
 8007aa0:	e7de      	b.n	8007a60 <_malloc_r+0xa0>
 8007aa2:	bf00      	nop
 8007aa4:	20000734 	.word	0x20000734

08007aa8 <_sbrk_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d06      	ldr	r5, [pc, #24]	; (8007ac4 <_sbrk_r+0x1c>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	f7fa fca8 	bl	8002408 <_sbrk>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_sbrk_r+0x1a>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_sbrk_r+0x1a>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	2000073c 	.word	0x2000073c

08007ac8 <__utoa>:
 8007ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aca:	4c1f      	ldr	r4, [pc, #124]	; (8007b48 <__utoa+0x80>)
 8007acc:	b08b      	sub	sp, #44	; 0x2c
 8007ace:	4605      	mov	r5, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	466e      	mov	r6, sp
 8007ad4:	f104 0c20 	add.w	ip, r4, #32
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	6861      	ldr	r1, [r4, #4]
 8007adc:	4637      	mov	r7, r6
 8007ade:	c703      	stmia	r7!, {r0, r1}
 8007ae0:	3408      	adds	r4, #8
 8007ae2:	4564      	cmp	r4, ip
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	d1f7      	bne.n	8007ad8 <__utoa+0x10>
 8007ae8:	7921      	ldrb	r1, [r4, #4]
 8007aea:	7139      	strb	r1, [r7, #4]
 8007aec:	1e91      	subs	r1, r2, #2
 8007aee:	6820      	ldr	r0, [r4, #0]
 8007af0:	6038      	str	r0, [r7, #0]
 8007af2:	2922      	cmp	r1, #34	; 0x22
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	d904      	bls.n	8007b04 <__utoa+0x3c>
 8007afa:	7019      	strb	r1, [r3, #0]
 8007afc:	460b      	mov	r3, r1
 8007afe:	4618      	mov	r0, r3
 8007b00:	b00b      	add	sp, #44	; 0x2c
 8007b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b04:	1e58      	subs	r0, r3, #1
 8007b06:	4684      	mov	ip, r0
 8007b08:	fbb5 f7f2 	udiv	r7, r5, r2
 8007b0c:	fb02 5617 	mls	r6, r2, r7, r5
 8007b10:	3628      	adds	r6, #40	; 0x28
 8007b12:	446e      	add	r6, sp
 8007b14:	460c      	mov	r4, r1
 8007b16:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007b1a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007b1e:	462e      	mov	r6, r5
 8007b20:	42b2      	cmp	r2, r6
 8007b22:	f101 0101 	add.w	r1, r1, #1
 8007b26:	463d      	mov	r5, r7
 8007b28:	d9ee      	bls.n	8007b08 <__utoa+0x40>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	545a      	strb	r2, [r3, r1]
 8007b2e:	1919      	adds	r1, r3, r4
 8007b30:	1aa5      	subs	r5, r4, r2
 8007b32:	42aa      	cmp	r2, r5
 8007b34:	dae3      	bge.n	8007afe <__utoa+0x36>
 8007b36:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007b3a:	780e      	ldrb	r6, [r1, #0]
 8007b3c:	7006      	strb	r6, [r0, #0]
 8007b3e:	3201      	adds	r2, #1
 8007b40:	f801 5901 	strb.w	r5, [r1], #-1
 8007b44:	e7f4      	b.n	8007b30 <__utoa+0x68>
 8007b46:	bf00      	nop
 8007b48:	08009c14 	.word	0x08009c14

08007b4c <__malloc_lock>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__malloc_lock+0x8>)
 8007b4e:	f000 b809 	b.w	8007b64 <__retarget_lock_acquire_recursive>
 8007b52:	bf00      	nop
 8007b54:	20000740 	.word	0x20000740

08007b58 <__malloc_unlock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__malloc_unlock+0x8>)
 8007b5a:	f000 b804 	b.w	8007b66 <__retarget_lock_release_recursive>
 8007b5e:	bf00      	nop
 8007b60:	20000740 	.word	0x20000740

08007b64 <__retarget_lock_acquire_recursive>:
 8007b64:	4770      	bx	lr

08007b66 <__retarget_lock_release_recursive>:
 8007b66:	4770      	bx	lr

08007b68 <cos>:
 8007b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b6a:	ec53 2b10 	vmov	r2, r3, d0
 8007b6e:	4826      	ldr	r0, [pc, #152]	; (8007c08 <cos+0xa0>)
 8007b70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b74:	4281      	cmp	r1, r0
 8007b76:	dc06      	bgt.n	8007b86 <cos+0x1e>
 8007b78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007c00 <cos+0x98>
 8007b7c:	b005      	add	sp, #20
 8007b7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b82:	f000 baf1 	b.w	8008168 <__kernel_cos>
 8007b86:	4821      	ldr	r0, [pc, #132]	; (8007c0c <cos+0xa4>)
 8007b88:	4281      	cmp	r1, r0
 8007b8a:	dd09      	ble.n	8007ba0 <cos+0x38>
 8007b8c:	ee10 0a10 	vmov	r0, s0
 8007b90:	4619      	mov	r1, r3
 8007b92:	f7f8 fb25 	bl	80001e0 <__aeabi_dsub>
 8007b96:	ec41 0b10 	vmov	d0, r0, r1
 8007b9a:	b005      	add	sp, #20
 8007b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ba0:	4668      	mov	r0, sp
 8007ba2:	f000 f8d5 	bl	8007d50 <__ieee754_rem_pio2>
 8007ba6:	f000 0003 	and.w	r0, r0, #3
 8007baa:	2801      	cmp	r0, #1
 8007bac:	d00b      	beq.n	8007bc6 <cos+0x5e>
 8007bae:	2802      	cmp	r0, #2
 8007bb0:	d016      	beq.n	8007be0 <cos+0x78>
 8007bb2:	b9e0      	cbnz	r0, 8007bee <cos+0x86>
 8007bb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bb8:	ed9d 0b00 	vldr	d0, [sp]
 8007bbc:	f000 fad4 	bl	8008168 <__kernel_cos>
 8007bc0:	ec51 0b10 	vmov	r0, r1, d0
 8007bc4:	e7e7      	b.n	8007b96 <cos+0x2e>
 8007bc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bca:	ed9d 0b00 	vldr	d0, [sp]
 8007bce:	f000 fee3 	bl	8008998 <__kernel_sin>
 8007bd2:	ec53 2b10 	vmov	r2, r3, d0
 8007bd6:	ee10 0a10 	vmov	r0, s0
 8007bda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007bde:	e7da      	b.n	8007b96 <cos+0x2e>
 8007be0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007be4:	ed9d 0b00 	vldr	d0, [sp]
 8007be8:	f000 fabe 	bl	8008168 <__kernel_cos>
 8007bec:	e7f1      	b.n	8007bd2 <cos+0x6a>
 8007bee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bf2:	ed9d 0b00 	vldr	d0, [sp]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f000 fece 	bl	8008998 <__kernel_sin>
 8007bfc:	e7e0      	b.n	8007bc0 <cos+0x58>
 8007bfe:	bf00      	nop
	...
 8007c08:	3fe921fb 	.word	0x3fe921fb
 8007c0c:	7fefffff 	.word	0x7fefffff

08007c10 <round>:
 8007c10:	ec51 0b10 	vmov	r0, r1, d0
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007c1a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007c1e:	2c13      	cmp	r4, #19
 8007c20:	ee10 2a10 	vmov	r2, s0
 8007c24:	460b      	mov	r3, r1
 8007c26:	dc19      	bgt.n	8007c5c <round+0x4c>
 8007c28:	2c00      	cmp	r4, #0
 8007c2a:	da09      	bge.n	8007c40 <round+0x30>
 8007c2c:	3401      	adds	r4, #1
 8007c2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007c32:	d103      	bne.n	8007c3c <round+0x2c>
 8007c34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	e028      	b.n	8007c92 <round+0x82>
 8007c40:	4d15      	ldr	r5, [pc, #84]	; (8007c98 <round+0x88>)
 8007c42:	4125      	asrs	r5, r4
 8007c44:	ea01 0605 	and.w	r6, r1, r5
 8007c48:	4332      	orrs	r2, r6
 8007c4a:	d00e      	beq.n	8007c6a <round+0x5a>
 8007c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c50:	fa42 f404 	asr.w	r4, r2, r4
 8007c54:	4423      	add	r3, r4
 8007c56:	ea23 0305 	bic.w	r3, r3, r5
 8007c5a:	e7ef      	b.n	8007c3c <round+0x2c>
 8007c5c:	2c33      	cmp	r4, #51	; 0x33
 8007c5e:	dd07      	ble.n	8007c70 <round+0x60>
 8007c60:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007c64:	d101      	bne.n	8007c6a <round+0x5a>
 8007c66:	f7f8 fabd 	bl	80001e4 <__adddf3>
 8007c6a:	ec41 0b10 	vmov	d0, r0, r1
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007c74:	f04f 35ff 	mov.w	r5, #4294967295
 8007c78:	40f5      	lsrs	r5, r6
 8007c7a:	4228      	tst	r0, r5
 8007c7c:	d0f5      	beq.n	8007c6a <round+0x5a>
 8007c7e:	2101      	movs	r1, #1
 8007c80:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007c84:	fa01 f404 	lsl.w	r4, r1, r4
 8007c88:	1912      	adds	r2, r2, r4
 8007c8a:	bf28      	it	cs
 8007c8c:	185b      	addcs	r3, r3, r1
 8007c8e:	ea22 0205 	bic.w	r2, r2, r5
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	e7e8      	b.n	8007c6a <round+0x5a>
 8007c98:	000fffff 	.word	0x000fffff
 8007c9c:	00000000 	.word	0x00000000

08007ca0 <sin>:
 8007ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ca2:	ec53 2b10 	vmov	r2, r3, d0
 8007ca6:	4828      	ldr	r0, [pc, #160]	; (8007d48 <sin+0xa8>)
 8007ca8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cac:	4281      	cmp	r1, r0
 8007cae:	dc07      	bgt.n	8007cc0 <sin+0x20>
 8007cb0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007d40 <sin+0xa0>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	b005      	add	sp, #20
 8007cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cbc:	f000 be6c 	b.w	8008998 <__kernel_sin>
 8007cc0:	4822      	ldr	r0, [pc, #136]	; (8007d4c <sin+0xac>)
 8007cc2:	4281      	cmp	r1, r0
 8007cc4:	dd09      	ble.n	8007cda <sin+0x3a>
 8007cc6:	ee10 0a10 	vmov	r0, s0
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f7f8 fa88 	bl	80001e0 <__aeabi_dsub>
 8007cd0:	ec41 0b10 	vmov	d0, r0, r1
 8007cd4:	b005      	add	sp, #20
 8007cd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cda:	4668      	mov	r0, sp
 8007cdc:	f000 f838 	bl	8007d50 <__ieee754_rem_pio2>
 8007ce0:	f000 0003 	and.w	r0, r0, #3
 8007ce4:	2801      	cmp	r0, #1
 8007ce6:	d00c      	beq.n	8007d02 <sin+0x62>
 8007ce8:	2802      	cmp	r0, #2
 8007cea:	d011      	beq.n	8007d10 <sin+0x70>
 8007cec:	b9f0      	cbnz	r0, 8007d2c <sin+0x8c>
 8007cee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cf2:	ed9d 0b00 	vldr	d0, [sp]
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	f000 fe4e 	bl	8008998 <__kernel_sin>
 8007cfc:	ec51 0b10 	vmov	r0, r1, d0
 8007d00:	e7e6      	b.n	8007cd0 <sin+0x30>
 8007d02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d06:	ed9d 0b00 	vldr	d0, [sp]
 8007d0a:	f000 fa2d 	bl	8008168 <__kernel_cos>
 8007d0e:	e7f5      	b.n	8007cfc <sin+0x5c>
 8007d10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d14:	ed9d 0b00 	vldr	d0, [sp]
 8007d18:	2001      	movs	r0, #1
 8007d1a:	f000 fe3d 	bl	8008998 <__kernel_sin>
 8007d1e:	ec53 2b10 	vmov	r2, r3, d0
 8007d22:	ee10 0a10 	vmov	r0, s0
 8007d26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d2a:	e7d1      	b.n	8007cd0 <sin+0x30>
 8007d2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d30:	ed9d 0b00 	vldr	d0, [sp]
 8007d34:	f000 fa18 	bl	8008168 <__kernel_cos>
 8007d38:	e7f1      	b.n	8007d1e <sin+0x7e>
 8007d3a:	bf00      	nop
 8007d3c:	f3af 8000 	nop.w
	...
 8007d48:	3fe921fb 	.word	0x3fe921fb
 8007d4c:	7fefffff 	.word	0x7fefffff

08007d50 <__ieee754_rem_pio2>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	ed2d 8b02 	vpush	{d8}
 8007d58:	ec55 4b10 	vmov	r4, r5, d0
 8007d5c:	4bca      	ldr	r3, [pc, #808]	; (8008088 <__ieee754_rem_pio2+0x338>)
 8007d5e:	b08b      	sub	sp, #44	; 0x2c
 8007d60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007d64:	4598      	cmp	r8, r3
 8007d66:	4682      	mov	sl, r0
 8007d68:	9502      	str	r5, [sp, #8]
 8007d6a:	dc08      	bgt.n	8007d7e <__ieee754_rem_pio2+0x2e>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	ed80 0b00 	vstr	d0, [r0]
 8007d74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007d78:	f04f 0b00 	mov.w	fp, #0
 8007d7c:	e028      	b.n	8007dd0 <__ieee754_rem_pio2+0x80>
 8007d7e:	4bc3      	ldr	r3, [pc, #780]	; (800808c <__ieee754_rem_pio2+0x33c>)
 8007d80:	4598      	cmp	r8, r3
 8007d82:	dc78      	bgt.n	8007e76 <__ieee754_rem_pio2+0x126>
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	4ec2      	ldr	r6, [pc, #776]	; (8008090 <__ieee754_rem_pio2+0x340>)
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	ee10 0a10 	vmov	r0, s0
 8007d8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008050 <__ieee754_rem_pio2+0x300>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	4629      	mov	r1, r5
 8007d96:	dd39      	ble.n	8007e0c <__ieee754_rem_pio2+0xbc>
 8007d98:	f7f8 fa22 	bl	80001e0 <__aeabi_dsub>
 8007d9c:	45b0      	cmp	r8, r6
 8007d9e:	4604      	mov	r4, r0
 8007da0:	460d      	mov	r5, r1
 8007da2:	d01b      	beq.n	8007ddc <__ieee754_rem_pio2+0x8c>
 8007da4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008058 <__ieee754_rem_pio2+0x308>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fa19 	bl	80001e0 <__aeabi_dsub>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	e9ca 2300 	strd	r2, r3, [sl]
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fa11 	bl	80001e0 <__aeabi_dsub>
 8007dbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8008058 <__ieee754_rem_pio2+0x308>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fa0c 	bl	80001e0 <__aeabi_dsub>
 8007dc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dcc:	f04f 0b01 	mov.w	fp, #1
 8007dd0:	4658      	mov	r0, fp
 8007dd2:	b00b      	add	sp, #44	; 0x2c
 8007dd4:	ecbd 8b02 	vpop	{d8}
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008060 <__ieee754_rem_pio2+0x310>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 f9fd 	bl	80001e0 <__aeabi_dsub>
 8007de6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008068 <__ieee754_rem_pio2+0x318>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	4604      	mov	r4, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	f7f8 f9f6 	bl	80001e0 <__aeabi_dsub>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	e9ca 2300 	strd	r2, r3, [sl]
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 f9ee 	bl	80001e0 <__aeabi_dsub>
 8007e04:	a398      	add	r3, pc, #608	; (adr r3, 8008068 <__ieee754_rem_pio2+0x318>)
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	e7db      	b.n	8007dc4 <__ieee754_rem_pio2+0x74>
 8007e0c:	f7f8 f9ea 	bl	80001e4 <__adddf3>
 8007e10:	45b0      	cmp	r8, r6
 8007e12:	4604      	mov	r4, r0
 8007e14:	460d      	mov	r5, r1
 8007e16:	d016      	beq.n	8007e46 <__ieee754_rem_pio2+0xf6>
 8007e18:	a38f      	add	r3, pc, #572	; (adr r3, 8008058 <__ieee754_rem_pio2+0x308>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 f9e1 	bl	80001e4 <__adddf3>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	e9ca 2300 	strd	r2, r3, [sl]
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7f8 f9d7 	bl	80001e0 <__aeabi_dsub>
 8007e32:	a389      	add	r3, pc, #548	; (adr r3, 8008058 <__ieee754_rem_pio2+0x308>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 f9d4 	bl	80001e4 <__adddf3>
 8007e3c:	f04f 3bff 	mov.w	fp, #4294967295
 8007e40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e44:	e7c4      	b.n	8007dd0 <__ieee754_rem_pio2+0x80>
 8007e46:	a386      	add	r3, pc, #536	; (adr r3, 8008060 <__ieee754_rem_pio2+0x310>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f7f8 f9ca 	bl	80001e4 <__adddf3>
 8007e50:	a385      	add	r3, pc, #532	; (adr r3, 8008068 <__ieee754_rem_pio2+0x318>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	f7f8 f9c3 	bl	80001e4 <__adddf3>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	e9ca 2300 	strd	r2, r3, [sl]
 8007e66:	4620      	mov	r0, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7f8 f9b9 	bl	80001e0 <__aeabi_dsub>
 8007e6e:	a37e      	add	r3, pc, #504	; (adr r3, 8008068 <__ieee754_rem_pio2+0x318>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	e7e0      	b.n	8007e38 <__ieee754_rem_pio2+0xe8>
 8007e76:	4b87      	ldr	r3, [pc, #540]	; (8008094 <__ieee754_rem_pio2+0x344>)
 8007e78:	4598      	cmp	r8, r3
 8007e7a:	f300 80d9 	bgt.w	8008030 <__ieee754_rem_pio2+0x2e0>
 8007e7e:	f000 fe49 	bl	8008b14 <fabs>
 8007e82:	ec55 4b10 	vmov	r4, r5, d0
 8007e86:	ee10 0a10 	vmov	r0, s0
 8007e8a:	a379      	add	r3, pc, #484	; (adr r3, 8008070 <__ieee754_rem_pio2+0x320>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7f8 fb5d 	bl	8000550 <__aeabi_dmul>
 8007e96:	4b80      	ldr	r3, [pc, #512]	; (8008098 <__ieee754_rem_pio2+0x348>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f7f8 f9a3 	bl	80001e4 <__adddf3>
 8007e9e:	f7f8 fdf1 	bl	8000a84 <__aeabi_d2iz>
 8007ea2:	4683      	mov	fp, r0
 8007ea4:	f7f8 faea 	bl	800047c <__aeabi_i2d>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	ec43 2b18 	vmov	d8, r2, r3
 8007eb0:	a367      	add	r3, pc, #412	; (adr r3, 8008050 <__ieee754_rem_pio2+0x300>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 fb4b 	bl	8000550 <__aeabi_dmul>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 f98d 	bl	80001e0 <__aeabi_dsub>
 8007ec6:	a364      	add	r3, pc, #400	; (adr r3, 8008058 <__ieee754_rem_pio2+0x308>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	ec51 0b18 	vmov	r0, r1, d8
 8007ed4:	f7f8 fb3c 	bl	8000550 <__aeabi_dmul>
 8007ed8:	f1bb 0f1f 	cmp.w	fp, #31
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	dc0d      	bgt.n	8007efe <__ieee754_rem_pio2+0x1ae>
 8007ee2:	4b6e      	ldr	r3, [pc, #440]	; (800809c <__ieee754_rem_pio2+0x34c>)
 8007ee4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eec:	4543      	cmp	r3, r8
 8007eee:	d006      	beq.n	8007efe <__ieee754_rem_pio2+0x1ae>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 f972 	bl	80001e0 <__aeabi_dsub>
 8007efc:	e00f      	b.n	8007f1e <__ieee754_rem_pio2+0x1ce>
 8007efe:	462b      	mov	r3, r5
 8007f00:	4622      	mov	r2, r4
 8007f02:	4630      	mov	r0, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	f7f8 f96b 	bl	80001e0 <__aeabi_dsub>
 8007f0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007f0e:	9303      	str	r3, [sp, #12]
 8007f10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007f18:	f1b8 0f10 	cmp.w	r8, #16
 8007f1c:	dc02      	bgt.n	8007f24 <__ieee754_rem_pio2+0x1d4>
 8007f1e:	e9ca 0100 	strd	r0, r1, [sl]
 8007f22:	e039      	b.n	8007f98 <__ieee754_rem_pio2+0x248>
 8007f24:	a34e      	add	r3, pc, #312	; (adr r3, 8008060 <__ieee754_rem_pio2+0x310>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	ec51 0b18 	vmov	r0, r1, d8
 8007f2e:	f7f8 fb0f 	bl	8000550 <__aeabi_dmul>
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	f7f8 f94f 	bl	80001e0 <__aeabi_dsub>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4680      	mov	r8, r0
 8007f48:	4689      	mov	r9, r1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 f947 	bl	80001e0 <__aeabi_dsub>
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	f7f8 f943 	bl	80001e0 <__aeabi_dsub>
 8007f5a:	a343      	add	r3, pc, #268	; (adr r3, 8008068 <__ieee754_rem_pio2+0x318>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	ec51 0b18 	vmov	r0, r1, d8
 8007f68:	f7f8 faf2 	bl	8000550 <__aeabi_dmul>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	462b      	mov	r3, r5
 8007f70:	f7f8 f936 	bl	80001e0 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	4649      	mov	r1, r9
 8007f80:	f7f8 f92e 	bl	80001e0 <__aeabi_dsub>
 8007f84:	9a03      	ldr	r2, [sp, #12]
 8007f86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b31      	cmp	r3, #49	; 0x31
 8007f8e:	dc24      	bgt.n	8007fda <__ieee754_rem_pio2+0x28a>
 8007f90:	e9ca 0100 	strd	r0, r1, [sl]
 8007f94:	4646      	mov	r6, r8
 8007f96:	464f      	mov	r7, r9
 8007f98:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4642      	mov	r2, r8
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 f91c 	bl	80001e0 <__aeabi_dsub>
 8007fa8:	462b      	mov	r3, r5
 8007faa:	4622      	mov	r2, r4
 8007fac:	f7f8 f918 	bl	80001e0 <__aeabi_dsub>
 8007fb0:	9b02      	ldr	r3, [sp, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007fb8:	f6bf af0a 	bge.w	8007dd0 <__ieee754_rem_pio2+0x80>
 8007fbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007fc0:	f8ca 3004 	str.w	r3, [sl, #4]
 8007fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fc8:	f8ca 8000 	str.w	r8, [sl]
 8007fcc:	f8ca 0008 	str.w	r0, [sl, #8]
 8007fd0:	f8ca 300c 	str.w	r3, [sl, #12]
 8007fd4:	f1cb 0b00 	rsb	fp, fp, #0
 8007fd8:	e6fa      	b.n	8007dd0 <__ieee754_rem_pio2+0x80>
 8007fda:	a327      	add	r3, pc, #156	; (adr r3, 8008078 <__ieee754_rem_pio2+0x328>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	ec51 0b18 	vmov	r0, r1, d8
 8007fe4:	f7f8 fab4 	bl	8000550 <__aeabi_dmul>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 f8f4 	bl	80001e0 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 f8ec 	bl	80001e0 <__aeabi_dsub>
 8008008:	4622      	mov	r2, r4
 800800a:	462b      	mov	r3, r5
 800800c:	f7f8 f8e8 	bl	80001e0 <__aeabi_dsub>
 8008010:	a31b      	add	r3, pc, #108	; (adr r3, 8008080 <__ieee754_rem_pio2+0x330>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	4604      	mov	r4, r0
 8008018:	460d      	mov	r5, r1
 800801a:	ec51 0b18 	vmov	r0, r1, d8
 800801e:	f7f8 fa97 	bl	8000550 <__aeabi_dmul>
 8008022:	4622      	mov	r2, r4
 8008024:	462b      	mov	r3, r5
 8008026:	f7f8 f8db 	bl	80001e0 <__aeabi_dsub>
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	e75f      	b.n	8007ef0 <__ieee754_rem_pio2+0x1a0>
 8008030:	4b1b      	ldr	r3, [pc, #108]	; (80080a0 <__ieee754_rem_pio2+0x350>)
 8008032:	4598      	cmp	r8, r3
 8008034:	dd36      	ble.n	80080a4 <__ieee754_rem_pio2+0x354>
 8008036:	ee10 2a10 	vmov	r2, s0
 800803a:	462b      	mov	r3, r5
 800803c:	4620      	mov	r0, r4
 800803e:	4629      	mov	r1, r5
 8008040:	f7f8 f8ce 	bl	80001e0 <__aeabi_dsub>
 8008044:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008048:	e9ca 0100 	strd	r0, r1, [sl]
 800804c:	e694      	b.n	8007d78 <__ieee754_rem_pio2+0x28>
 800804e:	bf00      	nop
 8008050:	54400000 	.word	0x54400000
 8008054:	3ff921fb 	.word	0x3ff921fb
 8008058:	1a626331 	.word	0x1a626331
 800805c:	3dd0b461 	.word	0x3dd0b461
 8008060:	1a600000 	.word	0x1a600000
 8008064:	3dd0b461 	.word	0x3dd0b461
 8008068:	2e037073 	.word	0x2e037073
 800806c:	3ba3198a 	.word	0x3ba3198a
 8008070:	6dc9c883 	.word	0x6dc9c883
 8008074:	3fe45f30 	.word	0x3fe45f30
 8008078:	2e000000 	.word	0x2e000000
 800807c:	3ba3198a 	.word	0x3ba3198a
 8008080:	252049c1 	.word	0x252049c1
 8008084:	397b839a 	.word	0x397b839a
 8008088:	3fe921fb 	.word	0x3fe921fb
 800808c:	4002d97b 	.word	0x4002d97b
 8008090:	3ff921fb 	.word	0x3ff921fb
 8008094:	413921fb 	.word	0x413921fb
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	08009c3c 	.word	0x08009c3c
 80080a0:	7fefffff 	.word	0x7fefffff
 80080a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80080a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80080ac:	ee10 0a10 	vmov	r0, s0
 80080b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80080b4:	ee10 6a10 	vmov	r6, s0
 80080b8:	460f      	mov	r7, r1
 80080ba:	f7f8 fce3 	bl	8000a84 <__aeabi_d2iz>
 80080be:	f7f8 f9dd 	bl	800047c <__aeabi_i2d>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4630      	mov	r0, r6
 80080c8:	4639      	mov	r1, r7
 80080ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080ce:	f7f8 f887 	bl	80001e0 <__aeabi_dsub>
 80080d2:	4b23      	ldr	r3, [pc, #140]	; (8008160 <__ieee754_rem_pio2+0x410>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	f7f8 fa3b 	bl	8000550 <__aeabi_dmul>
 80080da:	460f      	mov	r7, r1
 80080dc:	4606      	mov	r6, r0
 80080de:	f7f8 fcd1 	bl	8000a84 <__aeabi_d2iz>
 80080e2:	f7f8 f9cb 	bl	800047c <__aeabi_i2d>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080f2:	f7f8 f875 	bl	80001e0 <__aeabi_dsub>
 80080f6:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <__ieee754_rem_pio2+0x410>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	f7f8 fa29 	bl	8000550 <__aeabi_dmul>
 80080fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008102:	ad04      	add	r5, sp, #16
 8008104:	f04f 0803 	mov.w	r8, #3
 8008108:	46a9      	mov	r9, r5
 800810a:	2600      	movs	r6, #0
 800810c:	2700      	movs	r7, #0
 800810e:	4632      	mov	r2, r6
 8008110:	463b      	mov	r3, r7
 8008112:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008116:	46c3      	mov	fp, r8
 8008118:	3d08      	subs	r5, #8
 800811a:	f108 38ff 	add.w	r8, r8, #4294967295
 800811e:	f7f8 fc7f 	bl	8000a20 <__aeabi_dcmpeq>
 8008122:	2800      	cmp	r0, #0
 8008124:	d1f3      	bne.n	800810e <__ieee754_rem_pio2+0x3be>
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <__ieee754_rem_pio2+0x414>)
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	2302      	movs	r3, #2
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4622      	mov	r2, r4
 8008130:	465b      	mov	r3, fp
 8008132:	4651      	mov	r1, sl
 8008134:	4648      	mov	r0, r9
 8008136:	f000 f8df 	bl	80082f8 <__kernel_rem_pio2>
 800813a:	9b02      	ldr	r3, [sp, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	4683      	mov	fp, r0
 8008140:	f6bf ae46 	bge.w	8007dd0 <__ieee754_rem_pio2+0x80>
 8008144:	e9da 2100 	ldrd	r2, r1, [sl]
 8008148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800814c:	e9ca 2300 	strd	r2, r3, [sl]
 8008150:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008158:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800815c:	e73a      	b.n	8007fd4 <__ieee754_rem_pio2+0x284>
 800815e:	bf00      	nop
 8008160:	41700000 	.word	0x41700000
 8008164:	08009cbc 	.word	0x08009cbc

08008168 <__kernel_cos>:
 8008168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	ec57 6b10 	vmov	r6, r7, d0
 8008170:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008174:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008178:	ed8d 1b00 	vstr	d1, [sp]
 800817c:	da07      	bge.n	800818e <__kernel_cos+0x26>
 800817e:	ee10 0a10 	vmov	r0, s0
 8008182:	4639      	mov	r1, r7
 8008184:	f7f8 fc7e 	bl	8000a84 <__aeabi_d2iz>
 8008188:	2800      	cmp	r0, #0
 800818a:	f000 8088 	beq.w	800829e <__kernel_cos+0x136>
 800818e:	4632      	mov	r2, r6
 8008190:	463b      	mov	r3, r7
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	f7f8 f9db 	bl	8000550 <__aeabi_dmul>
 800819a:	4b51      	ldr	r3, [pc, #324]	; (80082e0 <__kernel_cos+0x178>)
 800819c:	2200      	movs	r2, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	f7f8 f9d5 	bl	8000550 <__aeabi_dmul>
 80081a6:	a340      	add	r3, pc, #256	; (adr r3, 80082a8 <__kernel_cos+0x140>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	4682      	mov	sl, r0
 80081ae:	468b      	mov	fp, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 f9cc 	bl	8000550 <__aeabi_dmul>
 80081b8:	a33d      	add	r3, pc, #244	; (adr r3, 80082b0 <__kernel_cos+0x148>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f811 	bl	80001e4 <__adddf3>
 80081c2:	4622      	mov	r2, r4
 80081c4:	462b      	mov	r3, r5
 80081c6:	f7f8 f9c3 	bl	8000550 <__aeabi_dmul>
 80081ca:	a33b      	add	r3, pc, #236	; (adr r3, 80082b8 <__kernel_cos+0x150>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 f806 	bl	80001e0 <__aeabi_dsub>
 80081d4:	4622      	mov	r2, r4
 80081d6:	462b      	mov	r3, r5
 80081d8:	f7f8 f9ba 	bl	8000550 <__aeabi_dmul>
 80081dc:	a338      	add	r3, pc, #224	; (adr r3, 80082c0 <__kernel_cos+0x158>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f7 ffff 	bl	80001e4 <__adddf3>
 80081e6:	4622      	mov	r2, r4
 80081e8:	462b      	mov	r3, r5
 80081ea:	f7f8 f9b1 	bl	8000550 <__aeabi_dmul>
 80081ee:	a336      	add	r3, pc, #216	; (adr r3, 80082c8 <__kernel_cos+0x160>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f7 fff4 	bl	80001e0 <__aeabi_dsub>
 80081f8:	4622      	mov	r2, r4
 80081fa:	462b      	mov	r3, r5
 80081fc:	f7f8 f9a8 	bl	8000550 <__aeabi_dmul>
 8008200:	a333      	add	r3, pc, #204	; (adr r3, 80082d0 <__kernel_cos+0x168>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f7 ffed 	bl	80001e4 <__adddf3>
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	f7f8 f99f 	bl	8000550 <__aeabi_dmul>
 8008212:	4622      	mov	r2, r4
 8008214:	462b      	mov	r3, r5
 8008216:	f7f8 f99b 	bl	8000550 <__aeabi_dmul>
 800821a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821e:	4604      	mov	r4, r0
 8008220:	460d      	mov	r5, r1
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 f993 	bl	8000550 <__aeabi_dmul>
 800822a:	460b      	mov	r3, r1
 800822c:	4602      	mov	r2, r0
 800822e:	4629      	mov	r1, r5
 8008230:	4620      	mov	r0, r4
 8008232:	f7f7 ffd5 	bl	80001e0 <__aeabi_dsub>
 8008236:	4b2b      	ldr	r3, [pc, #172]	; (80082e4 <__kernel_cos+0x17c>)
 8008238:	4598      	cmp	r8, r3
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	dc10      	bgt.n	8008262 <__kernel_cos+0xfa>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4650      	mov	r0, sl
 8008246:	4659      	mov	r1, fp
 8008248:	f7f7 ffca 	bl	80001e0 <__aeabi_dsub>
 800824c:	460b      	mov	r3, r1
 800824e:	4926      	ldr	r1, [pc, #152]	; (80082e8 <__kernel_cos+0x180>)
 8008250:	4602      	mov	r2, r0
 8008252:	2000      	movs	r0, #0
 8008254:	f7f7 ffc4 	bl	80001e0 <__aeabi_dsub>
 8008258:	ec41 0b10 	vmov	d0, r0, r1
 800825c:	b003      	add	sp, #12
 800825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	4b22      	ldr	r3, [pc, #136]	; (80082ec <__kernel_cos+0x184>)
 8008264:	4920      	ldr	r1, [pc, #128]	; (80082e8 <__kernel_cos+0x180>)
 8008266:	4598      	cmp	r8, r3
 8008268:	bfcc      	ite	gt
 800826a:	4d21      	ldrgt	r5, [pc, #132]	; (80082f0 <__kernel_cos+0x188>)
 800826c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008270:	2400      	movs	r4, #0
 8008272:	4622      	mov	r2, r4
 8008274:	462b      	mov	r3, r5
 8008276:	2000      	movs	r0, #0
 8008278:	f7f7 ffb2 	bl	80001e0 <__aeabi_dsub>
 800827c:	4622      	mov	r2, r4
 800827e:	4680      	mov	r8, r0
 8008280:	4689      	mov	r9, r1
 8008282:	462b      	mov	r3, r5
 8008284:	4650      	mov	r0, sl
 8008286:	4659      	mov	r1, fp
 8008288:	f7f7 ffaa 	bl	80001e0 <__aeabi_dsub>
 800828c:	4632      	mov	r2, r6
 800828e:	463b      	mov	r3, r7
 8008290:	f7f7 ffa6 	bl	80001e0 <__aeabi_dsub>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	e7da      	b.n	8008254 <__kernel_cos+0xec>
 800829e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80082d8 <__kernel_cos+0x170>
 80082a2:	e7db      	b.n	800825c <__kernel_cos+0xf4>
 80082a4:	f3af 8000 	nop.w
 80082a8:	be8838d4 	.word	0xbe8838d4
 80082ac:	bda8fae9 	.word	0xbda8fae9
 80082b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80082b4:	3e21ee9e 	.word	0x3e21ee9e
 80082b8:	809c52ad 	.word	0x809c52ad
 80082bc:	3e927e4f 	.word	0x3e927e4f
 80082c0:	19cb1590 	.word	0x19cb1590
 80082c4:	3efa01a0 	.word	0x3efa01a0
 80082c8:	16c15177 	.word	0x16c15177
 80082cc:	3f56c16c 	.word	0x3f56c16c
 80082d0:	5555554c 	.word	0x5555554c
 80082d4:	3fa55555 	.word	0x3fa55555
 80082d8:	00000000 	.word	0x00000000
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	3fe00000 	.word	0x3fe00000
 80082e4:	3fd33332 	.word	0x3fd33332
 80082e8:	3ff00000 	.word	0x3ff00000
 80082ec:	3fe90000 	.word	0x3fe90000
 80082f0:	3fd20000 	.word	0x3fd20000
 80082f4:	00000000 	.word	0x00000000

080082f8 <__kernel_rem_pio2>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	ed2d 8b02 	vpush	{d8}
 8008300:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008304:	f112 0f14 	cmn.w	r2, #20
 8008308:	9308      	str	r3, [sp, #32]
 800830a:	9101      	str	r1, [sp, #4]
 800830c:	4bc4      	ldr	r3, [pc, #784]	; (8008620 <__kernel_rem_pio2+0x328>)
 800830e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008310:	900b      	str	r0, [sp, #44]	; 0x2c
 8008312:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008316:	9302      	str	r3, [sp, #8]
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	f103 33ff 	add.w	r3, r3, #4294967295
 800831e:	bfa8      	it	ge
 8008320:	1ed4      	subge	r4, r2, #3
 8008322:	9306      	str	r3, [sp, #24]
 8008324:	bfb2      	itee	lt
 8008326:	2400      	movlt	r4, #0
 8008328:	2318      	movge	r3, #24
 800832a:	fb94 f4f3 	sdivge	r4, r4, r3
 800832e:	f06f 0317 	mvn.w	r3, #23
 8008332:	fb04 3303 	mla	r3, r4, r3, r3
 8008336:	eb03 0a02 	add.w	sl, r3, r2
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	9a06      	ldr	r2, [sp, #24]
 800833e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008610 <__kernel_rem_pio2+0x318>
 8008342:	eb03 0802 	add.w	r8, r3, r2
 8008346:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008348:	1aa7      	subs	r7, r4, r2
 800834a:	ae22      	add	r6, sp, #136	; 0x88
 800834c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008350:	2500      	movs	r5, #0
 8008352:	4545      	cmp	r5, r8
 8008354:	dd13      	ble.n	800837e <__kernel_rem_pio2+0x86>
 8008356:	9b08      	ldr	r3, [sp, #32]
 8008358:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008610 <__kernel_rem_pio2+0x318>
 800835c:	aa22      	add	r2, sp, #136	; 0x88
 800835e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008362:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	4598      	cmp	r8, r3
 800836e:	dc2f      	bgt.n	80083d0 <__kernel_rem_pio2+0xd8>
 8008370:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008374:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008378:	462f      	mov	r7, r5
 800837a:	2600      	movs	r6, #0
 800837c:	e01b      	b.n	80083b6 <__kernel_rem_pio2+0xbe>
 800837e:	42ef      	cmn	r7, r5
 8008380:	d407      	bmi.n	8008392 <__kernel_rem_pio2+0x9a>
 8008382:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008386:	f7f8 f879 	bl	800047c <__aeabi_i2d>
 800838a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800838e:	3501      	adds	r5, #1
 8008390:	e7df      	b.n	8008352 <__kernel_rem_pio2+0x5a>
 8008392:	ec51 0b18 	vmov	r0, r1, d8
 8008396:	e7f8      	b.n	800838a <__kernel_rem_pio2+0x92>
 8008398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800839c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80083a0:	f7f8 f8d6 	bl	8000550 <__aeabi_dmul>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ac:	f7f7 ff1a 	bl	80001e4 <__adddf3>
 80083b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b4:	3601      	adds	r6, #1
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	429e      	cmp	r6, r3
 80083ba:	f1a7 0708 	sub.w	r7, r7, #8
 80083be:	ddeb      	ble.n	8008398 <__kernel_rem_pio2+0xa0>
 80083c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80083c4:	f108 0801 	add.w	r8, r8, #1
 80083c8:	ecab 7b02 	vstmia	fp!, {d7}
 80083cc:	3508      	adds	r5, #8
 80083ce:	e7cc      	b.n	800836a <__kernel_rem_pio2+0x72>
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	aa0e      	add	r2, sp, #56	; 0x38
 80083d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083d8:	930d      	str	r3, [sp, #52]	; 0x34
 80083da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80083dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80083e0:	9c02      	ldr	r4, [sp, #8]
 80083e2:	930c      	str	r3, [sp, #48]	; 0x30
 80083e4:	00e3      	lsls	r3, r4, #3
 80083e6:	930a      	str	r3, [sp, #40]	; 0x28
 80083e8:	ab9a      	add	r3, sp, #616	; 0x268
 80083ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80083f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80083f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80083f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80083fc:	46c3      	mov	fp, r8
 80083fe:	46a1      	mov	r9, r4
 8008400:	f1b9 0f00 	cmp.w	r9, #0
 8008404:	f1a5 0508 	sub.w	r5, r5, #8
 8008408:	dc77      	bgt.n	80084fa <__kernel_rem_pio2+0x202>
 800840a:	ec47 6b10 	vmov	d0, r6, r7
 800840e:	4650      	mov	r0, sl
 8008410:	f000 fc0a 	bl	8008c28 <scalbn>
 8008414:	ec57 6b10 	vmov	r6, r7, d0
 8008418:	2200      	movs	r2, #0
 800841a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800841e:	ee10 0a10 	vmov	r0, s0
 8008422:	4639      	mov	r1, r7
 8008424:	f7f8 f894 	bl	8000550 <__aeabi_dmul>
 8008428:	ec41 0b10 	vmov	d0, r0, r1
 800842c:	f000 fb7c 	bl	8008b28 <floor>
 8008430:	4b7c      	ldr	r3, [pc, #496]	; (8008624 <__kernel_rem_pio2+0x32c>)
 8008432:	ec51 0b10 	vmov	r0, r1, d0
 8008436:	2200      	movs	r2, #0
 8008438:	f7f8 f88a 	bl	8000550 <__aeabi_dmul>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f7 fecc 	bl	80001e0 <__aeabi_dsub>
 8008448:	460f      	mov	r7, r1
 800844a:	4606      	mov	r6, r0
 800844c:	f7f8 fb1a 	bl	8000a84 <__aeabi_d2iz>
 8008450:	9004      	str	r0, [sp, #16]
 8008452:	f7f8 f813 	bl	800047c <__aeabi_i2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f7 febf 	bl	80001e0 <__aeabi_dsub>
 8008462:	f1ba 0f00 	cmp.w	sl, #0
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	dd6d      	ble.n	8008548 <__kernel_rem_pio2+0x250>
 800846c:	1e62      	subs	r2, r4, #1
 800846e:	ab0e      	add	r3, sp, #56	; 0x38
 8008470:	9d04      	ldr	r5, [sp, #16]
 8008472:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008476:	f1ca 0118 	rsb	r1, sl, #24
 800847a:	fa40 f301 	asr.w	r3, r0, r1
 800847e:	441d      	add	r5, r3
 8008480:	408b      	lsls	r3, r1
 8008482:	1ac0      	subs	r0, r0, r3
 8008484:	ab0e      	add	r3, sp, #56	; 0x38
 8008486:	9504      	str	r5, [sp, #16]
 8008488:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800848c:	f1ca 0317 	rsb	r3, sl, #23
 8008490:	fa40 fb03 	asr.w	fp, r0, r3
 8008494:	f1bb 0f00 	cmp.w	fp, #0
 8008498:	dd65      	ble.n	8008566 <__kernel_rem_pio2+0x26e>
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	2200      	movs	r2, #0
 800849e:	3301      	adds	r3, #1
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	4615      	mov	r5, r2
 80084a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80084a8:	4294      	cmp	r4, r2
 80084aa:	f300 809c 	bgt.w	80085e6 <__kernel_rem_pio2+0x2ee>
 80084ae:	f1ba 0f00 	cmp.w	sl, #0
 80084b2:	dd07      	ble.n	80084c4 <__kernel_rem_pio2+0x1cc>
 80084b4:	f1ba 0f01 	cmp.w	sl, #1
 80084b8:	f000 80c0 	beq.w	800863c <__kernel_rem_pio2+0x344>
 80084bc:	f1ba 0f02 	cmp.w	sl, #2
 80084c0:	f000 80c6 	beq.w	8008650 <__kernel_rem_pio2+0x358>
 80084c4:	f1bb 0f02 	cmp.w	fp, #2
 80084c8:	d14d      	bne.n	8008566 <__kernel_rem_pio2+0x26e>
 80084ca:	4632      	mov	r2, r6
 80084cc:	463b      	mov	r3, r7
 80084ce:	4956      	ldr	r1, [pc, #344]	; (8008628 <__kernel_rem_pio2+0x330>)
 80084d0:	2000      	movs	r0, #0
 80084d2:	f7f7 fe85 	bl	80001e0 <__aeabi_dsub>
 80084d6:	4606      	mov	r6, r0
 80084d8:	460f      	mov	r7, r1
 80084da:	2d00      	cmp	r5, #0
 80084dc:	d043      	beq.n	8008566 <__kernel_rem_pio2+0x26e>
 80084de:	4650      	mov	r0, sl
 80084e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008618 <__kernel_rem_pio2+0x320>
 80084e4:	f000 fba0 	bl	8008c28 <scalbn>
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	ec53 2b10 	vmov	r2, r3, d0
 80084f0:	f7f7 fe76 	bl	80001e0 <__aeabi_dsub>
 80084f4:	4606      	mov	r6, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	e035      	b.n	8008566 <__kernel_rem_pio2+0x26e>
 80084fa:	4b4c      	ldr	r3, [pc, #304]	; (800862c <__kernel_rem_pio2+0x334>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	4630      	mov	r0, r6
 8008500:	4639      	mov	r1, r7
 8008502:	f7f8 f825 	bl	8000550 <__aeabi_dmul>
 8008506:	f7f8 fabd 	bl	8000a84 <__aeabi_d2iz>
 800850a:	f7f7 ffb7 	bl	800047c <__aeabi_i2d>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	ec43 2b18 	vmov	d8, r2, r3
 8008516:	4b46      	ldr	r3, [pc, #280]	; (8008630 <__kernel_rem_pio2+0x338>)
 8008518:	2200      	movs	r2, #0
 800851a:	f7f8 f819 	bl	8000550 <__aeabi_dmul>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4630      	mov	r0, r6
 8008524:	4639      	mov	r1, r7
 8008526:	f7f7 fe5b 	bl	80001e0 <__aeabi_dsub>
 800852a:	f7f8 faab 	bl	8000a84 <__aeabi_d2iz>
 800852e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008532:	f84b 0b04 	str.w	r0, [fp], #4
 8008536:	ec51 0b18 	vmov	r0, r1, d8
 800853a:	f7f7 fe53 	bl	80001e4 <__adddf3>
 800853e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	e75b      	b.n	8008400 <__kernel_rem_pio2+0x108>
 8008548:	d106      	bne.n	8008558 <__kernel_rem_pio2+0x260>
 800854a:	1e63      	subs	r3, r4, #1
 800854c:	aa0e      	add	r2, sp, #56	; 0x38
 800854e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008552:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008556:	e79d      	b.n	8008494 <__kernel_rem_pio2+0x19c>
 8008558:	4b36      	ldr	r3, [pc, #216]	; (8008634 <__kernel_rem_pio2+0x33c>)
 800855a:	2200      	movs	r2, #0
 800855c:	f7f8 fa7e 	bl	8000a5c <__aeabi_dcmpge>
 8008560:	2800      	cmp	r0, #0
 8008562:	d13d      	bne.n	80085e0 <__kernel_rem_pio2+0x2e8>
 8008564:	4683      	mov	fp, r0
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	f7f8 fa57 	bl	8000a20 <__aeabi_dcmpeq>
 8008572:	2800      	cmp	r0, #0
 8008574:	f000 80c0 	beq.w	80086f8 <__kernel_rem_pio2+0x400>
 8008578:	1e65      	subs	r5, r4, #1
 800857a:	462b      	mov	r3, r5
 800857c:	2200      	movs	r2, #0
 800857e:	9902      	ldr	r1, [sp, #8]
 8008580:	428b      	cmp	r3, r1
 8008582:	da6c      	bge.n	800865e <__kernel_rem_pio2+0x366>
 8008584:	2a00      	cmp	r2, #0
 8008586:	f000 8089 	beq.w	800869c <__kernel_rem_pio2+0x3a4>
 800858a:	ab0e      	add	r3, sp, #56	; 0x38
 800858c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008590:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 80ad 	beq.w	80086f4 <__kernel_rem_pio2+0x3fc>
 800859a:	4650      	mov	r0, sl
 800859c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008618 <__kernel_rem_pio2+0x320>
 80085a0:	f000 fb42 	bl	8008c28 <scalbn>
 80085a4:	ab9a      	add	r3, sp, #616	; 0x268
 80085a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80085aa:	ec57 6b10 	vmov	r6, r7, d0
 80085ae:	00ec      	lsls	r4, r5, #3
 80085b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80085b4:	46aa      	mov	sl, r5
 80085b6:	f1ba 0f00 	cmp.w	sl, #0
 80085ba:	f280 80d6 	bge.w	800876a <__kernel_rem_pio2+0x472>
 80085be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008610 <__kernel_rem_pio2+0x318>
 80085c2:	462e      	mov	r6, r5
 80085c4:	2e00      	cmp	r6, #0
 80085c6:	f2c0 8104 	blt.w	80087d2 <__kernel_rem_pio2+0x4da>
 80085ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80085cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80085d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008638 <__kernel_rem_pio2+0x340>
 80085d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80085d8:	f04f 0800 	mov.w	r8, #0
 80085dc:	1baf      	subs	r7, r5, r6
 80085de:	e0ea      	b.n	80087b6 <__kernel_rem_pio2+0x4be>
 80085e0:	f04f 0b02 	mov.w	fp, #2
 80085e4:	e759      	b.n	800849a <__kernel_rem_pio2+0x1a2>
 80085e6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ea:	b955      	cbnz	r5, 8008602 <__kernel_rem_pio2+0x30a>
 80085ec:	b123      	cbz	r3, 80085f8 <__kernel_rem_pio2+0x300>
 80085ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80085f2:	f8c8 3000 	str.w	r3, [r8]
 80085f6:	2301      	movs	r3, #1
 80085f8:	3201      	adds	r2, #1
 80085fa:	f108 0804 	add.w	r8, r8, #4
 80085fe:	461d      	mov	r5, r3
 8008600:	e752      	b.n	80084a8 <__kernel_rem_pio2+0x1b0>
 8008602:	1acb      	subs	r3, r1, r3
 8008604:	f8c8 3000 	str.w	r3, [r8]
 8008608:	462b      	mov	r3, r5
 800860a:	e7f5      	b.n	80085f8 <__kernel_rem_pio2+0x300>
 800860c:	f3af 8000 	nop.w
	...
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	08009e08 	.word	0x08009e08
 8008624:	40200000 	.word	0x40200000
 8008628:	3ff00000 	.word	0x3ff00000
 800862c:	3e700000 	.word	0x3e700000
 8008630:	41700000 	.word	0x41700000
 8008634:	3fe00000 	.word	0x3fe00000
 8008638:	08009dc8 	.word	0x08009dc8
 800863c:	1e62      	subs	r2, r4, #1
 800863e:	ab0e      	add	r3, sp, #56	; 0x38
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008648:	a90e      	add	r1, sp, #56	; 0x38
 800864a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800864e:	e739      	b.n	80084c4 <__kernel_rem_pio2+0x1cc>
 8008650:	1e62      	subs	r2, r4, #1
 8008652:	ab0e      	add	r3, sp, #56	; 0x38
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800865c:	e7f4      	b.n	8008648 <__kernel_rem_pio2+0x350>
 800865e:	a90e      	add	r1, sp, #56	; 0x38
 8008660:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008664:	3b01      	subs	r3, #1
 8008666:	430a      	orrs	r2, r1
 8008668:	e789      	b.n	800857e <__kernel_rem_pio2+0x286>
 800866a:	3301      	adds	r3, #1
 800866c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008670:	2900      	cmp	r1, #0
 8008672:	d0fa      	beq.n	800866a <__kernel_rem_pio2+0x372>
 8008674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008676:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800867a:	446a      	add	r2, sp
 800867c:	3a98      	subs	r2, #152	; 0x98
 800867e:	920a      	str	r2, [sp, #40]	; 0x28
 8008680:	9a08      	ldr	r2, [sp, #32]
 8008682:	18e3      	adds	r3, r4, r3
 8008684:	18a5      	adds	r5, r4, r2
 8008686:	aa22      	add	r2, sp, #136	; 0x88
 8008688:	f104 0801 	add.w	r8, r4, #1
 800868c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	4543      	cmp	r3, r8
 8008696:	da04      	bge.n	80086a2 <__kernel_rem_pio2+0x3aa>
 8008698:	461c      	mov	r4, r3
 800869a:	e6a3      	b.n	80083e4 <__kernel_rem_pio2+0xec>
 800869c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800869e:	2301      	movs	r3, #1
 80086a0:	e7e4      	b.n	800866c <__kernel_rem_pio2+0x374>
 80086a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80086a8:	f7f7 fee8 	bl	800047c <__aeabi_i2d>
 80086ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 80086b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b2:	46ab      	mov	fp, r5
 80086b4:	461c      	mov	r4, r3
 80086b6:	f04f 0900 	mov.w	r9, #0
 80086ba:	2600      	movs	r6, #0
 80086bc:	2700      	movs	r7, #0
 80086be:	9b06      	ldr	r3, [sp, #24]
 80086c0:	4599      	cmp	r9, r3
 80086c2:	dd06      	ble.n	80086d2 <__kernel_rem_pio2+0x3da>
 80086c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	930a      	str	r3, [sp, #40]	; 0x28
 80086d0:	e7df      	b.n	8008692 <__kernel_rem_pio2+0x39a>
 80086d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80086d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80086da:	f7f7 ff39 	bl	8000550 <__aeabi_dmul>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4630      	mov	r0, r6
 80086e4:	4639      	mov	r1, r7
 80086e6:	f7f7 fd7d 	bl	80001e4 <__adddf3>
 80086ea:	f109 0901 	add.w	r9, r9, #1
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	e7e4      	b.n	80086be <__kernel_rem_pio2+0x3c6>
 80086f4:	3d01      	subs	r5, #1
 80086f6:	e748      	b.n	800858a <__kernel_rem_pio2+0x292>
 80086f8:	ec47 6b10 	vmov	d0, r6, r7
 80086fc:	f1ca 0000 	rsb	r0, sl, #0
 8008700:	f000 fa92 	bl	8008c28 <scalbn>
 8008704:	ec57 6b10 	vmov	r6, r7, d0
 8008708:	4ba0      	ldr	r3, [pc, #640]	; (800898c <__kernel_rem_pio2+0x694>)
 800870a:	ee10 0a10 	vmov	r0, s0
 800870e:	2200      	movs	r2, #0
 8008710:	4639      	mov	r1, r7
 8008712:	f7f8 f9a3 	bl	8000a5c <__aeabi_dcmpge>
 8008716:	b1f8      	cbz	r0, 8008758 <__kernel_rem_pio2+0x460>
 8008718:	4b9d      	ldr	r3, [pc, #628]	; (8008990 <__kernel_rem_pio2+0x698>)
 800871a:	2200      	movs	r2, #0
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f7 ff16 	bl	8000550 <__aeabi_dmul>
 8008724:	f7f8 f9ae 	bl	8000a84 <__aeabi_d2iz>
 8008728:	4680      	mov	r8, r0
 800872a:	f7f7 fea7 	bl	800047c <__aeabi_i2d>
 800872e:	4b97      	ldr	r3, [pc, #604]	; (800898c <__kernel_rem_pio2+0x694>)
 8008730:	2200      	movs	r2, #0
 8008732:	f7f7 ff0d 	bl	8000550 <__aeabi_dmul>
 8008736:	460b      	mov	r3, r1
 8008738:	4602      	mov	r2, r0
 800873a:	4639      	mov	r1, r7
 800873c:	4630      	mov	r0, r6
 800873e:	f7f7 fd4f 	bl	80001e0 <__aeabi_dsub>
 8008742:	f7f8 f99f 	bl	8000a84 <__aeabi_d2iz>
 8008746:	1c65      	adds	r5, r4, #1
 8008748:	ab0e      	add	r3, sp, #56	; 0x38
 800874a:	f10a 0a18 	add.w	sl, sl, #24
 800874e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008752:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008756:	e720      	b.n	800859a <__kernel_rem_pio2+0x2a2>
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f8 f992 	bl	8000a84 <__aeabi_d2iz>
 8008760:	ab0e      	add	r3, sp, #56	; 0x38
 8008762:	4625      	mov	r5, r4
 8008764:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008768:	e717      	b.n	800859a <__kernel_rem_pio2+0x2a2>
 800876a:	ab0e      	add	r3, sp, #56	; 0x38
 800876c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008770:	f7f7 fe84 	bl	800047c <__aeabi_i2d>
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	f7f7 feea 	bl	8000550 <__aeabi_dmul>
 800877c:	4b84      	ldr	r3, [pc, #528]	; (8008990 <__kernel_rem_pio2+0x698>)
 800877e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008782:	2200      	movs	r2, #0
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f7 fee2 	bl	8000550 <__aeabi_dmul>
 800878c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008790:	4606      	mov	r6, r0
 8008792:	460f      	mov	r7, r1
 8008794:	e70f      	b.n	80085b6 <__kernel_rem_pio2+0x2be>
 8008796:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800879a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800879e:	f7f7 fed7 	bl	8000550 <__aeabi_dmul>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087aa:	f7f7 fd1b 	bl	80001e4 <__adddf3>
 80087ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087b2:	f108 0801 	add.w	r8, r8, #1
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	4598      	cmp	r8, r3
 80087ba:	dc01      	bgt.n	80087c0 <__kernel_rem_pio2+0x4c8>
 80087bc:	45b8      	cmp	r8, r7
 80087be:	ddea      	ble.n	8008796 <__kernel_rem_pio2+0x49e>
 80087c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80087c4:	ab4a      	add	r3, sp, #296	; 0x128
 80087c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80087ca:	ed87 7b00 	vstr	d7, [r7]
 80087ce:	3e01      	subs	r6, #1
 80087d0:	e6f8      	b.n	80085c4 <__kernel_rem_pio2+0x2cc>
 80087d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	dc0b      	bgt.n	80087f0 <__kernel_rem_pio2+0x4f8>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc35      	bgt.n	8008848 <__kernel_rem_pio2+0x550>
 80087dc:	d059      	beq.n	8008892 <__kernel_rem_pio2+0x59a>
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	f003 0007 	and.w	r0, r3, #7
 80087e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80087e8:	ecbd 8b02 	vpop	{d8}
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d1f3      	bne.n	80087de <__kernel_rem_pio2+0x4e6>
 80087f6:	ab4a      	add	r3, sp, #296	; 0x128
 80087f8:	4423      	add	r3, r4
 80087fa:	9306      	str	r3, [sp, #24]
 80087fc:	461c      	mov	r4, r3
 80087fe:	469a      	mov	sl, r3
 8008800:	9502      	str	r5, [sp, #8]
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f1aa 0a08 	sub.w	sl, sl, #8
 800880a:	dc6b      	bgt.n	80088e4 <__kernel_rem_pio2+0x5ec>
 800880c:	46aa      	mov	sl, r5
 800880e:	f1ba 0f01 	cmp.w	sl, #1
 8008812:	f1a4 0408 	sub.w	r4, r4, #8
 8008816:	f300 8085 	bgt.w	8008924 <__kernel_rem_pio2+0x62c>
 800881a:	9c06      	ldr	r4, [sp, #24]
 800881c:	2000      	movs	r0, #0
 800881e:	3408      	adds	r4, #8
 8008820:	2100      	movs	r1, #0
 8008822:	2d01      	cmp	r5, #1
 8008824:	f300 809d 	bgt.w	8008962 <__kernel_rem_pio2+0x66a>
 8008828:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800882c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008830:	f1bb 0f00 	cmp.w	fp, #0
 8008834:	f040 809b 	bne.w	800896e <__kernel_rem_pio2+0x676>
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	e9c3 5600 	strd	r5, r6, [r3]
 800883e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008842:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008846:	e7ca      	b.n	80087de <__kernel_rem_pio2+0x4e6>
 8008848:	3408      	adds	r4, #8
 800884a:	ab4a      	add	r3, sp, #296	; 0x128
 800884c:	441c      	add	r4, r3
 800884e:	462e      	mov	r6, r5
 8008850:	2000      	movs	r0, #0
 8008852:	2100      	movs	r1, #0
 8008854:	2e00      	cmp	r6, #0
 8008856:	da36      	bge.n	80088c6 <__kernel_rem_pio2+0x5ce>
 8008858:	f1bb 0f00 	cmp.w	fp, #0
 800885c:	d039      	beq.n	80088d2 <__kernel_rem_pio2+0x5da>
 800885e:	4602      	mov	r2, r0
 8008860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008864:	9c01      	ldr	r4, [sp, #4]
 8008866:	e9c4 2300 	strd	r2, r3, [r4]
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008872:	f7f7 fcb5 	bl	80001e0 <__aeabi_dsub>
 8008876:	ae4c      	add	r6, sp, #304	; 0x130
 8008878:	2401      	movs	r4, #1
 800887a:	42a5      	cmp	r5, r4
 800887c:	da2c      	bge.n	80088d8 <__kernel_rem_pio2+0x5e0>
 800887e:	f1bb 0f00 	cmp.w	fp, #0
 8008882:	d002      	beq.n	800888a <__kernel_rem_pio2+0x592>
 8008884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008888:	4619      	mov	r1, r3
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008890:	e7a5      	b.n	80087de <__kernel_rem_pio2+0x4e6>
 8008892:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008896:	eb0d 0403 	add.w	r4, sp, r3
 800889a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800889e:	2000      	movs	r0, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	2d00      	cmp	r5, #0
 80088a4:	da09      	bge.n	80088ba <__kernel_rem_pio2+0x5c2>
 80088a6:	f1bb 0f00 	cmp.w	fp, #0
 80088aa:	d002      	beq.n	80088b2 <__kernel_rem_pio2+0x5ba>
 80088ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088b0:	4619      	mov	r1, r3
 80088b2:	9b01      	ldr	r3, [sp, #4]
 80088b4:	e9c3 0100 	strd	r0, r1, [r3]
 80088b8:	e791      	b.n	80087de <__kernel_rem_pio2+0x4e6>
 80088ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088be:	f7f7 fc91 	bl	80001e4 <__adddf3>
 80088c2:	3d01      	subs	r5, #1
 80088c4:	e7ed      	b.n	80088a2 <__kernel_rem_pio2+0x5aa>
 80088c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088ca:	f7f7 fc8b 	bl	80001e4 <__adddf3>
 80088ce:	3e01      	subs	r6, #1
 80088d0:	e7c0      	b.n	8008854 <__kernel_rem_pio2+0x55c>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	e7c5      	b.n	8008864 <__kernel_rem_pio2+0x56c>
 80088d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80088dc:	f7f7 fc82 	bl	80001e4 <__adddf3>
 80088e0:	3401      	adds	r4, #1
 80088e2:	e7ca      	b.n	800887a <__kernel_rem_pio2+0x582>
 80088e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80088e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	4632      	mov	r2, r6
 80088f4:	463b      	mov	r3, r7
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f7 fc73 	bl	80001e4 <__adddf3>
 80088fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4640      	mov	r0, r8
 8008908:	4649      	mov	r1, r9
 800890a:	f7f7 fc69 	bl	80001e0 <__aeabi_dsub>
 800890e:	4632      	mov	r2, r6
 8008910:	463b      	mov	r3, r7
 8008912:	f7f7 fc67 	bl	80001e4 <__adddf3>
 8008916:	ed9d 7b08 	vldr	d7, [sp, #32]
 800891a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800891e:	ed8a 7b00 	vstr	d7, [sl]
 8008922:	e76e      	b.n	8008802 <__kernel_rem_pio2+0x50a>
 8008924:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008928:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800892c:	4640      	mov	r0, r8
 800892e:	4632      	mov	r2, r6
 8008930:	463b      	mov	r3, r7
 8008932:	4649      	mov	r1, r9
 8008934:	f7f7 fc56 	bl	80001e4 <__adddf3>
 8008938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f7 fc4c 	bl	80001e0 <__aeabi_dsub>
 8008948:	4632      	mov	r2, r6
 800894a:	463b      	mov	r3, r7
 800894c:	f7f7 fc4a 	bl	80001e4 <__adddf3>
 8008950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008954:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008958:	ed84 7b00 	vstr	d7, [r4]
 800895c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008960:	e755      	b.n	800880e <__kernel_rem_pio2+0x516>
 8008962:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008966:	f7f7 fc3d 	bl	80001e4 <__adddf3>
 800896a:	3d01      	subs	r5, #1
 800896c:	e759      	b.n	8008822 <__kernel_rem_pio2+0x52a>
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	601d      	str	r5, [r3, #0]
 8008974:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008978:	605c      	str	r4, [r3, #4]
 800897a:	609f      	str	r7, [r3, #8]
 800897c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008980:	60d3      	str	r3, [r2, #12]
 8008982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008986:	6110      	str	r0, [r2, #16]
 8008988:	6153      	str	r3, [r2, #20]
 800898a:	e728      	b.n	80087de <__kernel_rem_pio2+0x4e6>
 800898c:	41700000 	.word	0x41700000
 8008990:	3e700000 	.word	0x3e700000
 8008994:	00000000 	.word	0x00000000

08008998 <__kernel_sin>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	ed2d 8b04 	vpush	{d8-d9}
 80089a0:	eeb0 8a41 	vmov.f32	s16, s2
 80089a4:	eef0 8a61 	vmov.f32	s17, s3
 80089a8:	ec55 4b10 	vmov	r4, r5, d0
 80089ac:	b083      	sub	sp, #12
 80089ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80089b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80089b6:	9001      	str	r0, [sp, #4]
 80089b8:	da06      	bge.n	80089c8 <__kernel_sin+0x30>
 80089ba:	ee10 0a10 	vmov	r0, s0
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f8 f860 	bl	8000a84 <__aeabi_d2iz>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d051      	beq.n	8008a6c <__kernel_sin+0xd4>
 80089c8:	4622      	mov	r2, r4
 80089ca:	462b      	mov	r3, r5
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f7 fdbe 	bl	8000550 <__aeabi_dmul>
 80089d4:	4682      	mov	sl, r0
 80089d6:	468b      	mov	fp, r1
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4620      	mov	r0, r4
 80089de:	4629      	mov	r1, r5
 80089e0:	f7f7 fdb6 	bl	8000550 <__aeabi_dmul>
 80089e4:	a341      	add	r3, pc, #260	; (adr r3, 8008aec <__kernel_sin+0x154>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	4680      	mov	r8, r0
 80089ec:	4689      	mov	r9, r1
 80089ee:	4650      	mov	r0, sl
 80089f0:	4659      	mov	r1, fp
 80089f2:	f7f7 fdad 	bl	8000550 <__aeabi_dmul>
 80089f6:	a33f      	add	r3, pc, #252	; (adr r3, 8008af4 <__kernel_sin+0x15c>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fbf0 	bl	80001e0 <__aeabi_dsub>
 8008a00:	4652      	mov	r2, sl
 8008a02:	465b      	mov	r3, fp
 8008a04:	f7f7 fda4 	bl	8000550 <__aeabi_dmul>
 8008a08:	a33c      	add	r3, pc, #240	; (adr r3, 8008afc <__kernel_sin+0x164>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fbe9 	bl	80001e4 <__adddf3>
 8008a12:	4652      	mov	r2, sl
 8008a14:	465b      	mov	r3, fp
 8008a16:	f7f7 fd9b 	bl	8000550 <__aeabi_dmul>
 8008a1a:	a33a      	add	r3, pc, #232	; (adr r3, 8008b04 <__kernel_sin+0x16c>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fbde 	bl	80001e0 <__aeabi_dsub>
 8008a24:	4652      	mov	r2, sl
 8008a26:	465b      	mov	r3, fp
 8008a28:	f7f7 fd92 	bl	8000550 <__aeabi_dmul>
 8008a2c:	a337      	add	r3, pc, #220	; (adr r3, 8008b0c <__kernel_sin+0x174>)
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	f7f7 fbd7 	bl	80001e4 <__adddf3>
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	b9eb      	cbnz	r3, 8008a7a <__kernel_sin+0xe2>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4650      	mov	r0, sl
 8008a44:	4659      	mov	r1, fp
 8008a46:	f7f7 fd83 	bl	8000550 <__aeabi_dmul>
 8008a4a:	a325      	add	r3, pc, #148	; (adr r3, 8008ae0 <__kernel_sin+0x148>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fbc6 	bl	80001e0 <__aeabi_dsub>
 8008a54:	4642      	mov	r2, r8
 8008a56:	464b      	mov	r3, r9
 8008a58:	f7f7 fd7a 	bl	8000550 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f7 fbbe 	bl	80001e4 <__adddf3>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	ec45 4b10 	vmov	d0, r4, r5
 8008a70:	b003      	add	sp, #12
 8008a72:	ecbd 8b04 	vpop	{d8-d9}
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <__kernel_sin+0x150>)
 8008a7c:	ec51 0b18 	vmov	r0, r1, d8
 8008a80:	2200      	movs	r2, #0
 8008a82:	f7f7 fd65 	bl	8000550 <__aeabi_dmul>
 8008a86:	4632      	mov	r2, r6
 8008a88:	ec41 0b19 	vmov	d9, r0, r1
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	f7f7 fd5d 	bl	8000550 <__aeabi_dmul>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	ec51 0b19 	vmov	r0, r1, d9
 8008a9e:	f7f7 fb9f 	bl	80001e0 <__aeabi_dsub>
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	f7f7 fd53 	bl	8000550 <__aeabi_dmul>
 8008aaa:	ec53 2b18 	vmov	r2, r3, d8
 8008aae:	f7f7 fb97 	bl	80001e0 <__aeabi_dsub>
 8008ab2:	a30b      	add	r3, pc, #44	; (adr r3, 8008ae0 <__kernel_sin+0x148>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	4606      	mov	r6, r0
 8008aba:	460f      	mov	r7, r1
 8008abc:	4640      	mov	r0, r8
 8008abe:	4649      	mov	r1, r9
 8008ac0:	f7f7 fd46 	bl	8000550 <__aeabi_dmul>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 fb8a 	bl	80001e4 <__adddf3>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fb82 	bl	80001e0 <__aeabi_dsub>
 8008adc:	e7c4      	b.n	8008a68 <__kernel_sin+0xd0>
 8008ade:	bf00      	nop
 8008ae0:	55555549 	.word	0x55555549
 8008ae4:	3fc55555 	.word	0x3fc55555
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	5acfd57c 	.word	0x5acfd57c
 8008af0:	3de5d93a 	.word	0x3de5d93a
 8008af4:	8a2b9ceb 	.word	0x8a2b9ceb
 8008af8:	3e5ae5e6 	.word	0x3e5ae5e6
 8008afc:	57b1fe7d 	.word	0x57b1fe7d
 8008b00:	3ec71de3 	.word	0x3ec71de3
 8008b04:	19c161d5 	.word	0x19c161d5
 8008b08:	3f2a01a0 	.word	0x3f2a01a0
 8008b0c:	1110f8a6 	.word	0x1110f8a6
 8008b10:	3f811111 	.word	0x3f811111

08008b14 <fabs>:
 8008b14:	ec51 0b10 	vmov	r0, r1, d0
 8008b18:	ee10 2a10 	vmov	r2, s0
 8008b1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b20:	ec43 2b10 	vmov	d0, r2, r3
 8008b24:	4770      	bx	lr
	...

08008b28 <floor>:
 8008b28:	ec51 0b10 	vmov	r0, r1, d0
 8008b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b30:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008b34:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008b38:	2e13      	cmp	r6, #19
 8008b3a:	ee10 5a10 	vmov	r5, s0
 8008b3e:	ee10 8a10 	vmov	r8, s0
 8008b42:	460c      	mov	r4, r1
 8008b44:	dc32      	bgt.n	8008bac <floor+0x84>
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	da14      	bge.n	8008b74 <floor+0x4c>
 8008b4a:	a333      	add	r3, pc, #204	; (adr r3, 8008c18 <floor+0xf0>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fb48 	bl	80001e4 <__adddf3>
 8008b54:	2200      	movs	r2, #0
 8008b56:	2300      	movs	r3, #0
 8008b58:	f7f7 ff8a 	bl	8000a70 <__aeabi_dcmpgt>
 8008b5c:	b138      	cbz	r0, 8008b6e <floor+0x46>
 8008b5e:	2c00      	cmp	r4, #0
 8008b60:	da57      	bge.n	8008c12 <floor+0xea>
 8008b62:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008b66:	431d      	orrs	r5, r3
 8008b68:	d001      	beq.n	8008b6e <floor+0x46>
 8008b6a:	4c2d      	ldr	r4, [pc, #180]	; (8008c20 <floor+0xf8>)
 8008b6c:	2500      	movs	r5, #0
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4628      	mov	r0, r5
 8008b72:	e025      	b.n	8008bc0 <floor+0x98>
 8008b74:	4f2b      	ldr	r7, [pc, #172]	; (8008c24 <floor+0xfc>)
 8008b76:	4137      	asrs	r7, r6
 8008b78:	ea01 0307 	and.w	r3, r1, r7
 8008b7c:	4303      	orrs	r3, r0
 8008b7e:	d01f      	beq.n	8008bc0 <floor+0x98>
 8008b80:	a325      	add	r3, pc, #148	; (adr r3, 8008c18 <floor+0xf0>)
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f7f7 fb2d 	bl	80001e4 <__adddf3>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f7f7 ff6f 	bl	8000a70 <__aeabi_dcmpgt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0eb      	beq.n	8008b6e <floor+0x46>
 8008b96:	2c00      	cmp	r4, #0
 8008b98:	bfbe      	ittt	lt
 8008b9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008b9e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008ba2:	19a4      	addlt	r4, r4, r6
 8008ba4:	ea24 0407 	bic.w	r4, r4, r7
 8008ba8:	2500      	movs	r5, #0
 8008baa:	e7e0      	b.n	8008b6e <floor+0x46>
 8008bac:	2e33      	cmp	r6, #51	; 0x33
 8008bae:	dd0b      	ble.n	8008bc8 <floor+0xa0>
 8008bb0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008bb4:	d104      	bne.n	8008bc0 <floor+0x98>
 8008bb6:	ee10 2a10 	vmov	r2, s0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	f7f7 fb12 	bl	80001e4 <__adddf3>
 8008bc0:	ec41 0b10 	vmov	d0, r0, r1
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd0:	fa23 f707 	lsr.w	r7, r3, r7
 8008bd4:	4207      	tst	r7, r0
 8008bd6:	d0f3      	beq.n	8008bc0 <floor+0x98>
 8008bd8:	a30f      	add	r3, pc, #60	; (adr r3, 8008c18 <floor+0xf0>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb01 	bl	80001e4 <__adddf3>
 8008be2:	2200      	movs	r2, #0
 8008be4:	2300      	movs	r3, #0
 8008be6:	f7f7 ff43 	bl	8000a70 <__aeabi_dcmpgt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d0bf      	beq.n	8008b6e <floor+0x46>
 8008bee:	2c00      	cmp	r4, #0
 8008bf0:	da02      	bge.n	8008bf8 <floor+0xd0>
 8008bf2:	2e14      	cmp	r6, #20
 8008bf4:	d103      	bne.n	8008bfe <floor+0xd6>
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	ea25 0507 	bic.w	r5, r5, r7
 8008bfc:	e7b7      	b.n	8008b6e <floor+0x46>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008c04:	fa03 f606 	lsl.w	r6, r3, r6
 8008c08:	4435      	add	r5, r6
 8008c0a:	4545      	cmp	r5, r8
 8008c0c:	bf38      	it	cc
 8008c0e:	18e4      	addcc	r4, r4, r3
 8008c10:	e7f2      	b.n	8008bf8 <floor+0xd0>
 8008c12:	2500      	movs	r5, #0
 8008c14:	462c      	mov	r4, r5
 8008c16:	e7aa      	b.n	8008b6e <floor+0x46>
 8008c18:	8800759c 	.word	0x8800759c
 8008c1c:	7e37e43c 	.word	0x7e37e43c
 8008c20:	bff00000 	.word	0xbff00000
 8008c24:	000fffff 	.word	0x000fffff

08008c28 <scalbn>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	ec55 4b10 	vmov	r4, r5, d0
 8008c2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008c32:	4606      	mov	r6, r0
 8008c34:	462b      	mov	r3, r5
 8008c36:	b99a      	cbnz	r2, 8008c60 <scalbn+0x38>
 8008c38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c3c:	4323      	orrs	r3, r4
 8008c3e:	d036      	beq.n	8008cae <scalbn+0x86>
 8008c40:	4b39      	ldr	r3, [pc, #228]	; (8008d28 <scalbn+0x100>)
 8008c42:	4629      	mov	r1, r5
 8008c44:	ee10 0a10 	vmov	r0, s0
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f7f7 fc81 	bl	8000550 <__aeabi_dmul>
 8008c4e:	4b37      	ldr	r3, [pc, #220]	; (8008d2c <scalbn+0x104>)
 8008c50:	429e      	cmp	r6, r3
 8008c52:	4604      	mov	r4, r0
 8008c54:	460d      	mov	r5, r1
 8008c56:	da10      	bge.n	8008c7a <scalbn+0x52>
 8008c58:	a32b      	add	r3, pc, #172	; (adr r3, 8008d08 <scalbn+0xe0>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	e03a      	b.n	8008cd6 <scalbn+0xae>
 8008c60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c64:	428a      	cmp	r2, r1
 8008c66:	d10c      	bne.n	8008c82 <scalbn+0x5a>
 8008c68:	ee10 2a10 	vmov	r2, s0
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f7f7 fab8 	bl	80001e4 <__adddf3>
 8008c74:	4604      	mov	r4, r0
 8008c76:	460d      	mov	r5, r1
 8008c78:	e019      	b.n	8008cae <scalbn+0x86>
 8008c7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c7e:	460b      	mov	r3, r1
 8008c80:	3a36      	subs	r2, #54	; 0x36
 8008c82:	4432      	add	r2, r6
 8008c84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c88:	428a      	cmp	r2, r1
 8008c8a:	dd08      	ble.n	8008c9e <scalbn+0x76>
 8008c8c:	2d00      	cmp	r5, #0
 8008c8e:	a120      	add	r1, pc, #128	; (adr r1, 8008d10 <scalbn+0xe8>)
 8008c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c94:	da1c      	bge.n	8008cd0 <scalbn+0xa8>
 8008c96:	a120      	add	r1, pc, #128	; (adr r1, 8008d18 <scalbn+0xf0>)
 8008c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9c:	e018      	b.n	8008cd0 <scalbn+0xa8>
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	dd08      	ble.n	8008cb4 <scalbn+0x8c>
 8008ca2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ca6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008caa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008cae:	ec45 4b10 	vmov	d0, r4, r5
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008cb8:	da19      	bge.n	8008cee <scalbn+0xc6>
 8008cba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008cbe:	429e      	cmp	r6, r3
 8008cc0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008cc4:	dd0a      	ble.n	8008cdc <scalbn+0xb4>
 8008cc6:	a112      	add	r1, pc, #72	; (adr r1, 8008d10 <scalbn+0xe8>)
 8008cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e2      	bne.n	8008c96 <scalbn+0x6e>
 8008cd0:	a30f      	add	r3, pc, #60	; (adr r3, 8008d10 <scalbn+0xe8>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f7f7 fc3b 	bl	8000550 <__aeabi_dmul>
 8008cda:	e7cb      	b.n	8008c74 <scalbn+0x4c>
 8008cdc:	a10a      	add	r1, pc, #40	; (adr r1, 8008d08 <scalbn+0xe0>)
 8008cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0b8      	beq.n	8008c58 <scalbn+0x30>
 8008ce6:	a10e      	add	r1, pc, #56	; (adr r1, 8008d20 <scalbn+0xf8>)
 8008ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cec:	e7b4      	b.n	8008c58 <scalbn+0x30>
 8008cee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008cf2:	3236      	adds	r2, #54	; 0x36
 8008cf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <scalbn+0x108>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	e7e8      	b.n	8008cd6 <scalbn+0xae>
 8008d04:	f3af 8000 	nop.w
 8008d08:	c2f8f359 	.word	0xc2f8f359
 8008d0c:	01a56e1f 	.word	0x01a56e1f
 8008d10:	8800759c 	.word	0x8800759c
 8008d14:	7e37e43c 	.word	0x7e37e43c
 8008d18:	8800759c 	.word	0x8800759c
 8008d1c:	fe37e43c 	.word	0xfe37e43c
 8008d20:	c2f8f359 	.word	0xc2f8f359
 8008d24:	81a56e1f 	.word	0x81a56e1f
 8008d28:	43500000 	.word	0x43500000
 8008d2c:	ffff3cb0 	.word	0xffff3cb0
 8008d30:	3c900000 	.word	0x3c900000

08008d34 <_init>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr

08008d40 <_fini>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	bf00      	nop
 8008d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d46:	bc08      	pop	{r3}
 8008d48:	469e      	mov	lr, r3
 8008d4a:	4770      	bx	lr
