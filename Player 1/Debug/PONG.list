
PONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a80c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d8  0800a9a8  0800a9a8  0001a9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb80  0800bb80  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb80  0800bb80  0001bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb88  0800bb88  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb88  0800bb88  0001bb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb8c  0800bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800bb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  200000a0  0800bc2c  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800bc2c  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019548  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414f  00000000  00000000  00039614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  0003ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf26  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f669  00000000  00000000  0005bfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d732  00000000  00000000  0007b647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e94  00000000  00000000  00118dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a98c 	.word	0x0800a98c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	0800a98c 	.word	0x0800a98c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000e8c:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <MX_ADC1_Init+0xc0>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <MX_ADC1_Init+0xc4>)
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000ee0:	f002 fb96 	bl	8003610 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000eea:	f000 fe2d 	bl	8001b48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000f00:	f002 fd16 	bl	8003930 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000f0a:	f000 fe1d 	bl	8001b48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_ADC1_Init+0xbc>)
 8000f1c:	f002 fd08 	bl	8003930 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f26:	f000 fe0f 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	0f000001 	.word	0x0f000001

08000f40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0x7c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d127      	bne.n	8000fb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_ADC_MspInit+0x80>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <HAL_ADC_MspInit+0x80>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_ADC_MspInit+0x80>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_ADC_MspInit+0x80>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_ADC_MspInit+0x80>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_ADC_MspInit+0x80>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_ADC_MspInit+0x84>)
 8000fae:	f003 fb5f 	bl	8004670 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <updateBall>:
#include <stdlib.h>
#endif


void updateBall(ball *b)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	eraseBall(b->x-3, b->y-6);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	1eda      	subs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	3b06      	subs	r3, #6
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4610      	mov	r0, r2
 8000fe0:	f000 f99a 	bl	8001318 <eraseBall>
    calculateBallPosition(b);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f80e 	bl	8001006 <calculateBallPosition>
    drawBall(b->x-3, b->y-6);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1eda      	subs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	3b06      	subs	r3, #6
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f000 f9a0 	bl	800133e <drawBall>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <calculateBallPosition>:

void calculateBallPosition(ball *b)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
    b->x_f = b->x_f+b->vector_x;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa44 	bl	80004a0 <__aeabi_f2d>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800101e:	f7ff f8e1 	bl	80001e4 <__adddf3>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd53 	bl	8000ad4 <__aeabi_d2f>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	609a      	str	r2, [r3, #8]
    b->y_f = b->y_f+b->vector_y;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa31 	bl	80004a0 <__aeabi_f2d>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001044:	f7ff f8ce 	bl	80001e4 <__adddf3>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fd40 	bl	8000ad4 <__aeabi_d2f>
 8001054:	4602      	mov	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]

    b->x = round(b->x_f);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa1e 	bl	80004a0 <__aeabi_f2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	ec43 2b10 	vmov	d0, r2, r3
 800106c:	f008 fbfc 	bl	8009868 <round>
 8001070:	ec53 2b10 	vmov	r2, r3, d0
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fd04 	bl	8000a84 <__aeabi_d2iz>
 800107c:	4602      	mov	r2, r0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
    b->y = round(b->y_f);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa0a 	bl	80004a0 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	ec43 2b10 	vmov	d0, r2, r3
 8001094:	f008 fbe8 	bl	8009868 <round>
 8001098:	ec53 2b10 	vmov	r2, r3, d0
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fcf0 	bl	8000a84 <__aeabi_d2iz>
 80010a4:	4602      	mov	r2, r0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <wallBounce>:

void wallBounce(ball *b)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	if(b->x<=3 || 125<=b->x) //check wall bounce
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	6809      	ldr	r1, [r1, #0]
 80010be:	2903      	cmp	r1, #3
 80010c0:	dd03      	ble.n	80010ca <wallBounce+0x18>
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	6809      	ldr	r1, [r1, #0]
 80010c6:	297c      	cmp	r1, #124	; 0x7c
 80010c8:	dd08      	ble.n	80010dc <wallBounce+0x2a>
	{
		b->vector_x = -b->vector_x;
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80010d0:	4602      	mov	r2, r0
 80010d2:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <paddleBounce>:

void paddleBounce(ball *b, player *p1, player *p2)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	if(b->y<=p1->y+11 && abs(b->x-p1->x)<=23) //player 1 paddle bounce
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	429a      	cmp	r2, r3
 8001100:	dc14      	bgt.n	800112c <paddleBounce+0x44>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f113 0f17 	cmn.w	r3, #23
 8001110:	db0c      	blt.n	800112c <paddleBounce+0x44>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b17      	cmp	r3, #23
 800111e:	dc05      	bgt.n	800112c <paddleBounce+0x44>
	{
		calculatePaddleBounce(b, p1, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f823 	bl	8001170 <calculatePaddleBounce>
	}
	else if(p2->y<=b->y && abs(b->x-p2->x)<=23) //player 2 paddle bounce
	{
		calculatePaddleBounce(b, p2, -1);
	}
}
 800112a:	e01a      	b.n	8001162 <paddleBounce+0x7a>
	else if(p2->y<=b->y && abs(b->x-p2->x)<=23) //player 2 paddle bounce
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dc14      	bgt.n	8001162 <paddleBounce+0x7a>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f113 0f17 	cmn.w	r3, #23
 8001146:	db0c      	blt.n	8001162 <paddleBounce+0x7a>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b17      	cmp	r3, #23
 8001154:	dc05      	bgt.n	8001162 <paddleBounce+0x7a>
		calculatePaddleBounce(b, p2, -1);
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f807 	bl	8001170 <calculatePaddleBounce>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	0000      	movs	r0, r0
 800116c:	0000      	movs	r0, r0
	...

08001170 <calculatePaddleBounce>:

void calculatePaddleBounce(ball *b, player* p, int direction)
{
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	b->vector_x = sin((p->x-b->x_f)/20*60*M_PI/180)*(-1);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	edd3 7a02 	vldr	s15, [r3, #8]
 800118e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001192:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001278 <calculatePaddleBounce+0x108>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a2:	ee17 0a90 	vmov	r0, s15
 80011a6:	f7ff f97b 	bl	80004a0 <__aeabi_f2d>
 80011aa:	a331      	add	r3, pc, #196	; (adr r3, 8001270 <calculatePaddleBounce+0x100>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f9ce 	bl	8000550 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <calculatePaddleBounce+0x10c>)
 80011c2:	f7ff faef 	bl	80007a4 <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ec43 2b17 	vmov	d7, r2, r3
 80011ce:	eeb0 0a47 	vmov.f32	s0, s14
 80011d2:	eef0 0a67 	vmov.f32	s1, s15
 80011d6:	f008 fb8f 	bl	80098f8 <sin>
 80011da:	ec53 2b10 	vmov	r2, r3, d0
 80011de:	4614      	mov	r4, r2
 80011e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	e9c3 4504 	strd	r4, r5, [r3, #16]
	b->vector_y = cos((p->x-b->x_f)/20*60*M_PI/180)*direction;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001200:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001278 <calculatePaddleBounce+0x108>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f944 	bl	80004a0 <__aeabi_f2d>
 8001218:	a315      	add	r3, pc, #84	; (adr r3, 8001270 <calculatePaddleBounce+0x100>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f997 	bl	8000550 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <calculatePaddleBounce+0x10c>)
 8001230:	f7ff fab8 	bl	80007a4 <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	ec43 2b17 	vmov	d7, r2, r3
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	f008 fabc 	bl	80097c0 <cos>
 8001248:	ec55 4b10 	vmov	r4, r5, d0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f915 	bl	800047c <__aeabi_i2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff f979 	bl	8000550 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bdb0      	pop	{r4, r5, r7, pc}
 8001270:	54442d18 	.word	0x54442d18
 8001274:	400921fb 	.word	0x400921fb
 8001278:	42700000 	.word	0x42700000
 800127c:	40668000 	.word	0x40668000

08001280 <startBluetooth>:
#include "bluetooth.h"

unsigned char bt_data[7] = {0,0,0,0,0,0,200};
unsigned char bt_receive[2];

void startBluetooth(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&BLUETOOTH, bt_data, sizeof(bt_data));
 8001284:	2207      	movs	r2, #7
 8001286:	4905      	ldr	r1, [pc, #20]	; (800129c <startBluetooth+0x1c>)
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <startBluetooth+0x20>)
 800128a:	f004 ff25 	bl	80060d8 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&BLUETOOTH, bt_receive, sizeof(bt_receive));
 800128e:	2202      	movs	r2, #2
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <startBluetooth+0x24>)
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <startBluetooth+0x20>)
 8001294:	f004 ff9e 	bl	80061d4 <HAL_UART_Receive_DMA>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000700 	.word	0x20000700
 80012a4:	20000104 	.word	0x20000104

080012a8 <convertPaddlesToChar>:

void stopBluetooth(){
	HAL_UART_DMAStop(&BLUETOOTH);
}

void convertPaddlesToChar(player *p1, player *p2){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	bt_data[0] = (unsigned char)p1->x;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <convertPaddlesToChar+0x40>)
 80012ba:	701a      	strb	r2, [r3, #0]
	bt_data[1] = (unsigned char)p1->y;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <convertPaddlesToChar+0x40>)
 80012c4:	705a      	strb	r2, [r3, #1]
	bt_data[2] = (unsigned char)p2->x;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <convertPaddlesToChar+0x40>)
 80012ce:	709a      	strb	r2, [r3, #2]
	bt_data[3] = (unsigned char)p2->y;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <convertPaddlesToChar+0x40>)
 80012d8:	70da      	strb	r2, [r3, #3]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000

080012ec <convertBallToChar>:

void convertBallToChar(ball *b){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	bt_data[4] = (unsigned char)b->x;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <convertBallToChar+0x28>)
 80012fc:	711a      	strb	r2, [r3, #4]
	bt_data[5] = (unsigned char)b->y;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <convertBallToChar+0x28>)
 8001306:	715a      	strb	r2, [r3, #5]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000000 	.word	0x20000000

08001318 <eraseBall>:


#define PADDLE_HEIGHT 5

void eraseBall(int x, int y)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	ST7735_FillRectangleFast(x, y, 6, 6, ST7735_BLACK);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	b298      	uxth	r0, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b299      	uxth	r1, r3
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2306      	movs	r3, #6
 8001330:	2206      	movs	r2, #6
 8001332:	f001 f8fb 	bl	800252c <ST7735_FillRectangleFast>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <drawBall>:

void drawBall(int x, int y)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af02      	add	r7, sp, #8
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
	ST7735_FillRectangleFast(x, y, 6, 6, ST7735_WHITE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	b298      	uxth	r0, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b299      	uxth	r1, r3
 8001350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2306      	movs	r3, #6
 8001358:	2206      	movs	r2, #6
 800135a:	f001 f8e7 	bl	800252c <ST7735_FillRectangleFast>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <clearDisplay>:

void clearDisplay()
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
	ST7735_FillScreenFast(ST7735_BLACK);
 800136a:	2000      	movs	r0, #0
 800136c:	f001 f975 	bl	800265a <ST7735_FillScreenFast>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <drawNewGame>:

void drawNewGame()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af02      	add	r7, sp, #8
	ST7735_FillRectangleFast(44, 0, 40, PADDLE_HEIGHT, ST7735_WHITE); 	//p1
 800137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2305      	movs	r3, #5
 8001382:	2228      	movs	r2, #40	; 0x28
 8001384:	2100      	movs	r1, #0
 8001386:	202c      	movs	r0, #44	; 0x2c
 8001388:	f001 f8d0 	bl	800252c <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(44, 155, 40, PADDLE_HEIGHT, ST7735_WHITE); 	//p2
 800138c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2305      	movs	r3, #5
 8001394:	2228      	movs	r2, #40	; 0x28
 8001396:	219b      	movs	r1, #155	; 0x9b
 8001398:	202c      	movs	r0, #44	; 0x2c
 800139a:	f001 f8c7 	bl	800252c <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(61, 71, 6, 6, ST7735_WHITE); 	//ball
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2306      	movs	r3, #6
 80013a6:	2206      	movs	r2, #6
 80013a8:	2147      	movs	r1, #71	; 0x47
 80013aa:	203d      	movs	r0, #61	; 0x3d
 80013ac:	f001 f8be 	bl	800252c <ST7735_FillRectangleFast>
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <drawGameOver>:

void drawGameOver(uint8_t *score)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af04      	add	r7, sp, #16
 80013be:	6078      	str	r0, [r7, #4]
	 char temp[2] = "00";
 80013c0:	f243 0330 	movw	r3, #12336	; 0x3030
 80013c4:	81bb      	strh	r3, [r7, #12]
	 ST7735_FillScreen(ST7735_MAGENTA);
 80013c6:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80013ca:	f001 f935 	bl	8002638 <ST7735_FillScreen>
	 ST7735_WriteString(15, 80, "GAME OVER", Font_11x18, ST7735_WHITE, ST7735_MAGENTA);
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <drawGameOver+0xa8>)
 80013d0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80013d4:	9202      	str	r2, [sp, #8]
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	9201      	str	r2, [sp, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <drawGameOver+0xac>)
 80013e4:	2150      	movs	r1, #80	; 0x50
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 ffe1 	bl	80023ae <ST7735_WriteString>
	 itoa(score[0],temp,10);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	220a      	movs	r2, #10
 80013f8:	4619      	mov	r1, r3
 80013fa:	f007 fffb 	bl	80093f4 <itoa>
	 ST7735_WriteString(15, 120, temp, Font_11x18, ST7735_WHITE, ST7735_MAGENTA);
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <drawGameOver+0xa8>)
 8001400:	f107 010c 	add.w	r1, r7, #12
 8001404:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001408:	9202      	str	r2, [sp, #8]
 800140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	9200      	str	r2, [sp, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	460a      	mov	r2, r1
 8001418:	2178      	movs	r1, #120	; 0x78
 800141a:	200f      	movs	r0, #15
 800141c:	f000 ffc7 	bl	80023ae <ST7735_WriteString>
	 itoa(score[1],temp,10);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	220a      	movs	r2, #10
 800142e:	4619      	mov	r1, r3
 8001430:	f007 ffe0 	bl	80093f4 <itoa>
	 ST7735_WriteString(64+15, 120, temp, Font_11x18, ST7735_WHITE, ST7735_MAGENTA);
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <drawGameOver+0xa8>)
 8001436:	f107 010c 	add.w	r1, r7, #12
 800143a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800143e:	9202      	str	r2, [sp, #8]
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	9201      	str	r2, [sp, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	9200      	str	r2, [sp, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	460a      	mov	r2, r1
 800144e:	2178      	movs	r1, #120	; 0x78
 8001450:	204f      	movs	r0, #79	; 0x4f
 8001452:	f000 ffac 	bl	80023ae <ST7735_WriteString>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	0800a9a8 	.word	0x0800a9a8

08001468 <drawPaddleMovementX>:

void drawPaddleMovementX(int playerX, int playerY, int paddle_direction_x, int paddle_limit_x, int paddle_signum){
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
	ST7735_FillRectangleFast(playerX-paddle_signum*20+paddle_direction_x*paddle_limit_x, playerY, abs(paddle_limit_x), 5, ST7735_BLACK);
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	b29b      	uxth	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	0312      	lsls	r2, r2, #12
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	b299      	uxth	r1, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	fb11 f303 	smulbb	r3, r1, r3
 8001494:	b29b      	uxth	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b298      	uxth	r0, r3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bfb8      	it	lt
 80014ac:	425b      	neglt	r3, r3
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2305      	movs	r3, #5
 80014b6:	f001 f839 	bl	800252c <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(playerX+paddle_signum*20+paddle_direction_x*paddle_limit_x, playerY, abs(paddle_limit_x), 5, ST7735_WHITE);
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	b299      	uxth	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	fb11 f303 	smulbb	r3, r1, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b298      	uxth	r0, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	b299      	uxth	r1, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bfb8      	it	lt
 80014ec:	425b      	neglt	r3, r3
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2305      	movs	r3, #5
 80014f8:	f001 f818 	bl	800252c <ST7735_FillRectangleFast>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <drawPaddleMovementY>:

void drawPaddleMovementY(int playerX, int playerY, int paddle_direction_y, int paddle_limit_y){
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
    ST7735_FillRectangleFast(playerX-20, playerY+(5+paddle_limit_y)*paddle_direction_y, 40, abs(paddle_limit_y), ST7735_BLACK);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b14      	subs	r3, #20
 8001518:	b298      	uxth	r0, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3305      	adds	r3, #5
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	b29b      	uxth	r3, r3
 8001524:	fb12 f303 	smulbb	r3, r2, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b299      	uxth	r1, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfb8      	it	lt
 8001538:	425b      	neglt	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	2200      	movs	r2, #0
 800153e:	9200      	str	r2, [sp, #0]
 8001540:	2228      	movs	r2, #40	; 0x28
 8001542:	f000 fff3 	bl	800252c <ST7735_FillRectangleFast>
	ST7735_FillRectangleFast(playerX-20, playerY+paddle_limit_y, 40, abs(paddle_limit_y), ST7735_WHITE);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	b29b      	uxth	r3, r3
 800154a:	3b14      	subs	r3, #20
 800154c:	b298      	uxth	r0, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	b29a      	uxth	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b299      	uxth	r1, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfb8      	it	lt
 8001560:	425b      	neglt	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	2228      	movs	r2, #40	; 0x28
 800156c:	f000 ffde 	bl	800252c <ST7735_FillRectangleFast>
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_DMA_Init+0x4c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <MX_DMA_Init+0x4c>)
 8001588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_DMA_Init+0x4c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	203a      	movs	r0, #58	; 0x3a
 80015a0:	f002 fcbf 	bl	8003f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015a4:	203a      	movs	r0, #58	; 0x3a
 80015a6:	f002 fcd8 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2046      	movs	r0, #70	; 0x46
 80015b0:	f002 fcb7 	bl	8003f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015b4:	2046      	movs	r0, #70	; 0x46
 80015b6:	f002 fcd0 	bl	8003f5a <HAL_NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <doGameTick>:

uint8_t score[2] = {0,0};
char c_score[4] ="0000";

void doGameTick(ball *b, player *p1, player *p2)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
	wallBounce(b);
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff fd6c 	bl	80010b2 <wallBounce>
	paddleBounce(b, p1, p2);
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7ff fd82 	bl	80010e8 <paddleBounce>
	updateBall(b);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fcef 	bl	8000fc8 <updateBall>
	convertBallToChar(b);
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff fe7e 	bl	80012ec <convertBallToChar>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <restartGame>:

void restartGame(ball *b, player *p1, player *p2)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	stopGameTicks();
 8001604:	f000 f8e8 	bl	80017d8 <stopGameTicks>
	HAL_TIM_Base_Stop_IT(&GAME_TIMER);
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <restartGame+0x4c>)
 800160a:	f004 fb23 	bl	8005c54 <HAL_TIM_Base_Stop_IT>
	clearDisplay();
 800160e:	f7ff feaa 	bl	8001366 <clearDisplay>
	resetGameData(b, p1, p2);
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f816 	bl	8001648 <resetGameData>
	convertPaddlesToChar(p1, p2);
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	68b8      	ldr	r0, [r7, #8]
 8001620:	f7ff fe42 	bl	80012a8 <convertPaddlesToChar>
	convertBallToChar(b);
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff fe61 	bl	80012ec <convertBallToChar>
	drawNewGame();
 800162a:	f7ff fea3 	bl	8001374 <drawNewGame>
	//for(int i =0; i<100000; i++);
	startBluetooth();
 800162e:	f7ff fe27 	bl	8001280 <startBluetooth>
	startGameTicks();
 8001632:	f000 f8c7 	bl	80017c4 <startGameTicks>
	HAL_TIM_Base_Start_IT(&GAME_TIMER);
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <restartGame+0x4c>)
 8001638:	f004 faaa 	bl	8005b90 <HAL_TIM_Base_Start_IT>
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000670 	.word	0x20000670

08001648 <resetGameData>:

void resetGameData(ball *b, player *p1, player *p2)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	p1->x=64;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	601a      	str	r2, [r3, #0]
	p1->y=0;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
	p1->y_min=0;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
	p1->y_max=10;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	220a      	movs	r2, #10
 800166a:	609a      	str	r2, [r3, #8]
	p2->x=64;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	601a      	str	r2, [r3, #0]
	p2->y=155;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	229b      	movs	r2, #155	; 0x9b
 8001676:	605a      	str	r2, [r3, #4]
	p2->y_min=145;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2291      	movs	r2, #145	; 0x91
 800167c:	60da      	str	r2, [r3, #12]
	p2->y_max=155;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	229b      	movs	r2, #155	; 0x9b
 8001682:	609a      	str	r2, [r3, #8]
	b->x = 64;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	601a      	str	r2, [r3, #0]
	b->y = 77;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	224d      	movs	r2, #77	; 0x4d
 800168e:	605a      	str	r2, [r3, #4]
	b->x_f = 64;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8001696:	609a      	str	r2, [r3, #8]
	b->y_f = 77;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <resetGameData+0x7c>)
 800169c:	60da      	str	r2, [r3, #12]
	b->vector_x = 0;
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	b->vector_y = 1;
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <resetGameData+0x80>)
 80016b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	429a0000 	.word	0x429a0000
 80016c8:	3ff00000 	.word	0x3ff00000

080016cc <gameOver>:

void gameOver(ball *b)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	//stopBluetooth();
	if(b->y > 160) score[0]++;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2ba0      	cmp	r3, #160	; 0xa0
 80016da:	dd05      	ble.n	80016e8 <gameOver+0x1c>
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <gameOver+0x50>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <gameOver+0x50>)
 80016e6:	701a      	strb	r2, [r3, #0]
	if(b->y < 0) score[1]++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da05      	bge.n	80016fc <gameOver+0x30>
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <gameOver+0x50>)
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <gameOver+0x50>)
 80016fa:	705a      	strb	r2, [r3, #1]
	stopGameTicks();
 80016fc:	f000 f86c 	bl	80017d8 <stopGameTicks>
	drawGameOver(score);
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <gameOver+0x50>)
 8001702:	f7ff fe59 	bl	80013b8 <drawGameOver>
	if(checkHighScore()) saveNewScore();
 8001706:	f000 f823 	bl	8001750 <checkHighScore>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <gameOver+0x48>
 8001710:	f000 f806 	bl	8001720 <saveNewScore>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000108 	.word	0x20000108

08001720 <saveNewScore>:

void saveNewScore(){
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	int score_temp = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
	score_temp = score[0]*100 + score[1];
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <saveNewScore+0x2c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <saveNewScore+0x2c>)
 8001738:	7852      	ldrb	r2, [r2, #1]
 800173a:	4413      	add	r3, r2
 800173c:	607b      	str	r3, [r7, #4]
	SD_saveScore(score_temp);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fb48 	bl	8001dd4 <SD_saveScore>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000108 	.word	0x20000108

08001750 <checkHighScore>:

int checkHighScore(){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
	char c_score_temp[2];
	int score1, score2;
	SD_readScore(c_score);
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <checkHighScore+0x6c>)
 8001758:	f000 fb78 	bl	8001e4c <SD_readScore>
	c_score_temp[0] = c_score[0];
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <checkHighScore+0x6c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	713b      	strb	r3, [r7, #4]
	c_score_temp[1] = c_score[1];
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <checkHighScore+0x6c>)
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	717b      	strb	r3, [r7, #5]
	score1 = atoi(c_score_temp);
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4618      	mov	r0, r3
 800176c:	f007 fdfb 	bl	8009366 <atoi>
 8001770:	60f8      	str	r0, [r7, #12]
	c_score_temp[0] = c_score[2];
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <checkHighScore+0x6c>)
 8001774:	789b      	ldrb	r3, [r3, #2]
 8001776:	713b      	strb	r3, [r7, #4]
	c_score_temp[1] = c_score[3];
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <checkHighScore+0x6c>)
 800177a:	78db      	ldrb	r3, [r3, #3]
 800177c:	717b      	strb	r3, [r7, #5]
	score2 = atoi(c_score_temp);
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4618      	mov	r0, r3
 8001782:	f007 fdf0 	bl	8009366 <atoi>
 8001786:	60b8      	str	r0, [r7, #8]
	if(abs(score1-score2) > abs(score[0]-score[1])) return 0;
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001792:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <checkHighScore+0x70>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <checkHighScore+0x70>)
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	1acb      	subs	r3, r1, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bfb8      	it	lt
 80017a6:	425b      	neglt	r3, r3
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dd01      	ble.n	80017b0 <checkHighScore+0x60>
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <checkHighScore+0x62>
	else return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000010 	.word	0x20000010
 80017c0:	20000108 	.word	0x20000108

080017c4 <startGameTicks>:

void startGameTicks()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&PADDLE_TIMER);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <startGameTicks+0x10>)
 80017ca:	f004 f9e1 	bl	8005b90 <HAL_TIM_Base_Start_IT>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200006b8 	.word	0x200006b8

080017d8 <stopGameTicks>:

void stopGameTicks()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&PADDLE_TIMER);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <stopGameTicks+0x10>)
 80017de:	f004 fa39 	bl	8005c54 <HAL_TIM_Base_Stop_IT>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200006b8 	.word	0x200006b8

080017ec <checkGameOver>:

void checkGameOver(ball *b, int *flag){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	if((b->y>160 || b->y<0)){
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2ba0      	cmp	r3, #160	; 0xa0
 80017fc:	dc03      	bgt.n	8001806 <checkGameOver+0x1a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da05      	bge.n	8001812 <checkGameOver+0x26>
				gameOver(b);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff60 	bl	80016cc <gameOver>
				*flag=1;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
			 }
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <checkRestartGame>:

void checkRestartGame(ball *b, player *p1, player *p2, int *flag){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET){
 800182a:	2102      	movs	r1, #2
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <checkRestartGame+0x34>)
 800182e:	f003 f8a3 	bl	8004978 <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <checkRestartGame+0x2c>
		*flag=0;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
		restartGame(b, p1, p2);
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff fed8 	bl	80015f8 <restartGame>
	}
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40020400 	.word	0x40020400

08001854 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <MX_GPIO_Init+0x124>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a41      	ldr	r2, [pc, #260]	; (8001978 <MX_GPIO_Init+0x124>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <MX_GPIO_Init+0x124>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <MX_GPIO_Init+0x124>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <MX_GPIO_Init+0x124>)
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <MX_GPIO_Init+0x124>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <MX_GPIO_Init+0x124>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a33      	ldr	r2, [pc, #204]	; (8001978 <MX_GPIO_Init+0x124>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <MX_GPIO_Init+0x124>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <MX_GPIO_Init+0x124>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <MX_GPIO_Init+0x124>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <MX_GPIO_Init+0x124>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e0:	4826      	ldr	r0, [pc, #152]	; (800197c <MX_GPIO_Init+0x128>)
 80018e2:	f003 f861 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 7121 	mov.w	r1, #644	; 0x284
 80018ec:	4824      	ldr	r0, [pc, #144]	; (8001980 <MX_GPIO_Init+0x12c>)
 80018ee:	f003 f85b 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f8:	4822      	ldr	r0, [pc, #136]	; (8001984 <MX_GPIO_Init+0x130>)
 80018fa:	f003 f855 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4819      	ldr	r0, [pc, #100]	; (800197c <MX_GPIO_Init+0x128>)
 8001918:	f002 feaa 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800191c:	2302      	movs	r3, #2
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <MX_GPIO_Init+0x12c>)
 8001930:	f002 fe9e 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin|LCD_RES_Pin;
 8001934:	f44f 7321 	mov.w	r3, #644	; 0x284
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_GPIO_Init+0x12c>)
 800194e:	f002 fe8f 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <MX_GPIO_Init+0x130>)
 800196c:	f002 fe80 	bl	8004670 <HAL_GPIO_Init>

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40020800 	.word	0x40020800
 8001980:	40020400 	.word	0x40020400
 8001984:	40020000 	.word	0x40020000

08001988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198c:	f001 fdaa 	bl	80034e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001990:	f000 f83a 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001994:	f7ff ff5e 	bl	8001854 <MX_GPIO_Init>
  MX_DMA_Init();
 8001998:	f7ff fdee 	bl	8001578 <MX_DMA_Init>
  MX_SPI1_Init();
 800199c:	f000 faa2 	bl	8001ee4 <MX_SPI1_Init>
  MX_TIM10_Init();
 80019a0:	f000 ff2e 	bl	8002800 <MX_TIM10_Init>
  MX_SPI2_Init();
 80019a4:	f000 fad4 	bl	8001f50 <MX_SPI2_Init>
  MX_FATFS_Init();
 80019a8:	f005 f974 	bl	8006c94 <MX_FATFS_Init>
  MX_ADC1_Init();
 80019ac:	f7ff fa64 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM11_Init();
 80019b0:	f000 ff4a 	bl	8002848 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 80019b4:	f000 ffb2 	bl	800291c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80019b8:	f000 fc68 	bl	800228c <ST7735_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <main+0x64>)
 80019be:	f004 f8e7 	bl	8005b90 <HAL_TIM_Base_Start_IT>
  HAL_UART_Init(&huart1);
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <main+0x68>)
 80019c4:	f004 fb3a 	bl	800603c <HAL_UART_Init>
  restartGame(&b, &p1, &p2);
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <main+0x6c>)
 80019ca:	490b      	ldr	r1, [pc, #44]	; (80019f8 <main+0x70>)
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <main+0x74>)
 80019ce:	f7ff fe13 	bl	80015f8 <restartGame>

  HAL_Delay(500);
 80019d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d6:	f001 fdf7 	bl	80035c8 <HAL_Delay>

  sd_err = SD_Init();
 80019da:	f000 f9db 	bl	8001d94 <SD_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <main+0x78>)
 80019e2:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&GAME_TIMER);
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <main+0x7c>)
 80019e6:	f004 f8d3 	bl	8005b90 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80019ea:	e7fe      	b.n	80019ea <main+0x62>
 80019ec:	200006b8 	.word	0x200006b8
 80019f0:	20000700 	.word	0x20000700
 80019f4:	20000124 	.word	0x20000124
 80019f8:	20000114 	.word	0x20000114
 80019fc:	20000138 	.word	0x20000138
 8001a00:	2000010c 	.word	0x2000010c
 8001a04:	20000670 	.word	0x20000670

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fcfe 	bl	8009418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a80:	23a8      	movs	r3, #168	; 0xa8
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 ffa3 	bl	80049dc <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a9c:	f000 f854 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2102      	movs	r1, #2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fa05 	bl	8004ecc <HAL_RCC_ClockConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ac8:	f000 f83e 	bl	8001b48 <Error_Handler>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3750      	adds	r7, #80	; 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM11){
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d103      	bne.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		movePlayersPaddles(&p1, &p2);
 8001aee:	4911      	ldr	r1, [pc, #68]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001af2:	f000 f921 	bl	8001d38 <movePlayersPaddles>
	}
	if(htim->Instance== TIM10){
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d113      	bne.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if(flag==0){
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x40>
		   doGameTick(&b, &p1, &p2);
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b0a:	490b      	ldr	r1, [pc, #44]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b0e:	f7ff fd5b 	bl	80015c8 <doGameTick>
		   checkGameOver(&b, &flag);
 8001b12:	490b      	ldr	r1, [pc, #44]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b16:	f7ff fe69 	bl	80017ec <checkGameOver>
		}
		else{
		   checkRestartGame(&b, &p1, &p2, &flag);
		}
	}
}
 8001b1a:	e005      	b.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x4c>
		   checkRestartGame(&b, &p1, &p2, &flag);
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b20:	4905      	ldr	r1, [pc, #20]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b22:	4808      	ldr	r0, [pc, #32]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b24:	f7ff fe7a 	bl	800181c <checkRestartGame>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40014800 	.word	0x40014800
 8001b34:	20000124 	.word	0x20000124
 8001b38:	20000114 	.word	0x20000114
 8001b3c:	40014400 	.word	0x40014400
 8001b40:	20000110 	.word	0x20000110
 8001b44:	20000138 	.word	0x20000138

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <calculateTilt>:
#include "math.h"
#endif

extern unsigned char bt_receive[];

int calculateTilt(uint32_t var){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	return (int)round(10.0*((var-2048.0)/4096.0)); //przy większych czułościach zamiast 2048 powinien być
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7fe fc7d 	bl	800045c <__aeabi_ui2d>
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <calculateTilt+0x68>)
 8001b68:	f7fe fb3a 	bl	80001e0 <__aeabi_dsub>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <calculateTilt+0x6c>)
 8001b7a:	f7fe fe13 	bl	80007a4 <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <calculateTilt+0x70>)
 8001b8c:	f7fe fce0 	bl	8000550 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	ec43 2b17 	vmov	d7, r2, r3
 8001b98:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9c:	eef0 0a67 	vmov.f32	s1, s15
 8001ba0:	f007 fe62 	bl	8009868 <round>
 8001ba4:	ec53 2b10 	vmov	r2, r3, d0
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe ff6a 	bl	8000a84 <__aeabi_d2iz>
 8001bb0:	4603      	mov	r3, r0
}                                                  //średni odczytany adc_value przy 0 przechyleniu
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40a00000 	.word	0x40a00000
 8001bc0:	40b00000 	.word	0x40b00000
 8001bc4:	40240000 	.word	0x40240000

08001bc8 <movePaddleX>:

void movePaddleX(player *p, int joystick_tilt){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	if(joystick_tilt!=0){
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d038      	beq.n	8001c4a <movePaddleX+0x82>
		int paddle_direction_x = (joystick_tilt>0) ? 0 : 1;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bfd4      	ite	le
 8001bde:	2301      	movle	r3, #1
 8001be0:	2300      	movgt	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	617b      	str	r3, [r7, #20]
	    int paddle_signum = (joystick_tilt>0) ? 1 : -1;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dd01      	ble.n	8001bf0 <movePaddleX+0x28>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e001      	b.n	8001bf4 <movePaddleX+0x2c>
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	613b      	str	r3, [r7, #16]
	    int paddle_limit_x = (p->x+joystick_tilt>=20) ? joystick_tilt : 20-p->x;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2b13      	cmp	r3, #19
 8001c00:	dc04      	bgt.n	8001c0c <movePaddleX+0x44>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1c3 0314 	rsb	r3, r3, #20
 8001c0a:	e000      	b.n	8001c0e <movePaddleX+0x46>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
		paddle_limit_x = (108>=p->x+joystick_tilt) ? paddle_limit_x : 108-p->x;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	2b6c      	cmp	r3, #108	; 0x6c
 8001c1a:	dd04      	ble.n	8001c26 <movePaddleX+0x5e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1c3 036c 	rsb	r3, r3, #108	; 0x6c
 8001c24:	e000      	b.n	8001c28 <movePaddleX+0x60>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	60fb      	str	r3, [r7, #12]

		drawPaddleMovementX(p->x, p->y, paddle_direction_x, paddle_limit_x, paddle_signum);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	f7ff fc15 	bl	8001468 <drawPaddleMovementX>
		p->x=p->x+paddle_limit_x;}
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	441a      	add	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <movePaddleY>:

void movePaddleY(player *p, int joystick_tilt){
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
	if(joystick_tilt!=0){
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d030      	beq.n	8001cc4 <movePaddleY+0x72>
		    	int paddle_direction_y = (0>joystick_tilt) ? 1 : 0;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	0fdb      	lsrs	r3, r3, #31
 8001c66:	60fb      	str	r3, [r7, #12]
		    	int paddle_limit_y = (p->y+joystick_tilt>=p->y_min) ? joystick_tilt : p->y_min-p->y;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	441a      	add	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	da05      	bge.n	8001c84 <movePaddleY+0x32>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	e000      	b.n	8001c86 <movePaddleY+0x34>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	60bb      	str	r3, [r7, #8]
		    	paddle_limit_y = (p->y_max>=p->y+joystick_tilt) ? paddle_limit_y : p->y_max-p->y;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	440b      	add	r3, r1
 8001c94:	429a      	cmp	r2, r3
 8001c96:	da05      	bge.n	8001ca4 <movePaddleY+0x52>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	e000      	b.n	8001ca6 <movePaddleY+0x54>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60bb      	str	r3, [r7, #8]

		    	drawPaddleMovementY(p->x, p->y, paddle_direction_y, paddle_limit_y);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f7ff fc26 	bl	8001504 <drawPaddleMovementY>
		    	p->y=p->y+paddle_limit_y;}
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	605a      	str	r2, [r3, #4]
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <calculateJoystickTilt>:

void calculateJoystickTilt(int *joystick_tilt){
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	uint32_t adc_value[2];
    for (int i = 0; i < 2; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e023      	b.n	8001d22 <calculateJoystickTilt+0x56>
		HAL_ADC_Start(&JOYSTICKS_ADC);
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <calculateJoystickTilt+0x68>)
 8001cdc:	f001 fcdc 	bl	8003698 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&JOYSTICKS_ADC, 480);
 8001ce0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ce4:	4813      	ldr	r0, [pc, #76]	; (8001d34 <calculateJoystickTilt+0x68>)
 8001ce6:	f001 fd8b 	bl	8003800 <HAL_ADC_PollForConversion>
    	adc_value[i] = HAL_ADC_GetValue(&JOYSTICKS_ADC);
 8001cea:	4812      	ldr	r0, [pc, #72]	; (8001d34 <calculateJoystickTilt+0x68>)
 8001cec:	f001 fe13 	bl	8003916 <HAL_ADC_GetValue>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	443b      	add	r3, r7
 8001cfa:	f843 2c0c 	str.w	r2, [r3, #-12]
    	joystick_tilt[i] = calculateTilt(adc_value[i]);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3318      	adds	r3, #24
 8001d04:	443b      	add	r3, r7
 8001d06:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	18d4      	adds	r4, r2, r3
 8001d12:	4608      	mov	r0, r1
 8001d14:	f7ff ff1e 	bl	8001b54 <calculateTilt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 2; i++) {
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	ddd8      	ble.n	8001cda <calculateJoystickTilt+0xe>
    }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000bc 	.word	0x200000bc

08001d38 <movePlayersPaddles>:

void movePlayersPaddles(player *p1, player *p2){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	int joystick_tilt[2];
	calculateJoystickTilt(joystick_tilt);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffc0 	bl	8001ccc <calculateJoystickTilt>
	movePaddleX(p1,-joystick_tilt[0]);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	425b      	negs	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff38 	bl	8001bc8 <movePaddleX>
	movePaddleY(p1,joystick_tilt[1]);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff78 	bl	8001c52 <movePaddleY>
	convertPaddlesToChar(p1, p2);
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fa9f 	bl	80012a8 <convertPaddlesToChar>
	movePaddleX(p2,(int)bt_receive[0]-5);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <movePlayersPaddles+0x58>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b05      	subs	r3, #5
 8001d70:	4619      	mov	r1, r3
 8001d72:	6838      	ldr	r0, [r7, #0]
 8001d74:	f7ff ff28 	bl	8001bc8 <movePaddleX>
	movePaddleY(p2,-((int)bt_receive[1]-5));
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <movePlayersPaddles+0x58>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	f1c3 0305 	rsb	r3, r3, #5
 8001d80:	4619      	mov	r1, r3
 8001d82:	6838      	ldr	r0, [r7, #0]
 8001d84:	f7ff ff65 	bl	8001c52 <movePaddleY>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000104 	.word	0x20000104

08001d94 <SD_Init>:

FATFS FatFs = {0}; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

int SD_Init(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	int err = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
	fres = f_mount(&FatFs, "", 1);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <SD_Init+0x34>)
 8001da2:	480a      	ldr	r0, [pc, #40]	; (8001dcc <SD_Init+0x38>)
 8001da4:	f006 fd24 	bl	80087f0 <f_mount>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <SD_Init+0x3c>)
 8001dae:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) err = 1;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <SD_Init+0x3c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SD_Init+0x28>
 8001db8:	2301      	movs	r3, #1
 8001dba:	607b      	str	r3, [r7, #4]
	return err;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	0800a9b4 	.word	0x0800a9b4
 8001dcc:	20000158 	.word	0x20000158
 8001dd0:	200005b8 	.word	0x200005b8

08001dd4 <SD_saveScore>:

int SD_saveScore(int score){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	int err = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
	char c_score[4];

	fres = f_open(&fil, "score.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001de0:	221a      	movs	r2, #26
 8001de2:	4917      	ldr	r1, [pc, #92]	; (8001e40 <SD_saveScore+0x6c>)
 8001de4:	4817      	ldr	r0, [pc, #92]	; (8001e44 <SD_saveScore+0x70>)
 8001de6:	f006 fd49 	bl	800887c <f_open>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <SD_saveScore+0x74>)
 8001df0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) err = 1;
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <SD_saveScore+0x74>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SD_saveScore+0x2a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]

	itoa(score, c_score, 10);
 8001dfe:	f107 0310 	add.w	r3, r7, #16
 8001e02:	220a      	movs	r2, #10
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f007 faf4 	bl	80093f4 <itoa>

	UINT bytesWrote;
    fres = f_write(&fil, c_score, 4, &bytesWrote);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	f107 0110 	add.w	r1, r7, #16
 8001e14:	2204      	movs	r2, #4
 8001e16:	480b      	ldr	r0, [pc, #44]	; (8001e44 <SD_saveScore+0x70>)
 8001e18:	f007 f82d 	bl	8008e76 <f_write>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <SD_saveScore+0x74>)
 8001e22:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK) err = 2;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <SD_saveScore+0x74>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SD_saveScore+0x5c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	617b      	str	r3, [r7, #20]

    f_close(&fil);
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <SD_saveScore+0x70>)
 8001e32:	f007 fa13 	bl	800925c <f_close>
    //f_mount(NULL, "", 0);
    return err;
 8001e36:	697b      	ldr	r3, [r7, #20]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0800a9b8 	.word	0x0800a9b8
 8001e44:	20000388 	.word	0x20000388
 8001e48:	200005b8 	.word	0x200005b8

08001e4c <SD_readScore>:

int SD_readScore(char *c_score) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001e58:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001e5c:	6018      	str	r0, [r3, #0]
	int err = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	//char c_score[5];

	FIL fil;
	FRESULT fres;

	fres = f_open(&fil, "score.txt", FA_READ);
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2201      	movs	r2, #1
 8001e6a:	491d      	ldr	r1, [pc, #116]	; (8001ee0 <SD_readScore+0x94>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 fd05 	bl	800887c <f_open>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if (fres != FR_OK) {
 8001e78:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <SD_readScore+0x40>
		err = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
		return err;
 8001e86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001e8a:	e024      	b.n	8001ed6 <SD_readScore+0x8a>
	}

	UINT bytesRead;
	fres = f_read(&fil, c_score, 4, &bytesRead);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001e94:	f5a2 7111 	sub.w	r1, r2, #580	; 0x244
 8001e98:	f107 0010 	add.w	r0, r7, #16
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	6809      	ldr	r1, [r1, #0]
 8001ea0:	f006 feaa 	bl	8008bf8 <f_read>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if (fres != FR_OK) {
 8001eaa:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <SD_readScore+0x7c>
		err = 2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
		f_close(&fil);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 f9cd 	bl	800925c <f_close>
		return err;
 8001ec2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001ec6:	e006      	b.n	8001ed6 <SD_readScore+0x8a>
	}

	f_close(&fil);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f007 f9c5 	bl	800925c <f_close>

	//c_score[bytesRead] = '\0';
	//*score = atoi(c_score);

	return err;
 8001ed2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	0800a9b8 	.word	0x0800a9b8

08001ee4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f36:	f003 f9a9 	bl	800528c <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f40:	f7ff fe02 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200005bc 	.word	0x200005bc
 8001f4c:	40013000 	.word	0x40013000

08001f50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <MX_SPI2_Init+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001f9c:	220a      	movs	r2, #10
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_SPI2_Init+0x64>)
 8001fa2:	f003 f973 	bl	800528c <HAL_SPI_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fac:	f7ff fdcc 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000614 	.word	0x20000614
 8001fb8:	40003800 	.word	0x40003800

08001fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08c      	sub	sp, #48	; 0x30
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a32      	ldr	r2, [pc, #200]	; (80020a4 <HAL_SPI_MspInit+0xe8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12c      	bne.n	8002038 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8001fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002016:	23e0      	movs	r3, #224	; 0xe0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002026:	2305      	movs	r3, #5
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	481e      	ldr	r0, [pc, #120]	; (80020ac <HAL_SPI_MspInit+0xf0>)
 8002032:	f002 fb1d 	bl	8004670 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002036:	e031      	b.n	800209c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_SPI_MspInit+0xf4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d12c      	bne.n	800209c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_SPI_MspInit+0xec>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800207a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800208c:	2305      	movs	r3, #5
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <HAL_SPI_MspInit+0xf8>)
 8002098:	f002 faea 	bl	8004670 <HAL_GPIO_Init>
}
 800209c:	bf00      	nop
 800209e:	3730      	adds	r7, #48	; 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40013000 	.word	0x40013000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40003800 	.word	0x40003800
 80020b4:	40020400 	.word	0x40020400

080020b8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <ST7735_Select+0x14>)
 80020c2:	f002 fc71 	bl	80049a8 <HAL_GPIO_WritePin>
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40020400 	.word	0x40020400

080020d0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <ST7735_Unselect+0x14>)
 80020da:	f002 fc65 	bl	80049a8 <HAL_GPIO_WritePin>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40020400 	.word	0x40020400

080020e8 <ST7735_Reset>:

static void ST7735_Reset() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <ST7735_Reset+0x28>)
 80020f4:	f002 fc58 	bl	80049a8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80020f8:	2005      	movs	r0, #5
 80020fa:	f001 fa65 	bl	80035c8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <ST7735_Reset+0x28>)
 8002106:	f002 fc4f 	bl	80049a8 <HAL_GPIO_WritePin>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020400 	.word	0x40020400

08002114 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <ST7735_WriteCommand+0x2c>)
 8002126:	f002 fc3f 	bl	80049a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800212a:	1df9      	adds	r1, r7, #7
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	2201      	movs	r2, #1
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <ST7735_WriteCommand+0x30>)
 8002134:	f003 f933 	bl	800539e <HAL_SPI_Transmit>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40020000 	.word	0x40020000
 8002144:	200005bc 	.word	0x200005bc

08002148 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002158:	4807      	ldr	r0, [pc, #28]	; (8002178 <ST7735_WriteData+0x30>)
 800215a:	f002 fc25 	bl	80049a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b29a      	uxth	r2, r3
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <ST7735_WriteData+0x34>)
 800216a:	f003 f918 	bl	800539e <HAL_SPI_Transmit>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020000 	.word	0x40020000
 800217c:	200005bc 	.word	0x200005bc

08002180 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002192:	e034      	b.n	80021fe <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ffb7 	bl	8002114 <ST7735_WriteCommand>

        numArgs = *addr++;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80021b0:	7abb      	ldrb	r3, [r7, #10]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80021ba:	7abb      	ldrb	r3, [r7, #10]
 80021bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80021c2:	7abb      	ldrb	r3, [r7, #10]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80021c8:	7abb      	ldrb	r3, [r7, #10]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ffbb 	bl	8002148 <ST7735_WriteData>
            addr += numArgs;
 80021d2:	7abb      	ldrb	r3, [r7, #10]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80021ea:	89bb      	ldrh	r3, [r7, #12]
 80021ec:	2bff      	cmp	r3, #255	; 0xff
 80021ee:	d102      	bne.n	80021f6 <ST7735_ExecuteCommandList+0x76>
 80021f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021f4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80021f6:	89bb      	ldrh	r3, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 f9e5 	bl	80035c8 <HAL_Delay>
    while(numCommands--) {
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	73fa      	strb	r2, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1c5      	bne.n	8002194 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002212:	b590      	push	{r4, r7, lr}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	4604      	mov	r4, r0
 800221a:	4608      	mov	r0, r1
 800221c:	4611      	mov	r1, r2
 800221e:	461a      	mov	r2, r3
 8002220:	4623      	mov	r3, r4
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	4603      	mov	r3, r0
 8002226:	71bb      	strb	r3, [r7, #6]
 8002228:	460b      	mov	r3, r1
 800222a:	717b      	strb	r3, [r7, #5]
 800222c:	4613      	mov	r3, r2
 800222e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002230:	202a      	movs	r0, #42	; 0x2a
 8002232:	f7ff ff6f 	bl	8002114 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002236:	2300      	movs	r3, #0
 8002238:	733b      	strb	r3, [r7, #12]
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	3302      	adds	r3, #2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	737b      	strb	r3, [r7, #13]
 8002242:	2300      	movs	r3, #0
 8002244:	73bb      	strb	r3, [r7, #14]
 8002246:	797b      	ldrb	r3, [r7, #5]
 8002248:	3302      	adds	r3, #2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2104      	movs	r1, #4
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff77 	bl	8002148 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800225a:	202b      	movs	r0, #43	; 0x2b
 800225c:	f7ff ff5a 	bl	8002114 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	3301      	adds	r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002268:	793b      	ldrb	r3, [r7, #4]
 800226a:	3301      	adds	r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2104      	movs	r1, #4
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff66 	bl	8002148 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800227c:	202c      	movs	r0, #44	; 0x2c
 800227e:	f7ff ff49 	bl	8002114 <ST7735_WriteCommand>
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
	...

0800228c <ST7735_Init>:

void ST7735_Init() {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002290:	f7ff ff12 	bl	80020b8 <ST7735_Select>
    ST7735_Reset();
 8002294:	f7ff ff28 	bl	80020e8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <ST7735_Init+0x28>)
 800229a:	f7ff ff71 	bl	8002180 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800229e:	4806      	ldr	r0, [pc, #24]	; (80022b8 <ST7735_Init+0x2c>)
 80022a0:	f7ff ff6e 	bl	8002180 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <ST7735_Init+0x30>)
 80022a6:	f7ff ff6b 	bl	8002180 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80022aa:	f7ff ff11 	bl	80020d0 <ST7735_Unselect>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	0800b764 	.word	0x0800b764
 80022b8:	0800b7a0 	.word	0x0800b7a0
 80022bc:	0800b7b0 	.word	0x0800b7b0

080022c0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80022c0:	b082      	sub	sp, #8
 80022c2:	b590      	push	{r4, r7, lr}
 80022c4:	b089      	sub	sp, #36	; 0x24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
 80022ce:	460b      	mov	r3, r1
 80022d0:	80bb      	strh	r3, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	88bb      	ldrh	r3, [r7, #4]
 80022dc:	b2d9      	uxtb	r1, r3
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e6:	4413      	add	r3, r2
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b2dc      	uxtb	r4, r3
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f6:	4413      	add	r3, r2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4622      	mov	r2, r4
 8002300:	f7ff ff87 	bl	8002212 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	e043      	b.n	8002392 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800230a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	3b20      	subs	r3, #32
 8002310:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4619      	mov	r1, r3
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	440b      	add	r3, r1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e029      	b.n	8002380 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800233c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	743b      	strb	r3, [r7, #16]
 8002346:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002348:	b2db      	uxtb	r3, r3
 800234a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	2102      	movs	r1, #2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fef8 	bl	8002148 <ST7735_WriteData>
 8002358:	e00f      	b.n	800237a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800235a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	b29b      	uxth	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	733b      	strb	r3, [r7, #12]
 8002366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800236a:	b2db      	uxtb	r3, r3
 800236c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	2102      	movs	r1, #2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fee7 	bl	8002148 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3301      	adds	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002384:	461a      	mov	r2, r3
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4293      	cmp	r3, r2
 800238a:	d3cf      	bcc.n	800232c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002396:	461a      	mov	r2, r3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4293      	cmp	r3, r2
 800239c:	d3b5      	bcc.n	800230a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3724      	adds	r7, #36	; 0x24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023aa:	b002      	add	sp, #8
 80023ac:	4770      	bx	lr

080023ae <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80023ae:	b082      	sub	sp, #8
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af04      	add	r7, sp, #16
 80023b6:	603a      	str	r2, [r7, #0]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
 80023be:	460b      	mov	r3, r1
 80023c0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80023c2:	f7ff fe79 	bl	80020b8 <ST7735_Select>

    while(*str) {
 80023c6:	e02d      	b.n	8002424 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	7d3a      	ldrb	r2, [r7, #20]
 80023cc:	4413      	add	r3, r2
 80023ce:	2b7f      	cmp	r3, #127	; 0x7f
 80023d0:	dd13      	ble.n	80023fa <ST7735_WriteString+0x4c>
            x = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023d6:	7d7b      	ldrb	r3, [r7, #21]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	88bb      	ldrh	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	7d7a      	ldrb	r2, [r7, #21]
 80023e4:	4413      	add	r3, r2
 80023e6:	2b9f      	cmp	r3, #159	; 0x9f
 80023e8:	dc21      	bgt.n	800242e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d103      	bne.n	80023fa <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	603b      	str	r3, [r7, #0]
                continue;
 80023f8:	e014      	b.n	8002424 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	88b9      	ldrh	r1, [r7, #4]
 8002400:	88f8      	ldrh	r0, [r7, #6]
 8002402:	8c3b      	ldrh	r3, [r7, #32]
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	8bbb      	ldrh	r3, [r7, #28]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f7ff ff56 	bl	80022c0 <ST7735_WriteChar>
        x += font.width;
 8002414:	7d3b      	ldrb	r3, [r7, #20]
 8002416:	b29a      	uxth	r2, r3
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	4413      	add	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
        str++;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1cd      	bne.n	80023c8 <ST7735_WriteString+0x1a>
 800242c:	e000      	b.n	8002430 <ST7735_WriteString+0x82>
                break;
 800242e:	bf00      	nop
    }

    ST7735_Unselect();
 8002430:	f7ff fe4e 	bl	80020d0 <ST7735_Unselect>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800243e:	b002      	add	sp, #8
 8002440:	4770      	bx	lr
	...

08002444 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4623      	mov	r3, r4
 8002454:	80fb      	strh	r3, [r7, #6]
 8002456:	4603      	mov	r3, r0
 8002458:	80bb      	strh	r3, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	807b      	strh	r3, [r7, #2]
 800245e:	4613      	mov	r3, r2
 8002460:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b7f      	cmp	r3, #127	; 0x7f
 8002466:	d858      	bhi.n	800251a <ST7735_FillRectangle+0xd6>
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	2b9f      	cmp	r3, #159	; 0x9f
 800246c:	d855      	bhi.n	800251a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	4413      	add	r3, r2
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	dd03      	ble.n	8002480 <ST7735_FillRectangle+0x3c>
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800247e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002480:	88ba      	ldrh	r2, [r7, #4]
 8002482:	883b      	ldrh	r3, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	2ba0      	cmp	r3, #160	; 0xa0
 8002488:	dd03      	ble.n	8002492 <ST7735_FillRectangle+0x4e>
 800248a:	88bb      	ldrh	r3, [r7, #4]
 800248c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002490:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002492:	f7ff fe11 	bl	80020b8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	b2d8      	uxtb	r0, r3
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	b2d9      	uxtb	r1, r3
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b2dc      	uxtb	r4, r3
 80024ae:	88bb      	ldrh	r3, [r7, #4]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	883b      	ldrh	r3, [r7, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4622      	mov	r2, r4
 80024c0:	f7ff fea7 	bl	8002212 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80024c4:	8c3b      	ldrh	r3, [r7, #32]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	733b      	strb	r3, [r7, #12]
 80024ce:	8c3b      	ldrh	r3, [r7, #32]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024da:	4812      	ldr	r0, [pc, #72]	; (8002524 <ST7735_FillRectangle+0xe0>)
 80024dc:	f002 fa64 	bl	80049a8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80024e0:	883b      	ldrh	r3, [r7, #0]
 80024e2:	80bb      	strh	r3, [r7, #4]
 80024e4:	e013      	b.n	800250e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	80fb      	strh	r3, [r7, #6]
 80024ea:	e00a      	b.n	8002502 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80024ec:	f107 010c 	add.w	r1, r7, #12
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	2202      	movs	r2, #2
 80024f6:	480c      	ldr	r0, [pc, #48]	; (8002528 <ST7735_FillRectangle+0xe4>)
 80024f8:	f002 ff51 	bl	800539e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	3b01      	subs	r3, #1
 8002500:	80fb      	strh	r3, [r7, #6]
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f1      	bne.n	80024ec <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	80bb      	strh	r3, [r7, #4]
 800250e:	88bb      	ldrh	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e8      	bne.n	80024e6 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002514:	f7ff fddc 	bl	80020d0 <ST7735_Unselect>
 8002518:	e000      	b.n	800251c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800251a:	bf00      	nop
}
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	bf00      	nop
 8002524:	40020000 	.word	0x40020000
 8002528:	200005bc 	.word	0x200005bc

0800252c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	4604      	mov	r4, r0
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4623      	mov	r3, r4
 800253c:	80fb      	strh	r3, [r7, #6]
 800253e:	4603      	mov	r3, r0
 8002540:	80bb      	strh	r3, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	807b      	strh	r3, [r7, #2]
 8002546:	4613      	mov	r3, r2
 8002548:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b7f      	cmp	r3, #127	; 0x7f
 800254e:	d86a      	bhi.n	8002626 <ST7735_FillRectangleFast+0xfa>
 8002550:	88bb      	ldrh	r3, [r7, #4]
 8002552:	2b9f      	cmp	r3, #159	; 0x9f
 8002554:	d867      	bhi.n	8002626 <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	4413      	add	r3, r2
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	dd03      	ble.n	8002568 <ST7735_FillRectangleFast+0x3c>
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002566:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002568:	88ba      	ldrh	r2, [r7, #4]
 800256a:	883b      	ldrh	r3, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	2ba0      	cmp	r3, #160	; 0xa0
 8002570:	dd03      	ble.n	800257a <ST7735_FillRectangleFast+0x4e>
 8002572:	88bb      	ldrh	r3, [r7, #4]
 8002574:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002578:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800257a:	f7ff fd9d 	bl	80020b8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2d8      	uxtb	r0, r3
 8002582:	88bb      	ldrh	r3, [r7, #4]
 8002584:	b2d9      	uxtb	r1, r3
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b2dc      	uxtb	r4, r3
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	883b      	ldrh	r3, [r7, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4413      	add	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4622      	mov	r2, r4
 80025a8:	f7ff fe33 	bl	8002212 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80025ac:	8c3b      	ldrh	r3, [r7, #32]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	723b      	strb	r3, [r7, #8]
 80025b6:	8c3b      	ldrh	r3, [r7, #32]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 ff19 	bl	80093f8 <malloc>
 80025c6:	4603      	mov	r3, r0
 80025c8:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80025ca:	2300      	movs	r3, #0
 80025cc:	80fb      	strh	r3, [r7, #6]
 80025ce:	e008      	b.n	80025e2 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	893a      	ldrh	r2, [r7, #8]
 80025da:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	3301      	adds	r3, #1
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3f2      	bcc.n	80025d0 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f0:	480f      	ldr	r0, [pc, #60]	; (8002630 <ST7735_FillRectangleFast+0x104>)
 80025f2:	f002 f9d9 	bl	80049a8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80025f6:	883b      	ldrh	r3, [r7, #0]
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	e00b      	b.n	8002614 <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	68f9      	ldr	r1, [r7, #12]
 8002608:	480a      	ldr	r0, [pc, #40]	; (8002634 <ST7735_FillRectangleFast+0x108>)
 800260a:	f002 fec8 	bl	800539e <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800260e:	88bb      	ldrh	r3, [r7, #4]
 8002610:	3b01      	subs	r3, #1
 8002612:	80bb      	strh	r3, [r7, #4]
 8002614:	88bb      	ldrh	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <ST7735_FillRectangleFast+0xd0>

    free(line);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f006 fef4 	bl	8009408 <free>
    ST7735_Unselect();
 8002620:	f7ff fd56 	bl	80020d0 <ST7735_Unselect>
 8002624:	e000      	b.n	8002628 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002626:	bf00      	nop
}
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	40020000 	.word	0x40020000
 8002634:	200005bc 	.word	0x200005bc

08002638 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af02      	add	r7, sp, #8
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	23a0      	movs	r3, #160	; 0xa0
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	2100      	movs	r1, #0
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff fef9 	bl	8002444 <ST7735_FillRectangle>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af02      	add	r7, sp, #8
 8002660:	4603      	mov	r3, r0
 8002662:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	23a0      	movs	r3, #160	; 0xa0
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	2100      	movs	r1, #0
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff ff5c 	bl	800252c <ST7735_FillRectangleFast>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_MspInit+0x4c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_MspInit+0x4c>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_MspInit+0x4c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_MspInit+0x4c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_MspInit+0x4c>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_MspInit+0x4c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <NMI_Handler+0x4>

080026d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <HardFault_Handler+0x4>

080026d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <MemManage_Handler+0x4>

080026de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <BusFault_Handler+0x4>

080026e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <UsageFault_Handler+0x4>

080026ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002718:	f000 ff36 	bl	8003588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002726:	f003 fac4 	bl	8005cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000670 	.word	0x20000670

08002734 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800273a:	f003 faba 	bl	8005cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200006b8 	.word	0x200006b8

08002748 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <DMA2_Stream2_IRQHandler+0x10>)
 800274e:	f001 fd25 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000744 	.word	0x20000744

0800275c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <DMA2_Stream7_IRQHandler+0x10>)
 8002762:	f001 fd1b 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200007a4 	.word	0x200007a4

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f006 fde6 	bl	8009370 <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20010000 	.word	0x20010000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	2000066c 	.word	0x2000066c
 80027d8:	20000860 	.word	0x20000860

080027dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <SystemInit+0x20>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <SystemInit+0x20>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_TIM10_Init+0x40>)
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <MX_TIM10_Init+0x44>)
 8002808:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 5000-1;
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <MX_TIM10_Init+0x40>)
 800280c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002810:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MX_TIM10_Init+0x40>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_TIM10_Init+0x40>)
 800281a:	22c7      	movs	r2, #199	; 0xc7
 800281c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_TIM10_Init+0x40>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_TIM10_Init+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_TIM10_Init+0x40>)
 800282c:	f003 f960 	bl	8005af0 <HAL_TIM_Base_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002836:	f7ff f987 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000670 	.word	0x20000670
 8002844:	40014400 	.word	0x40014400

08002848 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_TIM11_Init+0x40>)
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <MX_TIM11_Init+0x44>)
 8002850:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <MX_TIM11_Init+0x40>)
 8002854:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002858:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_TIM11_Init+0x40>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_TIM11_Init+0x40>)
 8002862:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002866:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <MX_TIM11_Init+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_TIM11_Init+0x40>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <MX_TIM11_Init+0x40>)
 8002876:	f003 f93b 	bl	8005af0 <HAL_TIM_Base_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002880:	f7ff f962 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200006b8 	.word	0x200006b8
 800288c:	40014800 	.word	0x40014800

08002890 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_TIM_Base_MspInit+0x80>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d116      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2019      	movs	r0, #25
 80028c4:	f001 fb2d 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028c8:	2019      	movs	r0, #25
 80028ca:	f001 fb46 	bl	8003f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80028ce:	e01a      	b.n	8002906 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_TIM_Base_MspInit+0x88>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d115      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_TIM_Base_MspInit+0x84>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201a      	movs	r0, #26
 80028fc:	f001 fb11 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002900:	201a      	movs	r0, #26
 8002902:	f001 fb2a 	bl	8003f5a <HAL_NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40014400 	.word	0x40014400
 8002914:	40023800 	.word	0x40023800
 8002918:	40014800 	.word	0x40014800

0800291c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <MX_USART1_UART_Init+0x50>)
 8002924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002928:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800292c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_USART1_UART_Init+0x4c>)
 8002954:	f003 fb72 	bl	800603c <HAL_UART_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800295e:	f7ff f8f3 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000700 	.word	0x20000700
 800296c:	40011000 	.word	0x40011000

08002970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <HAL_UART_MspInit+0x144>)
 800298e:	4293      	cmp	r3, r2
 8002990:	f040 808b 	bne.w	8002aaa <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_UART_MspInit+0x148>)
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <HAL_UART_MspInit+0x148>)
 800299e:	f043 0310 	orr.w	r3, r3, #16
 80029a2:	6453      	str	r3, [r2, #68]	; 0x44
 80029a4:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_UART_MspInit+0x148>)
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_UART_MspInit+0x148>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a3f      	ldr	r2, [pc, #252]	; (8002ab8 <HAL_UART_MspInit+0x148>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_UART_MspInit+0x148>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029de:	2307      	movs	r3, #7
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4834      	ldr	r0, [pc, #208]	; (8002abc <HAL_UART_MspInit+0x14c>)
 80029ea:	f001 fe41 	bl	8004670 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 80029f0:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <HAL_UART_MspInit+0x154>)
 80029f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 80029f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2a:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a30:	4823      	ldr	r0, [pc, #140]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a32:	f001 faad 	bl	8003f90 <HAL_DMA_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002a3c:	f7ff f884 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_UART_MspInit+0x150>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_UART_MspInit+0x15c>)
 8002a50:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a58:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a5c:	2240      	movs	r2, #64	; 0x40
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a80:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a8e:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002a90:	f001 fa7e 	bl	8003f90 <HAL_DMA_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002a9a:	f7ff f855 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002aa2:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa4:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_UART_MspInit+0x158>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	20000744 	.word	0x20000744
 8002ac4:	40026440 	.word	0x40026440
 8002ac8:	200007a4 	.word	0x200007a4
 8002acc:	400264b8 	.word	0x400264b8

08002ad0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002ad8:	f000 fd6a 	bl	80035b0 <HAL_GetTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <SPI_Timer_On+0x20>)
 8002ae0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <SPI_Timer_On+0x24>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000808 	.word	0x20000808
 8002af4:	2000080c 	.word	0x2000080c

08002af8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002afc:	f000 fd58 	bl	80035b0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <SPI_Timer_Status+0x24>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SPI_Timer_Status+0x28>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	bf34      	ite	cc
 8002b10:	2301      	movcc	r3, #1
 8002b12:	2300      	movcs	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000808 	.word	0x20000808
 8002b20:	2000080c 	.word	0x2000080c

08002b24 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002b2e:	f107 020f 	add.w	r2, r7, #15
 8002b32:	1df9      	adds	r1, r7, #7
 8002b34:	2332      	movs	r3, #50	; 0x32
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4804      	ldr	r0, [pc, #16]	; (8002b4c <xchg_spi+0x28>)
 8002b3c:	f002 fd6b 	bl	8005616 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000614 	.word	0x20000614

08002b50 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e00a      	b.n	8002b76 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	18d4      	adds	r4, r2, r3
 8002b66:	20ff      	movs	r0, #255	; 0xff
 8002b68:	f7ff ffdc 	bl	8002b24 <xchg_spi>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3f0      	bcc.n	8002b60 <rcvr_spi_multi+0x10>
	}
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}

08002b88 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e009      	b.n	8002bac <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ffbf 	bl	8002b24 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3f1      	bcc.n	8002b98 <xmit_spi_multi+0x10>
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002bc6:	f000 fcf3 	bl	80035b0 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002bd0:	20ff      	movs	r0, #255	; 0xff
 8002bd2:	f7ff ffa7 	bl	8002b24 <xchg_spi>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2bff      	cmp	r3, #255	; 0xff
 8002bde:	d007      	beq.n	8002bf0 <wait_ready+0x32>
 8002be0:	f000 fce6 	bl	80035b0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d8ef      	bhi.n	8002bd0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	4803      	ldr	r0, [pc, #12]	; (8002c1c <despiselect+0x18>)
 8002c0e:	f001 fecb 	bl	80049a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002c12:	20ff      	movs	r0, #255	; 0xff
 8002c14:	f7ff ff86 	bl	8002b24 <xchg_spi>

}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40020400 	.word	0x40020400

08002c20 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002c24:	2200      	movs	r2, #0
 8002c26:	2104      	movs	r1, #4
 8002c28:	4809      	ldr	r0, [pc, #36]	; (8002c50 <spiselect+0x30>)
 8002c2a:	f001 febd 	bl	80049a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002c2e:	20ff      	movs	r0, #255	; 0xff
 8002c30:	f7ff ff78 	bl	8002b24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c38:	f7ff ffc1 	bl	8002bbe <wait_ready>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <spiselect+0x26>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e002      	b.n	8002c4c <spiselect+0x2c>

	despiselect();
 8002c46:	f7ff ffdd 	bl	8002c04 <despiselect>
	return 0;	/* Timeout */
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40020400 	.word	0x40020400

08002c54 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002c5e:	20c8      	movs	r0, #200	; 0xc8
 8002c60:	f7ff ff36 	bl	8002ad0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002c64:	20ff      	movs	r0, #255	; 0xff
 8002c66:	f7ff ff5d 	bl	8002b24 <xchg_spi>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2bff      	cmp	r3, #255	; 0xff
 8002c72:	d104      	bne.n	8002c7e <rcvr_datablock+0x2a>
 8002c74:	f7ff ff40 	bl	8002af8 <SPI_Timer_Status>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f2      	bne.n	8002c64 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2bfe      	cmp	r3, #254	; 0xfe
 8002c82:	d001      	beq.n	8002c88 <rcvr_datablock+0x34>
 8002c84:	2300      	movs	r3, #0
 8002c86:	e00a      	b.n	8002c9e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff60 	bl	8002b50 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002c90:	20ff      	movs	r0, #255	; 0xff
 8002c92:	f7ff ff47 	bl	8002b24 <xchg_spi>
 8002c96:	20ff      	movs	r0, #255	; 0xff
 8002c98:	f7ff ff44 	bl	8002b24 <xchg_spi>

	return 1;						/* Function succeeded */
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002cb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cb6:	f7ff ff82 	bl	8002bbe <wait_ready>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <xmit_datablock+0x1e>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e01e      	b.n	8002d02 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff2c 	bl	8002b24 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	2bfd      	cmp	r3, #253	; 0xfd
 8002cd0:	d016      	beq.n	8002d00 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff56 	bl	8002b88 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002cdc:	20ff      	movs	r0, #255	; 0xff
 8002cde:	f7ff ff21 	bl	8002b24 <xchg_spi>
 8002ce2:	20ff      	movs	r0, #255	; 0xff
 8002ce4:	f7ff ff1e 	bl	8002b24 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002ce8:	20ff      	movs	r0, #255	; 0xff
 8002cea:	f7ff ff1b 	bl	8002b24 <xchg_spi>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d001      	beq.n	8002d00 <xmit_datablock+0x5a>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <xmit_datablock+0x5c>
	}
	return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	6039      	str	r1, [r7, #0]
 8002d14:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da0e      	bge.n	8002d3c <send_cmd+0x32>
		cmd &= 0x7F;
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d24:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002d26:	2100      	movs	r1, #0
 8002d28:	2037      	movs	r0, #55	; 0x37
 8002d2a:	f7ff ffee 	bl	8002d0a <send_cmd>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002d32:	7bbb      	ldrb	r3, [r7, #14]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d901      	bls.n	8002d3c <send_cmd+0x32>
 8002d38:	7bbb      	ldrb	r3, [r7, #14]
 8002d3a:	e051      	b.n	8002de0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d008      	beq.n	8002d54 <send_cmd+0x4a>
		despiselect();
 8002d42:	f7ff ff5f 	bl	8002c04 <despiselect>
		if (!spiselect()) return 0xFF;
 8002d46:	f7ff ff6b 	bl	8002c20 <spiselect>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <send_cmd+0x4a>
 8002d50:	23ff      	movs	r3, #255	; 0xff
 8002d52:	e045      	b.n	8002de0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fee1 	bl	8002b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fedb 	bl	8002b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fed5 	bl	8002b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fecf 	bl	8002b24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff feca 	bl	8002b24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <send_cmd+0x94>
 8002d9a:	2395      	movs	r3, #149	; 0x95
 8002d9c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d101      	bne.n	8002da8 <send_cmd+0x9e>
 8002da4:	2387      	movs	r3, #135	; 0x87
 8002da6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff feba 	bl	8002b24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d102      	bne.n	8002dbc <send_cmd+0xb2>
 8002db6:	20ff      	movs	r0, #255	; 0xff
 8002db8:	f7ff feb4 	bl	8002b24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002dbc:	230a      	movs	r3, #10
 8002dbe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002dc0:	20ff      	movs	r0, #255	; 0xff
 8002dc2:	f7ff feaf 	bl	8002b24 <xchg_spi>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002dca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da05      	bge.n	8002dde <send_cmd+0xd4>
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <USER_SPI_initialize+0x14>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d6      	b.n	8002faa <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002dfc:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <USER_SPI_initialize+0x1cc>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <USER_SPI_initialize+0x2a>
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <USER_SPI_initialize+0x1cc>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e0cb      	b.n	8002faa <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002e12:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <USER_SPI_initialize+0x1d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <USER_SPI_initialize+0x1d0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002e24:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002e26:	230a      	movs	r3, #10
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e005      	b.n	8002e38 <USER_SPI_initialize+0x50>
 8002e2c:	20ff      	movs	r0, #255	; 0xff
 8002e2e:	f7ff fe79 	bl	8002b24 <xchg_spi>
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f6      	bne.n	8002e2c <USER_SPI_initialize+0x44>

	ty = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002e42:	2100      	movs	r1, #0
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff ff60 	bl	8002d0a <send_cmd>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 808b 	bne.w	8002f68 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e56:	f7ff fe3b 	bl	8002ad0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002e5a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e5e:	2008      	movs	r0, #8
 8002e60:	f7ff ff53 	bl	8002d0a <send_cmd>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d151      	bne.n	8002f0e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e00d      	b.n	8002e8c <USER_SPI_initialize+0xa4>
 8002e70:	7bfc      	ldrb	r4, [r7, #15]
 8002e72:	20ff      	movs	r0, #255	; 0xff
 8002e74:	f7ff fe56 	bl	8002b24 <xchg_spi>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f104 0310 	add.w	r3, r4, #16
 8002e80:	443b      	add	r3, r7
 8002e82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d9ee      	bls.n	8002e70 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002e92:	7abb      	ldrb	r3, [r7, #10]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d167      	bne.n	8002f68 <USER_SPI_initialize+0x180>
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	2baa      	cmp	r3, #170	; 0xaa
 8002e9c:	d164      	bne.n	8002f68 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002e9e:	bf00      	nop
 8002ea0:	f7ff fe2a 	bl	8002af8 <SPI_Timer_Status>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <USER_SPI_initialize+0xd2>
 8002eaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002eae:	20a9      	movs	r0, #169	; 0xa9
 8002eb0:	f7ff ff2b 	bl	8002d0a <send_cmd>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f2      	bne.n	8002ea0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002eba:	f7ff fe1d 	bl	8002af8 <SPI_Timer_Status>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d051      	beq.n	8002f68 <USER_SPI_initialize+0x180>
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	203a      	movs	r0, #58	; 0x3a
 8002ec8:	f7ff ff1f 	bl	8002d0a <send_cmd>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d14a      	bne.n	8002f68 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e00d      	b.n	8002ef4 <USER_SPI_initialize+0x10c>
 8002ed8:	7bfc      	ldrb	r4, [r7, #15]
 8002eda:	20ff      	movs	r0, #255	; 0xff
 8002edc:	f7ff fe22 	bl	8002b24 <xchg_spi>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f104 0310 	add.w	r3, r4, #16
 8002ee8:	443b      	add	r3, r7
 8002eea:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d9ee      	bls.n	8002ed8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002efa:	7a3b      	ldrb	r3, [r7, #8]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <USER_SPI_initialize+0x120>
 8002f04:	230c      	movs	r3, #12
 8002f06:	e000      	b.n	8002f0a <USER_SPI_initialize+0x122>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	737b      	strb	r3, [r7, #13]
 8002f0c:	e02c      	b.n	8002f68 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002f0e:	2100      	movs	r1, #0
 8002f10:	20a9      	movs	r0, #169	; 0xa9
 8002f12:	f7ff fefa 	bl	8002d0a <send_cmd>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d804      	bhi.n	8002f26 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	737b      	strb	r3, [r7, #13]
 8002f20:	23a9      	movs	r3, #169	; 0xa9
 8002f22:	73bb      	strb	r3, [r7, #14]
 8002f24:	e003      	b.n	8002f2e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002f26:	2301      	movs	r3, #1
 8002f28:	737b      	strb	r3, [r7, #13]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002f2e:	bf00      	nop
 8002f30:	f7ff fde2 	bl	8002af8 <SPI_Timer_Status>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <USER_SPI_initialize+0x162>
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fee3 	bl	8002d0a <send_cmd>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002f4a:	f7ff fdd5 	bl	8002af8 <SPI_Timer_Status>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <USER_SPI_initialize+0x17c>
 8002f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f58:	2010      	movs	r0, #16
 8002f5a:	f7ff fed6 	bl	8002d0a <send_cmd>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <USER_SPI_initialize+0x180>
				ty = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <USER_SPI_initialize+0x1d4>)
 8002f6a:	7b7b      	ldrb	r3, [r7, #13]
 8002f6c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002f6e:	f7ff fe49 	bl	8002c04 <despiselect>

	if (ty) {			/* OK */
 8002f72:	7b7b      	ldrb	r3, [r7, #13]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d012      	beq.n	8002f9e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <USER_SPI_initialize+0x1d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <USER_SPI_initialize+0x1d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0210 	orr.w	r2, r2, #16
 8002f8a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <USER_SPI_initialize+0x1cc>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <USER_SPI_initialize+0x1cc>)
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e002      	b.n	8002fa4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <USER_SPI_initialize+0x1cc>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <USER_SPI_initialize+0x1cc>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2db      	uxtb	r3, r3
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000018 	.word	0x20000018
 8002fb8:	20000614 	.word	0x20000614
 8002fbc:	20000804 	.word	0x20000804

08002fc0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <USER_SPI_status+0x14>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e002      	b.n	8002fda <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <USER_SPI_status+0x28>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000018 	.word	0x20000018

08002fec <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <USER_SPI_read+0x1c>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <USER_SPI_read+0x20>
 8003008:	2304      	movs	r3, #4
 800300a:	e04d      	b.n	80030a8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <USER_SPI_read+0xc4>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <USER_SPI_read+0x32>
 800301a:	2303      	movs	r3, #3
 800301c:	e044      	b.n	80030a8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800301e:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <USER_SPI_read+0xc8>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <USER_SPI_read+0x44>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	025b      	lsls	r3, r3, #9
 800302e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d111      	bne.n	800305a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	2011      	movs	r0, #17
 800303a:	f7ff fe66 	bl	8002d0a <send_cmd>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d129      	bne.n	8003098 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003048:	68b8      	ldr	r0, [r7, #8]
 800304a:	f7ff fe03 	bl	8002c54 <rcvr_datablock>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <USER_SPI_read+0xac>
			count = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	e01e      	b.n	8003098 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	2012      	movs	r0, #18
 800305e:	f7ff fe54 	bl	8002d0a <send_cmd>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d117      	bne.n	8003098 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f7ff fdf1 	bl	8002c54 <rcvr_datablock>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <USER_SPI_read+0xa2>
				buff += 512;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800307e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ed      	bne.n	8003068 <USER_SPI_read+0x7c>
 800308c:	e000      	b.n	8003090 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800308e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003090:	2100      	movs	r1, #0
 8003092:	200c      	movs	r0, #12
 8003094:	f7ff fe39 	bl	8002d0a <send_cmd>
		}
	}
	despiselect();
 8003098:	f7ff fdb4 	bl	8002c04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000018 	.word	0x20000018
 80030b4:	20000804 	.word	0x20000804

080030b8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <USER_SPI_write+0x1c>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <USER_SPI_write+0x20>
 80030d4:	2304      	movs	r3, #4
 80030d6:	e063      	b.n	80031a0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <USER_SPI_write+0xf0>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <USER_SPI_write+0x32>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e05a      	b.n	80031a0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <USER_SPI_write+0xf0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <USER_SPI_write+0x44>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e051      	b.n	80031a0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <USER_SPI_write+0xf4>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <USER_SPI_write+0x56>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	025b      	lsls	r3, r3, #9
 800310c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d110      	bne.n	8003136 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	2018      	movs	r0, #24
 8003118:	f7ff fdf7 	bl	8002d0a <send_cmd>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d136      	bne.n	8003190 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003122:	21fe      	movs	r1, #254	; 0xfe
 8003124:	68b8      	ldr	r0, [r7, #8]
 8003126:	f7ff fdbe 	bl	8002ca6 <xmit_datablock>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02f      	beq.n	8003190 <USER_SPI_write+0xd8>
			count = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	e02c      	b.n	8003190 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <USER_SPI_write+0xf4>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <USER_SPI_write+0x92>
 8003142:	6839      	ldr	r1, [r7, #0]
 8003144:	2097      	movs	r0, #151	; 0x97
 8003146:	f7ff fde0 	bl	8002d0a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	2019      	movs	r0, #25
 800314e:	f7ff fddc 	bl	8002d0a <send_cmd>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11b      	bne.n	8003190 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003158:	21fc      	movs	r1, #252	; 0xfc
 800315a:	68b8      	ldr	r0, [r7, #8]
 800315c:	f7ff fda3 	bl	8002ca6 <xmit_datablock>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <USER_SPI_write+0xc4>
				buff += 512;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800316c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ee      	bne.n	8003158 <USER_SPI_write+0xa0>
 800317a:	e000      	b.n	800317e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800317c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800317e:	21fd      	movs	r1, #253	; 0xfd
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff fd90 	bl	8002ca6 <xmit_datablock>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <USER_SPI_write+0xd8>
 800318c:	2301      	movs	r3, #1
 800318e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003190:	f7ff fd38 	bl	8002c04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf14      	ite	ne
 800319a:	2301      	movne	r3, #1
 800319c:	2300      	moveq	r3, #0
 800319e:	b2db      	uxtb	r3, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000018 	.word	0x20000018
 80031ac:	20000804 	.word	0x20000804

080031b0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	603a      	str	r2, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	460b      	mov	r3, r1
 80031be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <USER_SPI_ioctl+0x1a>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e15a      	b.n	8003480 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80031ca:	4baf      	ldr	r3, [pc, #700]	; (8003488 <USER_SPI_ioctl+0x2d8>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <USER_SPI_ioctl+0x2c>
 80031d8:	2303      	movs	r3, #3
 80031da:	e151      	b.n	8003480 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80031e2:	79bb      	ldrb	r3, [r7, #6]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	f200 8136 	bhi.w	8003456 <USER_SPI_ioctl+0x2a6>
 80031ea:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <USER_SPI_ioctl+0x40>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003205 	.word	0x08003205
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003457 	.word	0x08003457
 80031fc:	080032c5 	.word	0x080032c5
 8003200:	080033bb 	.word	0x080033bb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003204:	f7ff fd0c 	bl	8002c20 <spiselect>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8127 	beq.w	800345e <USER_SPI_ioctl+0x2ae>
 8003210:	2300      	movs	r3, #0
 8003212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003216:	e122      	b.n	800345e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003218:	2100      	movs	r1, #0
 800321a:	2009      	movs	r0, #9
 800321c:	f7ff fd75 	bl	8002d0a <send_cmd>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 811d 	bne.w	8003462 <USER_SPI_ioctl+0x2b2>
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	2110      	movs	r1, #16
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fd10 	bl	8002c54 <rcvr_datablock>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8113 	beq.w	8003462 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800323c:	7b3b      	ldrb	r3, [r7, #12]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d111      	bne.n	800326a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003246:	7d7b      	ldrb	r3, [r7, #21]
 8003248:	461a      	mov	r2, r3
 800324a:	7d3b      	ldrb	r3, [r7, #20]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	4413      	add	r3, r2
 8003250:	461a      	mov	r2, r3
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800325a:	4413      	add	r3, r2
 800325c:	3301      	adds	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	029a      	lsls	r2, r3, #10
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e028      	b.n	80032bc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800326a:	7c7b      	ldrb	r3, [r7, #17]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	b2da      	uxtb	r2, r3
 8003272:	7dbb      	ldrb	r3, [r7, #22]
 8003274:	09db      	lsrs	r3, r3, #7
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4413      	add	r3, r2
 800327a:	b2da      	uxtb	r2, r3
 800327c:	7d7b      	ldrb	r3, [r7, #21]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4413      	add	r3, r2
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3302      	adds	r3, #2
 800328e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003292:	7d3b      	ldrb	r3, [r7, #20]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	7cbb      	ldrb	r3, [r7, #18]
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032a8:	4413      	add	r3, r2
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80032ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032b2:	3b09      	subs	r3, #9
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	409a      	lsls	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80032c2:	e0ce      	b.n	8003462 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80032c4:	4b71      	ldr	r3, [pc, #452]	; (800348c <USER_SPI_ioctl+0x2dc>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d031      	beq.n	8003334 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80032d0:	2100      	movs	r1, #0
 80032d2:	208d      	movs	r0, #141	; 0x8d
 80032d4:	f7ff fd19 	bl	8002d0a <send_cmd>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 80c3 	bne.w	8003466 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80032e0:	20ff      	movs	r0, #255	; 0xff
 80032e2:	f7ff fc1f 	bl	8002b24 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	2110      	movs	r1, #16
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fcb1 	bl	8002c54 <rcvr_datablock>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80b6 	beq.w	8003466 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80032fa:	2330      	movs	r3, #48	; 0x30
 80032fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003300:	e007      	b.n	8003312 <USER_SPI_ioctl+0x162>
 8003302:	20ff      	movs	r0, #255	; 0xff
 8003304:	f7ff fc0e 	bl	8002b24 <xchg_spi>
 8003308:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800330c:	3b01      	subs	r3, #1
 800330e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003312:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f3      	bne.n	8003302 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800331a:	7dbb      	ldrb	r3, [r7, #22]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	2310      	movs	r3, #16
 8003324:	fa03 f202 	lsl.w	r2, r3, r2
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003332:	e098      	b.n	8003466 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003334:	2100      	movs	r1, #0
 8003336:	2009      	movs	r0, #9
 8003338:	f7ff fce7 	bl	8002d0a <send_cmd>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 8091 	bne.w	8003466 <USER_SPI_ioctl+0x2b6>
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	2110      	movs	r1, #16
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fc82 	bl	8002c54 <rcvr_datablock>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <USER_SPI_ioctl+0x2dc>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003364:	7dbb      	ldrb	r3, [r7, #22]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800336c:	7dfa      	ldrb	r2, [r7, #23]
 800336e:	09d2      	lsrs	r2, r2, #7
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4413      	add	r3, r2
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	7e7b      	ldrb	r3, [r7, #25]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	461a      	mov	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e013      	b.n	80033b2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800338a:	7dbb      	ldrb	r3, [r7, #22]
 800338c:	109b      	asrs	r3, r3, #2
 800338e:	b29b      	uxth	r3, r3
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	3301      	adds	r3, #1
 8003396:	7dfa      	ldrb	r2, [r7, #23]
 8003398:	00d2      	lsls	r2, r2, #3
 800339a:	f002 0218 	and.w	r2, r2, #24
 800339e:	7df9      	ldrb	r1, [r7, #23]
 80033a0:	0949      	lsrs	r1, r1, #5
 80033a2:	b2c9      	uxtb	r1, r1
 80033a4:	440a      	add	r2, r1
 80033a6:	3201      	adds	r2, #1
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80033b8:	e055      	b.n	8003466 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <USER_SPI_ioctl+0x2dc>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	f003 0306 	and.w	r3, r3, #6
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d051      	beq.n	800346a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80033c6:	f107 020c 	add.w	r2, r7, #12
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	210b      	movs	r1, #11
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff feee 	bl	80031b0 <USER_SPI_ioctl>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d149      	bne.n	800346e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80033da:	7b3b      	ldrb	r3, [r7, #12]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <USER_SPI_ioctl+0x23e>
 80033e4:	7dbb      	ldrb	r3, [r7, #22]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d041      	beq.n	8003472 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <USER_SPI_ioctl+0x2dc>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	025b      	lsls	r3, r3, #9
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	025b      	lsls	r3, r3, #9
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003418:	2020      	movs	r0, #32
 800341a:	f7ff fc76 	bl	8002d0a <send_cmd>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d128      	bne.n	8003476 <USER_SPI_ioctl+0x2c6>
 8003424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003426:	2021      	movs	r0, #33	; 0x21
 8003428:	f7ff fc6f 	bl	8002d0a <send_cmd>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d121      	bne.n	8003476 <USER_SPI_ioctl+0x2c6>
 8003432:	2100      	movs	r1, #0
 8003434:	2026      	movs	r0, #38	; 0x26
 8003436:	f7ff fc68 	bl	8002d0a <send_cmd>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11a      	bne.n	8003476 <USER_SPI_ioctl+0x2c6>
 8003440:	f247 5030 	movw	r0, #30000	; 0x7530
 8003444:	f7ff fbbb 	bl	8002bbe <wait_ready>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d013      	beq.n	8003476 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800344e:	2300      	movs	r3, #0
 8003450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003454:	e00f      	b.n	8003476 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003456:	2304      	movs	r3, #4
 8003458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800345c:	e00c      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		break;
 800345e:	bf00      	nop
 8003460:	e00a      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		break;
 8003462:	bf00      	nop
 8003464:	e008      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		break;
 8003466:	bf00      	nop
 8003468:	e006      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800346a:	bf00      	nop
 800346c:	e004      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <USER_SPI_ioctl+0x2c8>
		break;
 8003476:	bf00      	nop
	}

	despiselect();
 8003478:	f7ff fbc4 	bl	8002c04 <despiselect>

	return res;
 800347c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003480:	4618      	mov	r0, r3
 8003482:	3730      	adds	r7, #48	; 0x30
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000018 	.word	0x20000018
 800348c:	20000804 	.word	0x20000804

08003490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003494:	480d      	ldr	r0, [pc, #52]	; (80034cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003496:	490e      	ldr	r1, [pc, #56]	; (80034d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800349c:	e002      	b.n	80034a4 <LoopCopyDataInit>

0800349e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034a2:	3304      	adds	r3, #4

080034a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a8:	d3f9      	bcc.n	800349e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034ac:	4c0b      	ldr	r4, [pc, #44]	; (80034dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80034ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034b0:	e001      	b.n	80034b6 <LoopFillZerobss>

080034b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b4:	3204      	adds	r2, #4

080034b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b8:	d3fb      	bcc.n	80034b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034ba:	f7ff f98f 	bl	80027dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034be:	f005 ff5d 	bl	800937c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034c2:	f7fe fa61 	bl	8001988 <main>
  bx  lr    
 80034c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034d0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80034d4:	0800bb90 	.word	0x0800bb90
  ldr r2, =_sbss
 80034d8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80034dc:	20000860 	.word	0x20000860

080034e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034e0:	e7fe      	b.n	80034e0 <ADC_IRQHandler>
	...

080034e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_Init+0x40>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <HAL_Init+0x40>)
 80034ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_Init+0x40>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <HAL_Init+0x40>)
 80034fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_Init+0x40>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_Init+0x40>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800350c:	2003      	movs	r0, #3
 800350e:	f000 fcfd 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003512:	200f      	movs	r0, #15
 8003514:	f000 f808 	bl	8003528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003518:	f7ff f8b0 	bl	800267c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00

08003528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_InitTick+0x54>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_InitTick+0x58>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4619      	mov	r1, r3
 800353a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800353e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fd15 	bl	8003f76 <HAL_SYSTICK_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e00e      	b.n	8003574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d80a      	bhi.n	8003572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800355c:	2200      	movs	r2, #0
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	f000 fcdd 	bl	8003f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003568:	4a06      	ldr	r2, [pc, #24]	; (8003584 <HAL_InitTick+0x5c>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000014 	.word	0x20000014
 8003580:	20000020 	.word	0x20000020
 8003584:	2000001c 	.word	0x2000001c

08003588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_IncTick+0x20>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_IncTick+0x24>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4413      	add	r3, r2
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_IncTick+0x24>)
 800359a:	6013      	str	r3, [r2, #0]
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000020 	.word	0x20000020
 80035ac:	20000810 	.word	0x20000810

080035b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return uwTick;
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_GetTick+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000810 	.word	0x20000810

080035c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d0:	f7ff ffee 	bl	80035b0 <HAL_GetTick>
 80035d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d005      	beq.n	80035ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_Delay+0x44>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035ee:	bf00      	nop
 80035f0:	f7ff ffde 	bl	80035b0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d8f7      	bhi.n	80035f0 <HAL_Delay+0x28>
  {
  }
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000020 	.word	0x20000020

08003610 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e033      	b.n	800368e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fc86 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003656:	f023 0302 	bic.w	r3, r3, #2
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa86 	bl	8003b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
 800367e:	e001      	b.n	8003684 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_Start+0x1a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e097      	b.n	80037e2 <HAL_ADC_Start+0x14a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d018      	beq.n	80036fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036d8:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <HAL_ADC_Start+0x158>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_ADC_Start+0x15c>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0c9a      	lsrs	r2, r3, #18
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80036ec:	e002      	b.n	80036f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f9      	bne.n	80036ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d15f      	bne.n	80037c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003732:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	d106      	bne.n	8003756 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f023 0206 	bic.w	r2, r3, #6
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
 8003754:	e002      	b.n	800375c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_ADC_Start+0x160>)
 8003766:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003770:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d129      	bne.n	80037e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	e020      	b.n	80037e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_ADC_Start+0x164>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d11b      	bne.n	80037e0 <HAL_ADC_Start+0x148>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d114      	bne.n	80037e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	e00b      	b.n	80037e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f043 0210 	orr.w	r2, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000014 	.word	0x20000014
 80037f4:	431bde83 	.word	0x431bde83
 80037f8:	40012300 	.word	0x40012300
 80037fc:	40012000 	.word	0x40012000

08003800 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d113      	bne.n	8003846 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d10b      	bne.n	8003846 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e063      	b.n	800390e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003846:	f7ff feb3 	bl	80035b0 <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800384c:	e021      	b.n	8003892 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d01d      	beq.n	8003892 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_ADC_PollForConversion+0x6c>
 800385c:	f7ff fea8 	bl	80035b0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d212      	bcs.n	8003892 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d00b      	beq.n	8003892 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e03d      	b.n	800390e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d1d6      	bne.n	800384e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0212 	mvn.w	r2, #18
 80038a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d123      	bne.n	800390c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d11f      	bne.n	800390c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1c>
 8003948:	2302      	movs	r3, #2
 800394a:	e105      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x228>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b09      	cmp	r3, #9
 800395a:	d925      	bls.n	80039a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	2207      	movs	r2, #7
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68d9      	ldr	r1, [r3, #12]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	4603      	mov	r3, r0
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4403      	add	r3, r0
 800399a:	3b1e      	subs	r3, #30
 800399c:	409a      	lsls	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e022      	b.n	80039ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6919      	ldr	r1, [r3, #16]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	2207      	movs	r2, #7
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4403      	add	r3, r0
 80039e4:	409a      	lsls	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d824      	bhi.n	8003a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b05      	subs	r3, #5
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b05      	subs	r3, #5
 8003a32:	fa00 f203 	lsl.w	r2, r0, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3e:	e04c      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d824      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b23      	subs	r3, #35	; 0x23
 8003a5a:	221f      	movs	r2, #31
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43da      	mvns	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	400a      	ands	r2, r1
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	3b23      	subs	r3, #35	; 0x23
 8003a84:	fa00 f203 	lsl.w	r2, r0, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a90:	e023      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b41      	subs	r3, #65	; 0x41
 8003aa4:	221f      	movs	r2, #31
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3b41      	subs	r3, #65	; 0x41
 8003ace:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_ADC_ConfigChannel+0x234>)
 8003adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <HAL_ADC_ConfigChannel+0x238>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d109      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x1cc>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b12      	cmp	r3, #18
 8003aee:	d105      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <HAL_ADC_ConfigChannel+0x238>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d123      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d003      	beq.n	8003b16 <HAL_ADC_ConfigChannel+0x1e6>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b11      	cmp	r3, #17
 8003b14:	d11b      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d111      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <HAL_ADC_ConfigChannel+0x23c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_ADC_ConfigChannel+0x240>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	0c9a      	lsrs	r2, r3, #18
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b40:	e002      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f9      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40012300 	.word	0x40012300
 8003b68:	40012000 	.word	0x40012000
 8003b6c:	20000014 	.word	0x20000014
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b7c:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <ADC_Init+0x1f0>)
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <ADC_Init+0x1f4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e00f      	b.n	8003c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0202 	bic.w	r2, r2, #2
 8003c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7e1b      	ldrb	r3, [r3, #24]
 8003c8c:	005a      	lsls	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01b      	beq.n	8003cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	035a      	lsls	r2, r3, #13
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e007      	b.n	8003ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	051a      	lsls	r2, r3, #20
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d2a:	025a      	lsls	r2, r3, #9
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	029a      	lsls	r2, r3, #10
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012300 	.word	0x40012300
 8003d68:	0f000001 	.word	0x0f000001

08003d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
         );
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed8:	d301      	bcc.n	8003ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00f      	b.n	8003efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <SysTick_Config+0x40>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f7ff ff8e 	bl	8003e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <SysTick_Config+0x40>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <SysTick_Config+0x40>)
 8003ef8:	2207      	movs	r2, #7
 8003efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000e010 	.word	0xe000e010

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff29 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f34:	f7ff ff3e 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff8e 	bl	8003e60 <NVIC_EncodePriority>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5d 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff31 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffa2 	bl	8003ec8 <SysTick_Config>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f9c:	f7ff fb08 	bl	80035b0 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e099      	b.n	80040e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fcc:	e00f      	b.n	8003fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fce:	f7ff faef 	bl	80035b0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d908      	bls.n	8003fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e078      	b.n	80040e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e8      	bne.n	8003fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_DMA_Init+0x158>)
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b04      	cmp	r3, #4
 8004046:	d107      	bne.n	8004058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	4313      	orrs	r3, r2
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b04      	cmp	r3, #4
 8004080:	d117      	bne.n	80040b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa6f 	bl	8004578 <DMA_CheckFifoParam>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ae:	2301      	movs	r3, #1
 80040b0:	e016      	b.n	80040e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fa26 	bl	800450c <DMA_CalcBaseAndBitshift>
 80040c0:	4603      	mov	r3, r0
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	223f      	movs	r2, #63	; 0x3f
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	f010803f 	.word	0xf010803f

080040ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Start_IT+0x26>
 800410e:	2302      	movs	r3, #2
 8004110:	e040      	b.n	8004194 <HAL_DMA_Start_IT+0xa8>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d12f      	bne.n	8004186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f9b8 	bl	80044b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	223f      	movs	r2, #63	; 0x3f
 8004146:	409a      	lsls	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0216 	orr.w	r2, r2, #22
 800415a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a8:	4b8e      	ldr	r3, [pc, #568]	; (80043e4 <HAL_DMA_IRQHandler+0x248>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a8e      	ldr	r2, [pc, #568]	; (80043e8 <HAL_DMA_IRQHandler+0x24c>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	2208      	movs	r2, #8
 80041c8:	409a      	lsls	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01a      	beq.n	8004208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	2208      	movs	r2, #8
 80041f6:	409a      	lsls	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f043 0201 	orr.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d012      	beq.n	800423e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2201      	movs	r2, #1
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0202 	orr.w	r2, r3, #2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2204      	movs	r2, #4
 8004244:	409a      	lsls	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	2204      	movs	r2, #4
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	2210      	movs	r2, #16
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d043      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03c      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2210      	movs	r2, #16
 8004298:	409a      	lsls	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d018      	beq.n	80042de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d024      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e01f      	b.n	800430c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e016      	b.n	800430c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0208 	bic.w	r2, r2, #8
 80042fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	2220      	movs	r2, #32
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 808f 	beq.w	800443c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8087 	beq.w	800443c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2220      	movs	r2, #32
 8004334:	409a      	lsls	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b05      	cmp	r3, #5
 8004344:	d136      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0216 	bic.w	r2, r2, #22
 8004354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_DMA_IRQHandler+0x1da>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	223f      	movs	r2, #63	; 0x3f
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
        }
        return;
 80043b2:	e079      	b.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01d      	beq.n	80043fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d031      	beq.n	800443c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
 80043e0:	e02c      	b.n	800443c <HAL_DMA_IRQHandler+0x2a0>
 80043e2:	bf00      	nop
 80043e4:	20000014 	.word	0x20000014
 80043e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d023      	beq.n	800443c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
 80043fc:	e01e      	b.n	800443c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10f      	bne.n	800442c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0210 	bic.w	r2, r2, #16
 800441a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	2b00      	cmp	r3, #0
 8004442:	d032      	beq.n	80044aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d022      	beq.n	8004496 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2205      	movs	r2, #5
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	3301      	adds	r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	d307      	bcc.n	8004484 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f2      	bne.n	8004468 <HAL_DMA_IRQHandler+0x2cc>
 8004482:	e000      	b.n	8004486 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004484:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
 80044a6:	e000      	b.n	80044aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80044a8:	bf00      	nop
    }
  }
}
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d108      	bne.n	80044f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ee:	e007      	b.n	8004500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	3b10      	subs	r3, #16
 800451c:	4a14      	ldr	r2, [pc, #80]	; (8004570 <DMA_CalcBaseAndBitshift+0x64>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004526:	4a13      	ldr	r2, [pc, #76]	; (8004574 <DMA_CalcBaseAndBitshift+0x68>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d909      	bls.n	800454e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	659a      	str	r2, [r3, #88]	; 0x58
 800454c:	e007      	b.n	800455e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004556:	f023 0303 	bic.w	r3, r3, #3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	aaaaaaab 	.word	0xaaaaaaab
 8004574:	0800b7f4 	.word	0x0800b7f4

08004578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11f      	bne.n	80045d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d856      	bhi.n	8004646 <DMA_CheckFifoParam+0xce>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <DMA_CheckFifoParam+0x28>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045c3 	.word	0x080045c3
 80045a8:	080045b1 	.word	0x080045b1
 80045ac:	08004647 	.word	0x08004647
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d046      	beq.n	800464a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e043      	b.n	800464a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ca:	d140      	bne.n	800464e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e03d      	b.n	800464e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	d121      	bne.n	8004620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d837      	bhi.n	8004652 <DMA_CheckFifoParam+0xda>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <DMA_CheckFifoParam+0x70>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	080045ff 	.word	0x080045ff
 80045f0:	080045f9 	.word	0x080045f9
 80045f4:	08004611 	.word	0x08004611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e030      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d025      	beq.n	8004656 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460e:	e022      	b.n	8004656 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004618:	d11f      	bne.n	800465a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800461e:	e01c      	b.n	800465a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d903      	bls.n	800462e <DMA_CheckFifoParam+0xb6>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d003      	beq.n	8004634 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800462c:	e018      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
      break;
 8004632:	e015      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00e      	beq.n	800465e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      break;
 8004644:	e00b      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 8004646:	bf00      	nop
 8004648:	e00a      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
 800464c:	e008      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e006      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e004      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;   
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
    }
  } 
  
  return status; 
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e159      	b.n	8004940 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800468c:	2201      	movs	r2, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	f040 8148 	bne.w	800493a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d005      	beq.n	80046c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d130      	bne.n	8004724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	2203      	movs	r2, #3
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f8:	2201      	movs	r2, #1
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 0201 	and.w	r2, r3, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b03      	cmp	r3, #3
 800472e:	d017      	beq.n	8004760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	2203      	movs	r2, #3
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d123      	bne.n	80047b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	08da      	lsrs	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3208      	adds	r2, #8
 8004774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	220f      	movs	r2, #15
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	08da      	lsrs	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3208      	adds	r2, #8
 80047ae:	69b9      	ldr	r1, [r7, #24]
 80047b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	2203      	movs	r2, #3
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0203 	and.w	r2, r3, #3
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80a2 	beq.w	800493a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	4b57      	ldr	r3, [pc, #348]	; (8004958 <HAL_GPIO_Init+0x2e8>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	4a56      	ldr	r2, [pc, #344]	; (8004958 <HAL_GPIO_Init+0x2e8>)
 8004800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004804:	6453      	str	r3, [r2, #68]	; 0x44
 8004806:	4b54      	ldr	r3, [pc, #336]	; (8004958 <HAL_GPIO_Init+0x2e8>)
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004812:	4a52      	ldr	r2, [pc, #328]	; (800495c <HAL_GPIO_Init+0x2ec>)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	3302      	adds	r3, #2
 800481a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	220f      	movs	r2, #15
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a49      	ldr	r2, [pc, #292]	; (8004960 <HAL_GPIO_Init+0x2f0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d019      	beq.n	8004872 <HAL_GPIO_Init+0x202>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a48      	ldr	r2, [pc, #288]	; (8004964 <HAL_GPIO_Init+0x2f4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_GPIO_Init+0x1fe>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a47      	ldr	r2, [pc, #284]	; (8004968 <HAL_GPIO_Init+0x2f8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00d      	beq.n	800486a <HAL_GPIO_Init+0x1fa>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a46      	ldr	r2, [pc, #280]	; (800496c <HAL_GPIO_Init+0x2fc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <HAL_GPIO_Init+0x1f6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a45      	ldr	r2, [pc, #276]	; (8004970 <HAL_GPIO_Init+0x300>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <HAL_GPIO_Init+0x1f2>
 800485e:	2304      	movs	r3, #4
 8004860:	e008      	b.n	8004874 <HAL_GPIO_Init+0x204>
 8004862:	2307      	movs	r3, #7
 8004864:	e006      	b.n	8004874 <HAL_GPIO_Init+0x204>
 8004866:	2303      	movs	r3, #3
 8004868:	e004      	b.n	8004874 <HAL_GPIO_Init+0x204>
 800486a:	2302      	movs	r3, #2
 800486c:	e002      	b.n	8004874 <HAL_GPIO_Init+0x204>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_GPIO_Init+0x204>
 8004872:	2300      	movs	r3, #0
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	f002 0203 	and.w	r2, r2, #3
 800487a:	0092      	lsls	r2, r2, #2
 800487c:	4093      	lsls	r3, r2
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004884:	4935      	ldr	r1, [pc, #212]	; (800495c <HAL_GPIO_Init+0x2ec>)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	3302      	adds	r3, #2
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004892:	4b38      	ldr	r3, [pc, #224]	; (8004974 <HAL_GPIO_Init+0x304>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048b6:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <HAL_GPIO_Init+0x304>)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_GPIO_Init+0x304>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048e0:	4a24      	ldr	r2, [pc, #144]	; (8004974 <HAL_GPIO_Init+0x304>)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_GPIO_Init+0x304>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800490a:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_GPIO_Init+0x304>)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <HAL_GPIO_Init+0x304>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004934:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_GPIO_Init+0x304>)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3301      	adds	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b0f      	cmp	r3, #15
 8004944:	f67f aea2 	bls.w	800468c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3724      	adds	r7, #36	; 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	40013800 	.word	0x40013800
 8004960:	40020000 	.word	0x40020000
 8004964:	40020400 	.word	0x40020400
 8004968:	40020800 	.word	0x40020800
 800496c:	40020c00 	.word	0x40020c00
 8004970:	40021000 	.word	0x40021000
 8004974:	40013c00 	.word	0x40013c00

08004978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	e001      	b.n	800499a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
 80049b4:	4613      	mov	r3, r2
 80049b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b8:	787b      	ldrb	r3, [r7, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049c4:	e003      	b.n	80049ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	041a      	lsls	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	619a      	str	r2, [r3, #24]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e267      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d075      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fa:	4b88      	ldr	r3, [pc, #544]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d00c      	beq.n	8004a20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a06:	4b85      	ldr	r3, [pc, #532]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d112      	bne.n	8004a38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4b82      	ldr	r3, [pc, #520]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	4b7e      	ldr	r3, [pc, #504]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d05b      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x108>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d157      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e242      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x74>
 8004a42:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a75      	ldr	r2, [pc, #468]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e01d      	b.n	8004a8c <HAL_RCC_OscConfig+0xb0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x98>
 8004a5a:	4b70      	ldr	r3, [pc, #448]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6f      	ldr	r2, [pc, #444]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b6d      	ldr	r3, [pc, #436]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6c      	ldr	r2, [pc, #432]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0xb0>
 8004a74:	4b69      	ldr	r3, [pc, #420]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a68      	ldr	r2, [pc, #416]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b66      	ldr	r3, [pc, #408]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a65      	ldr	r2, [pc, #404]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fe fd8c 	bl	80035b0 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fe fd88 	bl	80035b0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e207      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b5b      	ldr	r3, [pc, #364]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0xc0>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fe fd78 	bl	80035b0 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fe fd74 	bl	80035b0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e1f3      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad6:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0xe8>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d063      	beq.n	8004bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af2:	4b4a      	ldr	r3, [pc, #296]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d11c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b44      	ldr	r3, [pc, #272]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_RCC_OscConfig+0x152>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e1c7      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4937      	ldr	r1, [pc, #220]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b42:	e03a      	b.n	8004bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b4c:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_OscConfig+0x244>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fe fd2d 	bl	80035b0 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5a:	f7fe fd29 	bl	80035b0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e1a8      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6c:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b78:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4925      	ldr	r1, [pc, #148]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]
 8004b8c:	e015      	b.n	8004bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_OscConfig+0x244>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fe fd0c 	bl	80035b0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fe fd08 	bl	80035b0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e187      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d036      	beq.n	8004c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <HAL_RCC_OscConfig+0x248>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fe fcec 	bl	80035b0 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bdc:	f7fe fce8 	bl	80035b0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e167      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x200>
 8004bfa:	e01b      	b.n	8004c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_OscConfig+0x248>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c02:	f7fe fcd5 	bl	80035b0 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c08:	e00e      	b.n	8004c28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0a:	f7fe fcd1 	bl	80035b0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d907      	bls.n	8004c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e150      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	42470000 	.word	0x42470000
 8004c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ea      	bne.n	8004c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8097 	beq.w	8004d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10f      	bne.n	8004c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	4b7d      	ldr	r3, [pc, #500]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a7c      	ldr	r2, [pc, #496]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	4b7a      	ldr	r3, [pc, #488]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c72:	4b77      	ldr	r3, [pc, #476]	; (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d118      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7e:	4b74      	ldr	r3, [pc, #464]	; (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a73      	ldr	r2, [pc, #460]	; (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8a:	f7fe fc91 	bl	80035b0 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c92:	f7fe fc8d 	bl	80035b0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e10c      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x2ea>
 8004cb8:	4b64      	ldr	r3, [pc, #400]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a63      	ldr	r2, [pc, #396]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc4:	e01c      	b.n	8004d00 <HAL_RCC_OscConfig+0x324>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x30c>
 8004cce:	4b5f      	ldr	r3, [pc, #380]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a5e      	ldr	r2, [pc, #376]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cd4:	f043 0304 	orr.w	r3, r3, #4
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cda:	4b5c      	ldr	r3, [pc, #368]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a5b      	ldr	r2, [pc, #364]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0x324>
 8004ce8:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	4a57      	ldr	r2, [pc, #348]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf4:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	4a54      	ldr	r2, [pc, #336]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d015      	beq.n	8004d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fe fc52 	bl	80035b0 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fe fc4e 	bl	80035b0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0cb      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d26:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ee      	beq.n	8004d10 <HAL_RCC_OscConfig+0x334>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d34:	f7fe fc3c 	bl	80035b0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3c:	f7fe fc38 	bl	80035b0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e0b5      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d52:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ee      	bne.n	8004d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d64:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	4a38      	ldr	r2, [pc, #224]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80a1 	beq.w	8004ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d7a:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d05c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d141      	bne.n	8004e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8e:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <HAL_RCC_OscConfig+0x478>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fe fc0c 	bl	80035b0 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fe fc08 	bl	80035b0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e087      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	019b      	lsls	r3, r3, #6
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	491b      	ldr	r1, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <HAL_RCC_OscConfig+0x478>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fe fbe1 	bl	80035b0 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fe fbdd 	bl	80035b0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e05c      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x416>
 8004e10:	e054      	b.n	8004ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <HAL_RCC_OscConfig+0x478>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fe fbca 	bl	80035b0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe fbc6 	bl	80035b0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e045      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x444>
 8004e3e:	e03d      	b.n	8004ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e038      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40007000 	.word	0x40007000
 8004e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCC_OscConfig+0x4ec>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d028      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d121      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d11a      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0cc      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b68      	ldr	r3, [pc, #416]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d90c      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b65      	ldr	r3, [pc, #404]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b63      	ldr	r3, [pc, #396]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0b8      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b59      	ldr	r3, [pc, #356]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a58      	ldr	r2, [pc, #352]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f38:	4b53      	ldr	r3, [pc, #332]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a52      	ldr	r2, [pc, #328]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b50      	ldr	r3, [pc, #320]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	494d      	ldr	r1, [pc, #308]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d044      	beq.n	8004fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d119      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e07f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	4b3f      	ldr	r3, [pc, #252]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e067      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004faa:	4b37      	ldr	r3, [pc, #220]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 0203 	bic.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4934      	ldr	r1, [pc, #208]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fbc:	f7fe faf8 	bl	80035b0 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc4:	f7fe faf4 	bl	80035b0 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e04f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 020c 	and.w	r2, r3, #12
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1eb      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d20c      	bcs.n	8005014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b22      	ldr	r3, [pc, #136]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e032      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4916      	ldr	r1, [pc, #88]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	490e      	ldr	r1, [pc, #56]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005052:	f000 f821 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8005056:	4602      	mov	r2, r0
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	490a      	ldr	r1, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	5ccb      	ldrb	r3, [r1, r3]
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fa58 	bl	8003528 <HAL_InitTick>

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40023c00 	.word	0x40023c00
 8005088:	40023800 	.word	0x40023800
 800508c:	0800b7dc 	.word	0x0800b7dc
 8005090:	20000014 	.word	0x20000014
 8005094:	2000001c 	.word	0x2000001c

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800509c:	b090      	sub	sp, #64	; 0x40
 800509e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
 80050a4:	2300      	movs	r3, #0
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a8:	2300      	movs	r3, #0
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b0:	4b59      	ldr	r3, [pc, #356]	; (8005218 <HAL_RCC_GetSysClockFreq+0x180>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d00d      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x40>
 80050bc:	2b08      	cmp	r3, #8
 80050be:	f200 80a1 	bhi.w	8005204 <HAL_RCC_GetSysClockFreq+0x16c>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x34>
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d003      	beq.n	80050d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ca:	e09b      	b.n	8005204 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050cc:	4b53      	ldr	r3, [pc, #332]	; (800521c <HAL_RCC_GetSysClockFreq+0x184>)
 80050ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80050d0:	e09b      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050d6:	e098      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d8:	4b4f      	ldr	r3, [pc, #316]	; (8005218 <HAL_RCC_GetSysClockFreq+0x180>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e2:	4b4d      	ldr	r3, [pc, #308]	; (8005218 <HAL_RCC_GetSysClockFreq+0x180>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d028      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ee:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <HAL_RCC_GetSysClockFreq+0x180>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	099b      	lsrs	r3, r3, #6
 80050f4:	2200      	movs	r2, #0
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	627a      	str	r2, [r7, #36]	; 0x24
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005100:	2100      	movs	r1, #0
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_GetSysClockFreq+0x188>)
 8005104:	fb03 f201 	mul.w	r2, r3, r1
 8005108:	2300      	movs	r3, #0
 800510a:	fb00 f303 	mul.w	r3, r0, r3
 800510e:	4413      	add	r3, r2
 8005110:	4a43      	ldr	r2, [pc, #268]	; (8005220 <HAL_RCC_GetSysClockFreq+0x188>)
 8005112:	fba0 1202 	umull	r1, r2, r0, r2
 8005116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005118:	460a      	mov	r2, r1
 800511a:	62ba      	str	r2, [r7, #40]	; 0x28
 800511c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511e:	4413      	add	r3, r2
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	2200      	movs	r2, #0
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005132:	f7fb fd1f 	bl	8000b74 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4613      	mov	r3, r2
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513e:	e053      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005140:	4b35      	ldr	r3, [pc, #212]	; (8005218 <HAL_RCC_GetSysClockFreq+0x180>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	2200      	movs	r2, #0
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	617a      	str	r2, [r7, #20]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005152:	f04f 0b00 	mov.w	fp, #0
 8005156:	4652      	mov	r2, sl
 8005158:	465b      	mov	r3, fp
 800515a:	f04f 0000 	mov.w	r0, #0
 800515e:	f04f 0100 	mov.w	r1, #0
 8005162:	0159      	lsls	r1, r3, #5
 8005164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005168:	0150      	lsls	r0, r2, #5
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	ebb2 080a 	subs.w	r8, r2, sl
 8005172:	eb63 090b 	sbc.w	r9, r3, fp
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005182:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005186:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800518a:	ebb2 0408 	subs.w	r4, r2, r8
 800518e:	eb63 0509 	sbc.w	r5, r3, r9
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	00eb      	lsls	r3, r5, #3
 800519c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051a0:	00e2      	lsls	r2, r4, #3
 80051a2:	4614      	mov	r4, r2
 80051a4:	461d      	mov	r5, r3
 80051a6:	eb14 030a 	adds.w	r3, r4, sl
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	eb45 030b 	adc.w	r3, r5, fp
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051be:	4629      	mov	r1, r5
 80051c0:	028b      	lsls	r3, r1, #10
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c8:	4621      	mov	r1, r4
 80051ca:	028a      	lsls	r2, r1, #10
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	2200      	movs	r2, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051dc:	f7fb fcca 	bl	8000b74 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4613      	mov	r3, r2
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	3301      	adds	r3, #1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005202:	e002      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_GetSysClockFreq+0x184>)
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800520c:	4618      	mov	r0, r3
 800520e:	3740      	adds	r7, #64	; 0x40
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	00f42400 	.word	0x00f42400
 8005220:	017d7840 	.word	0x017d7840

08005224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_RCC_GetHCLKFreq+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000014 	.word	0x20000014

0800523c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005240:	f7ff fff0 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	0a9b      	lsrs	r3, r3, #10
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4903      	ldr	r1, [pc, #12]	; (8005260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40023800 	.word	0x40023800
 8005260:	0800b7ec 	.word	0x0800b7ec

08005264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005268:	f7ff ffdc 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0b5b      	lsrs	r3, r3, #13
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4903      	ldr	r1, [pc, #12]	; (8005288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	0800b7ec 	.word	0x0800b7ec

0800528c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e07b      	b.n	8005396 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ae:	d009      	beq.n	80052c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	61da      	str	r2, [r3, #28]
 80052b6:	e005      	b.n	80052c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fe6c 	bl	8001fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	ea42 0103 	orr.w	r1, r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0104 	and.w	r1, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f003 0210 	and.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005384:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b088      	sub	sp, #32
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_SPI_Transmit+0x22>
 80053bc:	2302      	movs	r3, #2
 80053be:	e126      	b.n	800560e <HAL_SPI_Transmit+0x270>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c8:	f7fe f8f2 	bl	80035b0 <HAL_GetTick>
 80053cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053de:	2302      	movs	r3, #2
 80053e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053e2:	e10b      	b.n	80055fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Transmit+0x52>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f4:	e102      	b.n	80055fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2203      	movs	r2, #3
 80053fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d10f      	bne.n	800545e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005484:	d14b      	bne.n	800551e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Transmit+0xf6>
 800548e:	8afb      	ldrh	r3, [r7, #22]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d13e      	bne.n	8005512 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054b8:	e02b      	b.n	8005512 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d112      	bne.n	80054ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80054ec:	e011      	b.n	8005512 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ee:	f7fe f85f 	bl	80035b0 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d803      	bhi.n	8005506 <HAL_SPI_Transmit+0x168>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d102      	bne.n	800550c <HAL_SPI_Transmit+0x16e>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005510:	e074      	b.n	80055fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ce      	bne.n	80054ba <HAL_SPI_Transmit+0x11c>
 800551c:	e04c      	b.n	80055b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_SPI_Transmit+0x18e>
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d140      	bne.n	80055ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005552:	e02c      	b.n	80055ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d113      	bne.n	800558a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	86da      	strh	r2, [r3, #54]	; 0x36
 8005588:	e011      	b.n	80055ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800558a:	f7fe f811 	bl	80035b0 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d803      	bhi.n	80055a2 <HAL_SPI_Transmit+0x204>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d102      	bne.n	80055a8 <HAL_SPI_Transmit+0x20a>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ac:	e026      	b.n	80055fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1cd      	bne.n	8005554 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fa55 	bl	8005a6c <SPI_EndRxTxTransaction>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e000      	b.n	80055fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80055fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800560c:	7ffb      	ldrb	r3, [r7, #31]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08c      	sub	sp, #48	; 0x30
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005624:	2301      	movs	r3, #1
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_SPI_TransmitReceive+0x26>
 8005638:	2302      	movs	r3, #2
 800563a:	e18a      	b.n	8005952 <HAL_SPI_TransmitReceive+0x33c>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005644:	f7fd ffb4 	bl	80035b0 <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800565a:	887b      	ldrh	r3, [r7, #2]
 800565c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800565e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005662:	2b01      	cmp	r3, #1
 8005664:	d00f      	beq.n	8005686 <HAL_SPI_TransmitReceive+0x70>
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566c:	d107      	bne.n	800567e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_SPI_TransmitReceive+0x68>
 8005676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800567a:	2b04      	cmp	r3, #4
 800567c:	d003      	beq.n	8005686 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800567e:	2302      	movs	r3, #2
 8005680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005684:	e15b      	b.n	800593e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_SPI_TransmitReceive+0x82>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_SPI_TransmitReceive+0x82>
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800569e:	e14e      	b.n	800593e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d003      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2205      	movs	r2, #5
 80056b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	887a      	ldrh	r2, [r7, #2]
 80056c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	887a      	ldrh	r2, [r7, #2]
 80056ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	887a      	ldrh	r2, [r7, #2]
 80056d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	887a      	ldrh	r2, [r7, #2]
 80056dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d007      	beq.n	8005708 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005710:	d178      	bne.n	8005804 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x10a>
 800571a:	8b7b      	ldrh	r3, [r7, #26]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d166      	bne.n	80057ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	881a      	ldrh	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	1c9a      	adds	r2, r3, #2
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005744:	e053      	b.n	80057ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b02      	cmp	r3, #2
 8005752:	d11b      	bne.n	800578c <HAL_SPI_TransmitReceive+0x176>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d016      	beq.n	800578c <HAL_SPI_TransmitReceive+0x176>
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d113      	bne.n	800578c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b01      	cmp	r3, #1
 8005798:	d119      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x1b8>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d014      	beq.n	80057ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	b292      	uxth	r2, r2
 80057b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057ca:	2301      	movs	r3, #1
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057ce:	f7fd feef 	bl	80035b0 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057da:	429a      	cmp	r2, r3
 80057dc:	d807      	bhi.n	80057ee <HAL_SPI_TransmitReceive+0x1d8>
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d003      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057ec:	e0a7      	b.n	800593e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1a6      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x130>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1a1      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x130>
 8005802:	e07c      	b.n	80058fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x1fc>
 800580c:	8b7b      	ldrh	r3, [r7, #26]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d16b      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005838:	e057      	b.n	80058ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d11c      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x26c>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <HAL_SPI_TransmitReceive+0x26c>
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d114      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d119      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x2ae>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d014      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058c0:	2301      	movs	r3, #1
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058c4:	f7fd fe74 	bl	80035b0 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d803      	bhi.n	80058dc <HAL_SPI_TransmitReceive+0x2c6>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d102      	bne.n	80058e2 <HAL_SPI_TransmitReceive+0x2cc>
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058e8:	e029      	b.n	800593e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1a2      	bne.n	800583a <HAL_SPI_TransmitReceive+0x224>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d19d      	bne.n	800583a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f8b2 	bl	8005a6c <SPI_EndRxTxTransaction>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d006      	beq.n	800591c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800591a:	e010      	b.n	800593e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	e000      	b.n	800593e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800593c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800594e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005952:	4618      	mov	r0, r3
 8005954:	3730      	adds	r7, #48	; 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800596c:	f7fd fe20 	bl	80035b0 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4413      	add	r3, r2
 800597a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800597c:	f7fd fe18 	bl	80035b0 <HAL_GetTick>
 8005980:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005982:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	015b      	lsls	r3, r3, #5
 8005988:	0d1b      	lsrs	r3, r3, #20
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005992:	e054      	b.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d050      	beq.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599c:	f7fd fe08 	bl	80035b0 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d902      	bls.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d13d      	bne.n	8005a2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ca:	d111      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d4:	d004      	beq.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059de:	d107      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d10f      	bne.n	8005a1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e017      	b.n	8005a5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d19b      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000014 	.word	0x20000014

08005a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <SPI_EndRxTxTransaction+0x7c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <SPI_EndRxTxTransaction+0x80>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0d5b      	lsrs	r3, r3, #21
 8005a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d112      	bne.n	8005abe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff ff5a 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00f      	b.n	8005ade <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d0f2      	beq.n	8005abe <SPI_EndRxTxTransaction+0x52>
 8005ad8:	e000      	b.n	8005adc <SPI_EndRxTxTransaction+0x70>
        break;
 8005ada:	bf00      	nop
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000014 	.word	0x20000014
 8005aec:	165e9f81 	.word	0x165e9f81

08005af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e041      	b.n	8005b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc feba 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 f9f0 	bl	8005f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d001      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e044      	b.n	8005c32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <HAL_TIM_Base_Start_IT+0xb0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd2:	d013      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <HAL_TIM_Base_Start_IT+0xb4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <HAL_TIM_Base_Start_IT+0xb8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <HAL_TIM_Base_Start_IT+0xbc>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a16      	ldr	r2, [pc, #88]	; (8005c50 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d010      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	e007      	b.n	8005c30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40014000 	.word	0x40014000

08005c54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c76:	4013      	ands	r3, r2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <HAL_TIM_Base_Stop_IT+0x48>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	f240 4344 	movw	r3, #1092	; 0x444
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_Base_Stop_IT+0x48>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d122      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0202 	mvn.w	r2, #2
 8005cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f8ee 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005cfa:	e005      	b.n	8005d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8e0 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f8f1 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d122      	bne.n	8005d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d11b      	bne.n	8005d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0204 	mvn.w	r2, #4
 8005d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8c4 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8b6 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8c7 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d122      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11b      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0208 	mvn.w	r2, #8
 8005d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f89a 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005da2:	e005      	b.n	8005db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f88c 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f89d 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d122      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d11b      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0210 	mvn.w	r2, #16
 8005dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2208      	movs	r2, #8
 8005de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f870 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005df6:	e005      	b.n	8005e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f862 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f873 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10e      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0201 	mvn.w	r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fb fe53 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d10e      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8e3 	bl	8006028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d10e      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f838 	bl	8005efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d10e      	bne.n	8005eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0220 	mvn.w	r2, #32
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8ad 	bl	8006014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a34      	ldr	r2, [pc, #208]	; (8005ff8 <TIM_Base_SetConfig+0xe4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <TIM_Base_SetConfig+0x38>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f32:	d00b      	beq.n	8005f4c <TIM_Base_SetConfig+0x38>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a31      	ldr	r2, [pc, #196]	; (8005ffc <TIM_Base_SetConfig+0xe8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_Base_SetConfig+0x38>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a30      	ldr	r2, [pc, #192]	; (8006000 <TIM_Base_SetConfig+0xec>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0x38>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <TIM_Base_SetConfig+0xf0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <TIM_Base_SetConfig+0xe4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01b      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6c:	d017      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <TIM_Base_SetConfig+0xe8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a21      	ldr	r2, [pc, #132]	; (8006000 <TIM_Base_SetConfig+0xec>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00f      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a20      	ldr	r2, [pc, #128]	; (8006004 <TIM_Base_SetConfig+0xf0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <TIM_Base_SetConfig+0xf4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a1e      	ldr	r2, [pc, #120]	; (800600c <TIM_Base_SetConfig+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	; (8006010 <TIM_Base_SetConfig+0xfc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d108      	bne.n	8005fb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <TIM_Base_SetConfig+0xe4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d103      	bne.n	8005fe4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	615a      	str	r2, [r3, #20]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800

08006014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e03f      	b.n	80060ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fc fc84 	bl	8002970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800607e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb93 	bl	80067ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	; 0x30
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d165      	bne.n	80061be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_UART_Transmit_DMA+0x26>
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e05e      	b.n	80061c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_UART_Transmit_DMA+0x38>
 800610c:	2302      	movs	r3, #2
 800610e:	e057      	b.n	80061c0 <HAL_UART_Transmit_DMA+0xe8>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	88fa      	ldrh	r2, [r7, #6]
 8006128:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2221      	movs	r2, #33	; 0x21
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613c:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <HAL_UART_Transmit_DMA+0xf0>)
 800613e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	4a21      	ldr	r2, [pc, #132]	; (80061cc <HAL_UART_Transmit_DMA+0xf4>)
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <HAL_UART_Transmit_DMA+0xf8>)
 800614e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006154:	2200      	movs	r2, #0
 8006156:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006158:	f107 0308 	add.w	r3, r7, #8
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3304      	adds	r3, #4
 800616c:	461a      	mov	r2, r3
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	f7fd ffbc 	bl	80040ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800617c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	617b      	str	r3, [r7, #20]
   return(result);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3314      	adds	r3, #20
 80061a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a6:	627a      	str	r2, [r7, #36]	; 0x24
 80061a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6a39      	ldr	r1, [r7, #32]
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e000      	b.n	80061c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80061be:	2302      	movs	r3, #2
  }
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3730      	adds	r7, #48	; 0x30
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	080062b1 	.word	0x080062b1
 80061cc:	0800634b 	.word	0x0800634b
 80061d0:	080064c3 	.word	0x080064c3

080061d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d11d      	bne.n	800622a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Receive_DMA+0x26>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e016      	b.n	800622c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Receive_DMA+0x38>
 8006208:	2302      	movs	r3, #2
 800620a:	e00f      	b.n	800622c <HAL_UART_Receive_DMA+0x58>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	461a      	mov	r2, r3
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f999 	bl	8006558 <UART_Start_Receive_DMA>
 8006226:	4603      	mov	r3, r0
 8006228:	e000      	b.n	800622c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800622a:	2302      	movs	r3, #2
  }
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b090      	sub	sp, #64	; 0x40
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d137      	bne.n	800633c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80062cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ce:	2200      	movs	r2, #0
 80062d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	623b      	str	r3, [r7, #32]
   return(result);
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f2:	633a      	str	r2, [r7, #48]	; 0x30
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	330c      	adds	r3, #12
 800630c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	60fb      	str	r3, [r7, #12]
   return(result);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006326:	61fa      	str	r2, [r7, #28]
 8006328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	617b      	str	r3, [r7, #20]
   return(result);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e5      	bne.n	8006306 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800633a:	e002      	b.n	8006342 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800633c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800633e:	f7ff ff79 	bl	8006234 <HAL_UART_TxCpltCallback>
}
 8006342:	bf00      	nop
 8006344:	3740      	adds	r7, #64	; 0x40
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ff75 	bl	8006248 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b09c      	sub	sp, #112	; 0x70
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d172      	bne.n	8006468 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006384:	2200      	movs	r2, #0
 8006386:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800639e:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80063aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	667b      	str	r3, [r7, #100]	; 0x64
 80063d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063dc:	647a      	str	r2, [r7, #68]	; 0x44
 80063de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006406:	663b      	str	r3, [r7, #96]	; 0x60
 8006408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3314      	adds	r3, #20
 800640e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006410:	633a      	str	r2, [r7, #48]	; 0x30
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e5      	bne.n	80063f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800642c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	2b01      	cmp	r3, #1
 8006432:	d119      	bne.n	8006468 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	60fb      	str	r3, [r7, #12]
   return(result);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0310 	bic.w	r3, r3, #16
 800644a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006454:	61fa      	str	r2, [r7, #28]
 8006456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	69b9      	ldr	r1, [r7, #24]
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	617b      	str	r3, [r7, #20]
   return(result);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006474:	4619      	mov	r1, r3
 8006476:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006478:	f7ff ff0e 	bl	8006298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800647c:	e002      	b.n	8006484 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800647e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006480:	f7ff feec 	bl	800625c <HAL_UART_RxCpltCallback>
}
 8006484:	bf00      	nop
 8006486:	3770      	adds	r7, #112	; 0x70
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d108      	bne.n	80064b4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	4619      	mov	r1, r3
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff fef3 	bl	8006298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064b2:	e002      	b.n	80064ba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff fedb 	bl	8006270 <HAL_UART_RxHalfCpltCallback>
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b21      	cmp	r3, #33	; 0x21
 80064f4:	d108      	bne.n	8006508 <UART_DMAError+0x46>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f000 f8c6 	bl	8006694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b22      	cmp	r3, #34	; 0x22
 8006528:	d108      	bne.n	800653c <UART_DMAError+0x7a>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006536:	68b8      	ldr	r0, [r7, #8]
 8006538:	f000 f8d4 	bl	80066e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	f043 0210 	orr.w	r2, r3, #16
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006548:	68b8      	ldr	r0, [r7, #8]
 800654a:	f7ff fe9b 	bl	8006284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b098      	sub	sp, #96	; 0x60
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2222      	movs	r2, #34	; 0x22
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	4a40      	ldr	r2, [pc, #256]	; (8006688 <UART_Start_Receive_DMA+0x130>)
 8006586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	4a3f      	ldr	r2, [pc, #252]	; (800668c <UART_Start_Receive_DMA+0x134>)
 800658e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	4a3e      	ldr	r2, [pc, #248]	; (8006690 <UART_Start_Receive_DMA+0x138>)
 8006596:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	2200      	movs	r2, #0
 800659e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065a0:	f107 0308 	add.w	r3, r7, #8
 80065a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	f7fd fd98 	bl	80040ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d019      	beq.n	8006616 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	330c      	adds	r3, #12
 8006600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006602:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006604:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e5      	bne.n	80065e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3314      	adds	r3, #20
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	657b      	str	r3, [r7, #84]	; 0x54
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3314      	adds	r3, #20
 8006634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006636:	63ba      	str	r2, [r7, #56]	; 0x38
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800663c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3314      	adds	r3, #20
 8006650:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	617b      	str	r3, [r7, #20]
   return(result);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006660:	653b      	str	r3, [r7, #80]	; 0x50
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800666a:	627a      	str	r2, [r7, #36]	; 0x24
 800666c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	61fb      	str	r3, [r7, #28]
   return(result);
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3760      	adds	r7, #96	; 0x60
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	08006367 	.word	0x08006367
 800668c:	0800648d 	.word	0x0800648d
 8006690:	080064c3 	.word	0x080064c3

08006694 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	61ba      	str	r2, [r7, #24]
 80066be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6979      	ldr	r1, [r7, #20]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e5      	bne.n	800669c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80066d8:	bf00      	nop
 80066da:	3724      	adds	r7, #36	; 0x24
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b095      	sub	sp, #84	; 0x54
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800670c:	643a      	str	r2, [r7, #64]	; 0x40
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	64bb      	str	r3, [r7, #72]	; 0x48
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3314      	adds	r3, #20
 800673e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	2b01      	cmp	r3, #1
 800675a:	d119      	bne.n	8006790 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	60bb      	str	r3, [r7, #8]
   return(result);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f023 0310 	bic.w	r3, r3, #16
 8006772:	647b      	str	r3, [r7, #68]	; 0x44
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800677c:	61ba      	str	r2, [r7, #24]
 800677e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6979      	ldr	r1, [r7, #20]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	613b      	str	r3, [r7, #16]
   return(result);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800679e:	bf00      	nop
 80067a0:	3754      	adds	r7, #84	; 0x54
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b0c0      	sub	sp, #256	; 0x100
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	ea40 0301 	orr.w	r3, r0, r1
 80067d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006804:	f021 010c 	bic.w	r1, r1, #12
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006812:	430b      	orrs	r3, r1
 8006814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	6999      	ldr	r1, [r3, #24]
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	ea40 0301 	orr.w	r3, r0, r1
 8006832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8f      	ldr	r3, [pc, #572]	; (8006a78 <UART_SetConfig+0x2cc>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d005      	beq.n	800684c <UART_SetConfig+0xa0>
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <UART_SetConfig+0x2d0>)
 8006848:	429a      	cmp	r2, r3
 800684a:	d104      	bne.n	8006856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fe fd0a 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 8006850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006854:	e003      	b.n	800685e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fe fcf1 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 800685a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006868:	f040 810c 	bne.w	8006a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800686c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006870:	2200      	movs	r2, #0
 8006872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800687a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	1891      	adds	r1, r2, r2
 8006884:	65b9      	str	r1, [r7, #88]	; 0x58
 8006886:	415b      	adcs	r3, r3
 8006888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800688a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800688e:	4621      	mov	r1, r4
 8006890:	eb12 0801 	adds.w	r8, r2, r1
 8006894:	4629      	mov	r1, r5
 8006896:	eb43 0901 	adc.w	r9, r3, r1
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ae:	4690      	mov	r8, r2
 80068b0:	4699      	mov	r9, r3
 80068b2:	4623      	mov	r3, r4
 80068b4:	eb18 0303 	adds.w	r3, r8, r3
 80068b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068bc:	462b      	mov	r3, r5
 80068be:	eb49 0303 	adc.w	r3, r9, r3
 80068c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068da:	460b      	mov	r3, r1
 80068dc:	18db      	adds	r3, r3, r3
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
 80068e0:	4613      	mov	r3, r2
 80068e2:	eb42 0303 	adc.w	r3, r2, r3
 80068e6:	657b      	str	r3, [r7, #84]	; 0x54
 80068e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068f0:	f7fa f940 	bl	8000b74 <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4b61      	ldr	r3, [pc, #388]	; (8006a80 <UART_SetConfig+0x2d4>)
 80068fa:	fba3 2302 	umull	r2, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	011c      	lsls	r4, r3, #4
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800690c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	1891      	adds	r1, r2, r2
 800691a:	64b9      	str	r1, [r7, #72]	; 0x48
 800691c:	415b      	adcs	r3, r3
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006924:	4641      	mov	r1, r8
 8006926:	eb12 0a01 	adds.w	sl, r2, r1
 800692a:	4649      	mov	r1, r9
 800692c:	eb43 0b01 	adc.w	fp, r3, r1
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800693c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006944:	4692      	mov	sl, r2
 8006946:	469b      	mov	fp, r3
 8006948:	4643      	mov	r3, r8
 800694a:	eb1a 0303 	adds.w	r3, sl, r3
 800694e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006952:	464b      	mov	r3, r9
 8006954:	eb4b 0303 	adc.w	r3, fp, r3
 8006958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800696c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006970:	460b      	mov	r3, r1
 8006972:	18db      	adds	r3, r3, r3
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
 8006976:	4613      	mov	r3, r2
 8006978:	eb42 0303 	adc.w	r3, r2, r3
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
 800697e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006986:	f7fa f8f5 	bl	8000b74 <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4611      	mov	r1, r2
 8006990:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006992:	fba3 2301 	umull	r2, r3, r3, r1
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2264      	movs	r2, #100	; 0x64
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069a6:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <UART_SetConfig+0x2d4>)
 80069a8:	fba3 2302 	umull	r2, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069b4:	441c      	add	r4, r3
 80069b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	1891      	adds	r1, r2, r2
 80069ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80069d0:	415b      	adcs	r3, r3
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069d8:	4641      	mov	r1, r8
 80069da:	1851      	adds	r1, r2, r1
 80069dc:	6339      	str	r1, [r7, #48]	; 0x30
 80069de:	4649      	mov	r1, r9
 80069e0:	414b      	adcs	r3, r1
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069f0:	4659      	mov	r1, fp
 80069f2:	00cb      	lsls	r3, r1, #3
 80069f4:	4651      	mov	r1, sl
 80069f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fa:	4651      	mov	r1, sl
 80069fc:	00ca      	lsls	r2, r1, #3
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	4642      	mov	r2, r8
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	18db      	adds	r3, r3, r3
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a32:	4613      	mov	r3, r2
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a42:	f7fa f897 	bl	8000b74 <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 0207 	and.w	r2, r3, #7
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4422      	add	r2, r4
 8006a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a74:	e105      	b.n	8006c82 <UART_SetConfig+0x4d6>
 8006a76:	bf00      	nop
 8006a78:	40011000 	.word	0x40011000
 8006a7c:	40011400 	.word	0x40011400
 8006a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a96:	4642      	mov	r2, r8
 8006a98:	464b      	mov	r3, r9
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	6239      	str	r1, [r7, #32]
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1854      	adds	r4, r2, r1
 8006aaa:	4649      	mov	r1, r9
 8006aac:	eb43 0501 	adc.w	r5, r3, r1
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	00eb      	lsls	r3, r5, #3
 8006aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006abe:	00e2      	lsls	r2, r4, #3
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	18e3      	adds	r3, r4, r3
 8006ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006acc:	464b      	mov	r3, r9
 8006ace:	eb45 0303 	adc.w	r3, r5, r3
 8006ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006af2:	4629      	mov	r1, r5
 8006af4:	008b      	lsls	r3, r1, #2
 8006af6:	4621      	mov	r1, r4
 8006af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006afc:	4621      	mov	r1, r4
 8006afe:	008a      	lsls	r2, r1, #2
 8006b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b04:	f7fa f836 	bl	8000b74 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b60      	ldr	r3, [pc, #384]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	61b9      	str	r1, [r7, #24]
 8006b30:	415b      	adcs	r3, r3
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6139      	str	r1, [r7, #16]
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b90:	4649      	mov	r1, r9
 8006b92:	008b      	lsls	r3, r1, #2
 8006b94:	4641      	mov	r1, r8
 8006b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	008a      	lsls	r2, r1, #2
 8006b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ba2:	f7f9 ffe7 	bl	8000b74 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006bac:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2164      	movs	r1, #100	; 0x64
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	4a34      	ldr	r2, [pc, #208]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bca:	441c      	add	r4, r3
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8006bd4:	677a      	str	r2, [r7, #116]	; 0x74
 8006bd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bda:	4642      	mov	r2, r8
 8006bdc:	464b      	mov	r3, r9
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	415b      	adcs	r3, r3
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bea:	4641      	mov	r1, r8
 8006bec:	1851      	adds	r1, r2, r1
 8006bee:	6039      	str	r1, [r7, #0]
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	414b      	adcs	r3, r1
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c02:	4659      	mov	r1, fp
 8006c04:	00cb      	lsls	r3, r1, #3
 8006c06:	4651      	mov	r1, sl
 8006c08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	00ca      	lsls	r2, r1, #3
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	4642      	mov	r2, r8
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	460a      	mov	r2, r1
 8006c20:	eb42 0303 	adc.w	r3, r2, r3
 8006c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c30:	667a      	str	r2, [r7, #100]	; 0x64
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c3e:	4649      	mov	r1, r9
 8006c40:	008b      	lsls	r3, r1, #2
 8006c42:	4641      	mov	r1, r8
 8006c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c48:	4641      	mov	r1, r8
 8006c4a:	008a      	lsls	r2, r1, #2
 8006c4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c50:	f7f9 ff90 	bl	8000b74 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	2164      	movs	r1, #100	; 0x64
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	3332      	adds	r3, #50	; 0x32
 8006c6c:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	f003 020f 	and.w	r2, r3, #15
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4422      	add	r2, r4
 8006c80:	609a      	str	r2, [r3, #8]
}
 8006c82:	bf00      	nop
 8006c84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c8e:	bf00      	nop
 8006c90:	51eb851f 	.word	0x51eb851f

08006c94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006c98:	4904      	ldr	r1, [pc, #16]	; (8006cac <MX_FATFS_Init+0x18>)
 8006c9a:	4805      	ldr	r0, [pc, #20]	; (8006cb0 <MX_FATFS_Init+0x1c>)
 8006c9c:	f002 fb54 	bl	8009348 <FATFS_LinkDriver>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <MX_FATFS_Init+0x20>)
 8006ca6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ca8:	bf00      	nop
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000818 	.word	0x20000818
 8006cb0:	20000024 	.word	0x20000024
 8006cb4:	20000814 	.word	0x20000814

08006cb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006cbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fc f887 	bl	8002de8 <USER_SPI_initialize>
 8006cda:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fc f965 	bl	8002fc0 <USER_SPI_status>
 8006cf6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006d10:	7bf8      	ldrb	r0, [r7, #15]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	f7fc f968 	bl	8002fec <USER_SPI_read>
 8006d1c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006d36:	7bf8      	ldrb	r0, [r7, #15]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	f7fc f9bb 	bl	80030b8 <USER_SPI_write>
 8006d42:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	603a      	str	r2, [r7, #0]
 8006d56:	71fb      	strb	r3, [r7, #7]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006d5c:	79b9      	ldrb	r1, [r7, #6]
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fc fa24 	bl	80031b0 <USER_SPI_ioctl>
 8006d68:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	4a08      	ldr	r2, [pc, #32]	; (8006da4 <disk_status+0x30>)
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	79fa      	ldrb	r2, [r7, #7]
 8006d8c:	4905      	ldr	r1, [pc, #20]	; (8006da4 <disk_status+0x30>)
 8006d8e:	440a      	add	r2, r1
 8006d90:	7a12      	ldrb	r2, [r2, #8]
 8006d92:	4610      	mov	r0, r2
 8006d94:	4798      	blx	r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000844 	.word	0x20000844

08006da8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <disk_initialize+0x48>)
 8006dba:	5cd3      	ldrb	r3, [r2, r3]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d111      	bne.n	8006de4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	4a0b      	ldr	r2, [pc, #44]	; (8006df0 <disk_initialize+0x48>)
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <disk_initialize+0x48>)
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	79fa      	ldrb	r2, [r7, #7]
 8006dd6:	4906      	ldr	r1, [pc, #24]	; (8006df0 <disk_initialize+0x48>)
 8006dd8:	440a      	add	r2, r1
 8006dda:	7a12      	ldrb	r2, [r2, #8]
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000844 	.word	0x20000844

08006df4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <disk_read+0x3c>)
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	689c      	ldr	r4, [r3, #8]
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	4a07      	ldr	r2, [pc, #28]	; (8006e30 <disk_read+0x3c>)
 8006e14:	4413      	add	r3, r2
 8006e16:	7a18      	ldrb	r0, [r3, #8]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	47a0      	blx	r4
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd90      	pop	{r4, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000844 	.word	0x20000844

08006e34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <disk_write+0x3c>)
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68dc      	ldr	r4, [r3, #12]
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	4a07      	ldr	r2, [pc, #28]	; (8006e70 <disk_write+0x3c>)
 8006e54:	4413      	add	r3, r2
 8006e56:	7a18      	ldrb	r0, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	47a0      	blx	r4
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd90      	pop	{r4, r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000844 	.word	0x20000844

08006e74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	603a      	str	r2, [r7, #0]
 8006e7e:	71fb      	strb	r3, [r7, #7]
 8006e80:	460b      	mov	r3, r1
 8006e82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	4a09      	ldr	r2, [pc, #36]	; (8006eac <disk_ioctl+0x38>)
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	79fa      	ldrb	r2, [r7, #7]
 8006e92:	4906      	ldr	r1, [pc, #24]	; (8006eac <disk_ioctl+0x38>)
 8006e94:	440a      	add	r2, r1
 8006e96:	7a10      	ldrb	r0, [r2, #8]
 8006e98:	79b9      	ldrb	r1, [r7, #6]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4798      	blx	r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  return res;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20000844 	.word	0x20000844

08006eb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006ec0:	89fb      	ldrh	r3, [r7, #14]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	b21a      	sxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b21b      	sxth	r3, r3
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	b21b      	sxth	r3, r3
 8006ed0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3303      	adds	r3, #3
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	3202      	adds	r2, #2
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	3201      	adds	r2, #1
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
	return rv;
 8006f18:	68fb      	ldr	r3, [r7, #12]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	887a      	ldrh	r2, [r7, #2]
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	887b      	ldrh	r3, [r7, #2]
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	887a      	ldrh	r2, [r7, #2]
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	0a1b      	lsrs	r3, r3, #8
 8006f9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	1c53      	adds	r3, r2, #1
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	6179      	str	r1, [r7, #20]
 8006fda:	7812      	ldrb	r2, [r2, #0]
 8006fdc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	607b      	str	r3, [r7, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f1      	bne.n	8006fce <mem_cpy+0x1a>
	}
}
 8006fea:	bf00      	nop
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006ff6:	b480      	push	{r7}
 8006ff8:	b087      	sub	sp, #28
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	617a      	str	r2, [r7, #20]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f3      	bne.n	8007006 <mem_set+0x10>
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800702c:	b480      	push	{r7}
 800702e:	b089      	sub	sp, #36	; 0x24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	61fa      	str	r2, [r7, #28]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	61ba      	str	r2, [r7, #24]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	1acb      	subs	r3, r1, r3
 8007058:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3b01      	subs	r3, #1
 800705e:	607b      	str	r3, [r7, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <mem_cmp+0x40>
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0eb      	beq.n	8007044 <mem_cmp+0x18>

	return r;
 800706c:	697b      	ldr	r3, [r7, #20]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3724      	adds	r7, #36	; 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007084:	e002      	b.n	800708c <chk_chr+0x12>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	3301      	adds	r3, #1
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <chk_chr+0x26>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	4293      	cmp	r3, r2
 800709e:	d1f2      	bne.n	8007086 <chk_chr+0xc>
	return *str;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	781b      	ldrb	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e029      	b.n	8007118 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80070c4:	4a27      	ldr	r2, [pc, #156]	; (8007164 <chk_lock+0xb4>)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	4413      	add	r3, r2
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01d      	beq.n	800710e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070d2:	4a24      	ldr	r2, [pc, #144]	; (8007164 <chk_lock+0xb4>)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	4413      	add	r3, r2
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d116      	bne.n	8007112 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80070e4:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <chk_lock+0xb4>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	4413      	add	r3, r2
 80070ec:	3304      	adds	r3, #4
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d10c      	bne.n	8007112 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070f8:	4a1a      	ldr	r2, [pc, #104]	; (8007164 <chk_lock+0xb4>)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	4413      	add	r3, r2
 8007100:	3308      	adds	r3, #8
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007108:	429a      	cmp	r2, r3
 800710a:	d102      	bne.n	8007112 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800710c:	e007      	b.n	800711e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800710e:	2301      	movs	r3, #1
 8007110:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d9d2      	bls.n	80070c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d109      	bne.n	8007138 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <chk_lock+0x80>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d101      	bne.n	8007134 <chk_lock+0x84>
 8007130:	2300      	movs	r3, #0
 8007132:	e010      	b.n	8007156 <chk_lock+0xa6>
 8007134:	2312      	movs	r3, #18
 8007136:	e00e      	b.n	8007156 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d108      	bne.n	8007150 <chk_lock+0xa0>
 800713e:	4a09      	ldr	r2, [pc, #36]	; (8007164 <chk_lock+0xb4>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	4413      	add	r3, r2
 8007146:	330c      	adds	r3, #12
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714e:	d101      	bne.n	8007154 <chk_lock+0xa4>
 8007150:	2310      	movs	r3, #16
 8007152:	e000      	b.n	8007156 <chk_lock+0xa6>
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000824 	.word	0x20000824

08007168 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800716e:	2300      	movs	r3, #0
 8007170:	607b      	str	r3, [r7, #4]
 8007172:	e002      	b.n	800717a <enq_lock+0x12>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3301      	adds	r3, #1
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d806      	bhi.n	800718e <enq_lock+0x26>
 8007180:	4a09      	ldr	r2, [pc, #36]	; (80071a8 <enq_lock+0x40>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	4413      	add	r3, r2
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f2      	bne.n	8007174 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b02      	cmp	r3, #2
 8007192:	bf14      	ite	ne
 8007194:	2301      	movne	r3, #1
 8007196:	2300      	moveq	r3, #0
 8007198:	b2db      	uxtb	r3, r3
}
 800719a:	4618      	mov	r0, r3
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000824 	.word	0x20000824

080071ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e01f      	b.n	80071fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80071bc:	4a41      	ldr	r2, [pc, #260]	; (80072c4 <inc_lock+0x118>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	4413      	add	r3, r2
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d113      	bne.n	80071f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80071ce:	4a3d      	ldr	r2, [pc, #244]	; (80072c4 <inc_lock+0x118>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80071de:	429a      	cmp	r2, r3
 80071e0:	d109      	bne.n	80071f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80071e2:	4a38      	ldr	r2, [pc, #224]	; (80072c4 <inc_lock+0x118>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	4413      	add	r3, r2
 80071ea:	3308      	adds	r3, #8
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d006      	beq.n	8007204 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d9dc      	bls.n	80071bc <inc_lock+0x10>
 8007202:	e000      	b.n	8007206 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007204:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d132      	bne.n	8007272 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e002      	b.n	8007218 <inc_lock+0x6c>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d806      	bhi.n	800722c <inc_lock+0x80>
 800721e:	4a29      	ldr	r2, [pc, #164]	; (80072c4 <inc_lock+0x118>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	4413      	add	r3, r2
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f2      	bne.n	8007212 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d101      	bne.n	8007236 <inc_lock+0x8a>
 8007232:	2300      	movs	r3, #0
 8007234:	e040      	b.n	80072b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4922      	ldr	r1, [pc, #136]	; (80072c4 <inc_lock+0x118>)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	440b      	add	r3, r1
 8007242:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	491e      	ldr	r1, [pc, #120]	; (80072c4 <inc_lock+0x118>)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	440b      	add	r3, r1
 8007250:	3304      	adds	r3, #4
 8007252:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695a      	ldr	r2, [r3, #20]
 8007258:	491a      	ldr	r1, [pc, #104]	; (80072c4 <inc_lock+0x118>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	011b      	lsls	r3, r3, #4
 800725e:	440b      	add	r3, r1
 8007260:	3308      	adds	r3, #8
 8007262:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007264:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <inc_lock+0x118>)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	4413      	add	r3, r2
 800726c:	330c      	adds	r3, #12
 800726e:	2200      	movs	r2, #0
 8007270:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <inc_lock+0xe0>
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <inc_lock+0x118>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	4413      	add	r3, r2
 8007280:	330c      	adds	r3, #12
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <inc_lock+0xe0>
 8007288:	2300      	movs	r3, #0
 800728a:	e015      	b.n	80072b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d108      	bne.n	80072a4 <inc_lock+0xf8>
 8007292:	4a0c      	ldr	r2, [pc, #48]	; (80072c4 <inc_lock+0x118>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	4413      	add	r3, r2
 800729a:	330c      	adds	r3, #12
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	e001      	b.n	80072a8 <inc_lock+0xfc>
 80072a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072a8:	4906      	ldr	r1, [pc, #24]	; (80072c4 <inc_lock+0x118>)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	440b      	add	r3, r1
 80072b0:	330c      	adds	r3, #12
 80072b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20000824 	.word	0x20000824

080072c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d825      	bhi.n	8007328 <dec_lock+0x60>
		n = Files[i].ctr;
 80072dc:	4a17      	ldr	r2, [pc, #92]	; (800733c <dec_lock+0x74>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	4413      	add	r3, r2
 80072e4:	330c      	adds	r3, #12
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80072ea:	89fb      	ldrh	r3, [r7, #14]
 80072ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f0:	d101      	bne.n	80072f6 <dec_lock+0x2e>
 80072f2:	2300      	movs	r3, #0
 80072f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80072f6:	89fb      	ldrh	r3, [r7, #14]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <dec_lock+0x3a>
 80072fc:	89fb      	ldrh	r3, [r7, #14]
 80072fe:	3b01      	subs	r3, #1
 8007300:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007302:	4a0e      	ldr	r2, [pc, #56]	; (800733c <dec_lock+0x74>)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4413      	add	r3, r2
 800730a:	330c      	adds	r3, #12
 800730c:	89fa      	ldrh	r2, [r7, #14]
 800730e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007310:	89fb      	ldrh	r3, [r7, #14]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <dec_lock+0x5a>
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <dec_lock+0x74>)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	4413      	add	r3, r2
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	737b      	strb	r3, [r7, #13]
 8007326:	e001      	b.n	800732c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007328:	2302      	movs	r3, #2
 800732a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800732c:	7b7b      	ldrb	r3, [r7, #13]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20000824 	.word	0x20000824

08007340 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e010      	b.n	8007370 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800734e:	4a0d      	ldr	r2, [pc, #52]	; (8007384 <clear_lock+0x44>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	4413      	add	r3, r2
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d105      	bne.n	800736a <clear_lock+0x2a>
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <clear_lock+0x44>)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4413      	add	r3, r2
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d9eb      	bls.n	800734e <clear_lock+0xe>
	}
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	20000824 	.word	0x20000824

08007388 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	78db      	ldrb	r3, [r3, #3]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d034      	beq.n	8007406 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7858      	ldrb	r0, [r3, #1]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073ac:	2301      	movs	r3, #1
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	f7ff fd40 	bl	8006e34 <disk_write>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e022      	b.n	8007406 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	1ad2      	subs	r2, r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d217      	bcs.n	8007406 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	789b      	ldrb	r3, [r3, #2]
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	e010      	b.n	8007400 <sync_window+0x78>
					wsect += fs->fsize;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4413      	add	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7858      	ldrb	r0, [r3, #1]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073f2:	2301      	movs	r3, #1
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	f7ff fd1d 	bl	8006e34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d8eb      	bhi.n	80073de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d01b      	beq.n	8007460 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ffad 	bl	8007388 <sync_window>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d113      	bne.n	8007460 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7858      	ldrb	r0, [r3, #1]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007442:	2301      	movs	r3, #1
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	f7ff fcd5 	bl	8006df4 <disk_read>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007450:	f04f 33ff 	mov.w	r3, #4294967295
 8007454:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff ff87 	bl	8007388 <sync_window>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d158      	bne.n	8007536 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d148      	bne.n	800751e <sync_fs+0xb2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	791b      	ldrb	r3, [r3, #4]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d144      	bne.n	800751e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3330      	adds	r3, #48	; 0x30
 8007498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fda9 	bl	8006ff6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3330      	adds	r3, #48	; 0x30
 80074a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fd38 	bl	8006f26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3330      	adds	r3, #48	; 0x30
 80074ba:	4921      	ldr	r1, [pc, #132]	; (8007540 <sync_fs+0xd4>)
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fd4d 	bl	8006f5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3330      	adds	r3, #48	; 0x30
 80074c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074ca:	491e      	ldr	r1, [pc, #120]	; (8007544 <sync_fs+0xd8>)
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fd45 	bl	8006f5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3330      	adds	r3, #48	; 0x30
 80074d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f7ff fd3b 	bl	8006f5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3330      	adds	r3, #48	; 0x30
 80074ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7ff fd31 	bl	8006f5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7858      	ldrb	r0, [r3, #1]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	2301      	movs	r3, #1
 8007514:	f7ff fc8e 	bl	8006e34 <disk_write>
			fs->fsi_flag = 0;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2200      	movs	r2, #0
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fca4 	bl	8006e74 <disk_ioctl>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <sync_fs+0xca>
 8007532:	2301      	movs	r3, #1
 8007534:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	41615252 	.word	0x41615252
 8007544:	61417272 	.word	0x61417272

08007548 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	3b02      	subs	r3, #2
 8007556:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	3b02      	subs	r3, #2
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d301      	bcc.n	8007568 <clust2sect+0x20>
 8007564:	2300      	movs	r3, #0
 8007566:	e008      	b.n	800757a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	895b      	ldrh	r3, [r3, #10]
 800756c:	461a      	mov	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	fb03 f202 	mul.w	r2, r3, r2
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	4413      	add	r3, r2
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d904      	bls.n	80075a6 <get_fat+0x20>
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e08f      	b.n	80076cc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295
 80075b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d062      	beq.n	8007680 <get_fat+0xfa>
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	dc7c      	bgt.n	80076b8 <get_fat+0x132>
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d002      	beq.n	80075c8 <get_fat+0x42>
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d042      	beq.n	800764c <get_fat+0xc6>
 80075c6:	e077      	b.n	80076b8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	0a5b      	lsrs	r3, r3, #9
 80075de:	4413      	add	r3, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	6938      	ldr	r0, [r7, #16]
 80075e4:	f7ff ff14 	bl	8007410 <move_window>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d167      	bne.n	80076be <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	60fa      	str	r2, [r7, #12]
 80075f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007600:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	0a5b      	lsrs	r3, r3, #9
 800760a:	4413      	add	r3, r2
 800760c:	4619      	mov	r1, r3
 800760e:	6938      	ldr	r0, [r7, #16]
 8007610:	f7ff fefe 	bl	8007410 <move_window>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d153      	bne.n	80076c2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4413      	add	r3, r2
 8007624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	461a      	mov	r2, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4313      	orrs	r3, r2
 8007630:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <get_fat+0xbc>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	e002      	b.n	8007648 <get_fat+0xc2>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007648:	617b      	str	r3, [r7, #20]
			break;
 800764a:	e03f      	b.n	80076cc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	4413      	add	r3, r2
 8007656:	4619      	mov	r1, r3
 8007658:	6938      	ldr	r0, [r7, #16]
 800765a:	f7ff fed9 	bl	8007410 <move_window>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d130      	bne.n	80076c6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007672:	4413      	add	r3, r2
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fc1b 	bl	8006eb0 <ld_word>
 800767a:	4603      	mov	r3, r0
 800767c:	617b      	str	r3, [r7, #20]
			break;
 800767e:	e025      	b.n	80076cc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	09db      	lsrs	r3, r3, #7
 8007688:	4413      	add	r3, r2
 800768a:	4619      	mov	r1, r3
 800768c:	6938      	ldr	r0, [r7, #16]
 800768e:	f7ff febf 	bl	8007410 <move_window>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d118      	bne.n	80076ca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076a6:	4413      	add	r3, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fc19 	bl	8006ee0 <ld_dword>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076b4:	617b      	str	r3, [r7, #20]
			break;
 80076b6:	e009      	b.n	80076cc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80076b8:	2301      	movs	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	e006      	b.n	80076cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076be:	bf00      	nop
 80076c0:	e004      	b.n	80076cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076c2:	bf00      	nop
 80076c4:	e002      	b.n	80076cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076ca:	bf00      	nop
		}
	}

	return val;
 80076cc:	697b      	ldr	r3, [r7, #20]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80076d6:	b590      	push	{r4, r7, lr}
 80076d8:	b089      	sub	sp, #36	; 0x24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80076e2:	2302      	movs	r3, #2
 80076e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f240 80d2 	bls.w	8007892 <put_fat+0x1bc>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f080 80cc 	bcs.w	8007892 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f000 8096 	beq.w	8007830 <put_fat+0x15a>
 8007704:	2b03      	cmp	r3, #3
 8007706:	f300 80cd 	bgt.w	80078a4 <put_fat+0x1ce>
 800770a:	2b01      	cmp	r3, #1
 800770c:	d002      	beq.n	8007714 <put_fat+0x3e>
 800770e:	2b02      	cmp	r3, #2
 8007710:	d06e      	beq.n	80077f0 <put_fat+0x11a>
 8007712:	e0c7      	b.n	80078a4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	4413      	add	r3, r2
 8007720:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	0a5b      	lsrs	r3, r3, #9
 800772a:	4413      	add	r3, r2
 800772c:	4619      	mov	r1, r3
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fe6e 	bl	8007410 <move_window>
 8007734:	4603      	mov	r3, r0
 8007736:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007738:	7ffb      	ldrb	r3, [r7, #31]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80ab 	bne.w	8007896 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	1c59      	adds	r1, r3, #1
 800774a:	61b9      	str	r1, [r7, #24]
 800774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <put_fat+0xa4>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b25b      	sxtb	r3, r3
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	b25a      	sxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	b25b      	sxtb	r3, r3
 8007772:	4313      	orrs	r3, r2
 8007774:	b25b      	sxtb	r3, r3
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e001      	b.n	800777e <put_fat+0xa8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a1a      	ldr	r2, [r3, #32]
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	0a5b      	lsrs	r3, r3, #9
 8007790:	4413      	add	r3, r2
 8007792:	4619      	mov	r1, r3
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff fe3b 	bl	8007410 <move_window>
 800779a:	4603      	mov	r3, r0
 800779c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800779e:	7ffb      	ldrb	r3, [r7, #31]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d17a      	bne.n	800789a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b0:	4413      	add	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <put_fat+0xf0>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	091b      	lsrs	r3, r3, #4
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	e00e      	b.n	80077e4 <put_fat+0x10e>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	f023 030f 	bic.w	r3, r3, #15
 80077d0:	b25a      	sxtb	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	0a1b      	lsrs	r3, r3, #8
 80077d6:	b25b      	sxtb	r3, r3
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	b25b      	sxtb	r3, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	70da      	strb	r2, [r3, #3]
			break;
 80077ee:	e059      	b.n	80078a4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	4413      	add	r3, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff fe07 	bl	8007410 <move_window>
 8007802:	4603      	mov	r3, r0
 8007804:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007806:	7ffb      	ldrb	r3, [r7, #31]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d148      	bne.n	800789e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800781a:	4413      	add	r3, r2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	b292      	uxth	r2, r2
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff fb7f 	bl	8006f26 <st_word>
			fs->wflag = 1;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	70da      	strb	r2, [r3, #3]
			break;
 800782e:	e039      	b.n	80078a4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a1a      	ldr	r2, [r3, #32]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	09db      	lsrs	r3, r3, #7
 8007838:	4413      	add	r3, r2
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff fde7 	bl	8007410 <move_window>
 8007842:	4603      	mov	r3, r0
 8007844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007846:	7ffb      	ldrb	r3, [r7, #31]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d12a      	bne.n	80078a2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007860:	4413      	add	r3, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fb3c 	bl	8006ee0 <ld_dword>
 8007868:	4603      	mov	r3, r0
 800786a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800786e:	4323      	orrs	r3, r4
 8007870:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007880:	4413      	add	r3, r2
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fb69 	bl	8006f5c <st_dword>
			fs->wflag = 1;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	70da      	strb	r2, [r3, #3]
			break;
 8007890:	e008      	b.n	80078a4 <put_fat+0x1ce>
		}
	}
 8007892:	bf00      	nop
 8007894:	e006      	b.n	80078a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80078a2:	bf00      	nop
	return res;
 80078a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3724      	adds	r7, #36	; 0x24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd90      	pop	{r4, r7, pc}

080078ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b088      	sub	sp, #32
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d904      	bls.n	80078d4 <remove_chain+0x26>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d301      	bcc.n	80078d8 <remove_chain+0x2a>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e04b      	b.n	8007970 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00c      	beq.n	80078f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	69b8      	ldr	r0, [r7, #24]
 80078e6:	f7ff fef6 	bl	80076d6 <put_fat>
 80078ea:	4603      	mov	r3, r0
 80078ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80078ee:	7ffb      	ldrb	r3, [r7, #31]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <remove_chain+0x4a>
 80078f4:	7ffb      	ldrb	r3, [r7, #31]
 80078f6:	e03b      	b.n	8007970 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fe43 	bl	8007586 <get_fat>
 8007900:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d031      	beq.n	800796c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d101      	bne.n	8007912 <remove_chain+0x64>
 800790e:	2302      	movs	r3, #2
 8007910:	e02e      	b.n	8007970 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d101      	bne.n	800791e <remove_chain+0x70>
 800791a:	2301      	movs	r3, #1
 800791c:	e028      	b.n	8007970 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800791e:	2200      	movs	r2, #0
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	69b8      	ldr	r0, [r7, #24]
 8007924:	f7ff fed7 	bl	80076d6 <put_fat>
 8007928:	4603      	mov	r3, r0
 800792a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800792c:	7ffb      	ldrb	r3, [r7, #31]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <remove_chain+0x88>
 8007932:	7ffb      	ldrb	r3, [r7, #31]
 8007934:	e01c      	b.n	8007970 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	3b02      	subs	r3, #2
 8007940:	429a      	cmp	r2, r3
 8007942:	d20b      	bcs.n	800795c <remove_chain+0xae>
			fs->free_clst++;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d3c6      	bcc.n	80078f8 <remove_chain+0x4a>
 800796a:	e000      	b.n	800796e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800796c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10d      	bne.n	80079aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <create_chain+0x2c>
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d31b      	bcc.n	80079dc <create_chain+0x64>
 80079a4:	2301      	movs	r3, #1
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e018      	b.n	80079dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fdea 	bl	8007586 <get_fat>
 80079b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d801      	bhi.n	80079be <create_chain+0x46>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e070      	b.n	8007aa0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d101      	bne.n	80079ca <create_chain+0x52>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	e06a      	b.n	8007aa0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d201      	bcs.n	80079d8 <create_chain+0x60>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	e063      	b.n	8007aa0 <create_chain+0x128>
		scl = clst;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d307      	bcc.n	8007a00 <create_chain+0x88>
				ncl = 2;
 80079f0:	2302      	movs	r3, #2
 80079f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d901      	bls.n	8007a00 <create_chain+0x88>
 80079fc:	2300      	movs	r3, #0
 80079fe:	e04f      	b.n	8007aa0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a00:	69f9      	ldr	r1, [r7, #28]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fdbf 	bl	8007586 <get_fat>
 8007a08:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d003      	beq.n	8007a1e <create_chain+0xa6>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d101      	bne.n	8007a22 <create_chain+0xaa>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e03e      	b.n	8007aa0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d1da      	bne.n	80079e0 <create_chain+0x68>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e038      	b.n	8007aa0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a2e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	69f9      	ldr	r1, [r7, #28]
 8007a36:	6938      	ldr	r0, [r7, #16]
 8007a38:	f7ff fe4d 	bl	80076d6 <put_fat>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <create_chain+0xe2>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d006      	beq.n	8007a5a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6938      	ldr	r0, [r7, #16]
 8007a52:	f7ff fe40 	bl	80076d6 <put_fat>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d116      	bne.n	8007a8e <create_chain+0x116>
		fs->last_clst = ncl;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	3b02      	subs	r3, #2
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d804      	bhi.n	8007a7e <create_chain+0x106>
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	1e5a      	subs	r2, r3, #1
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	791b      	ldrb	r3, [r3, #4]
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	711a      	strb	r2, [r3, #4]
 8007a8c:	e007      	b.n	8007a9e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d102      	bne.n	8007a9a <create_chain+0x122>
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	e000      	b.n	8007a9c <create_chain+0x124>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a9e:	69fb      	ldr	r3, [r7, #28]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	3304      	adds	r3, #4
 8007abe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	0a5b      	lsrs	r3, r3, #9
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	8952      	ldrh	r2, [r2, #10]
 8007ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	1d1a      	adds	r2, r3, #4
 8007ad2:	613a      	str	r2, [r7, #16]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <clmt_clust+0x3a>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e010      	b.n	8007b04 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d307      	bcc.n	8007afa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	617b      	str	r3, [r7, #20]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3304      	adds	r3, #4
 8007af6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007af8:	e7e9      	b.n	8007ace <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007afa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	4413      	add	r3, r2
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b26:	d204      	bcs.n	8007b32 <dir_sdi+0x22>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b32:	2302      	movs	r3, #2
 8007b34:	e063      	b.n	8007bfe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <dir_sdi+0x46>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d902      	bls.n	8007b56 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	8912      	ldrh	r2, [r2, #8]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d301      	bcc.n	8007b6c <dir_sdi+0x5c>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e048      	b.n	8007bfe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	61da      	str	r2, [r3, #28]
 8007b74:	e029      	b.n	8007bca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	895b      	ldrh	r3, [r3, #10]
 8007b7a:	025b      	lsls	r3, r3, #9
 8007b7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b7e:	e019      	b.n	8007bb4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6979      	ldr	r1, [r7, #20]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fcfe 	bl	8007586 <get_fat>
 8007b8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d101      	bne.n	8007b98 <dir_sdi+0x88>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e032      	b.n	8007bfe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d904      	bls.n	8007ba8 <dir_sdi+0x98>
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d301      	bcc.n	8007bac <dir_sdi+0x9c>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e028      	b.n	8007bfe <dir_sdi+0xee>
			ofs -= csz;
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d2e1      	bcs.n	8007b80 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007bbc:	6979      	ldr	r1, [r7, #20]
 8007bbe:	6938      	ldr	r0, [r7, #16]
 8007bc0:	f7ff fcc2 	bl	8007548 <clust2sect>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <dir_sdi+0xcc>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e010      	b.n	8007bfe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	0a5b      	lsrs	r3, r3, #9
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf6:	441a      	add	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	3320      	adds	r3, #32
 8007c1c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <dir_next+0x28>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c2c:	d301      	bcc.n	8007c32 <dir_next+0x2c>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	e0aa      	b.n	8007d88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f040 8098 	bne.w	8007d6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	8912      	ldrh	r2, [r2, #8]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	f0c0 8088 	bcc.w	8007d6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	61da      	str	r2, [r3, #28]
 8007c64:	2304      	movs	r3, #4
 8007c66:	e08f      	b.n	8007d88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	0a5b      	lsrs	r3, r3, #9
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	8952      	ldrh	r2, [r2, #10]
 8007c70:	3a01      	subs	r2, #1
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d17a      	bne.n	8007d6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7ff fc80 	bl	8007586 <get_fat>
 8007c86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d801      	bhi.n	8007c92 <dir_next+0x8c>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e07a      	b.n	8007d88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c98:	d101      	bne.n	8007c9e <dir_next+0x98>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e074      	b.n	8007d88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d358      	bcc.n	8007d5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	61da      	str	r2, [r3, #28]
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	e067      	b.n	8007d88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	f7ff fe59 	bl	8007978 <create_chain>
 8007cc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <dir_next+0xcc>
 8007cce:	2307      	movs	r3, #7
 8007cd0:	e05a      	b.n	8007d88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <dir_next+0xd6>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e055      	b.n	8007d88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d101      	bne.n	8007ce8 <dir_next+0xe2>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04f      	b.n	8007d88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fb4d 	bl	8007388 <sync_window>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <dir_next+0xf2>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e047      	b.n	8007d88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3330      	adds	r3, #48	; 0x30
 8007cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff f977 	bl	8006ff6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d08:	2300      	movs	r3, #0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	6979      	ldr	r1, [r7, #20]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fc1a 	bl	8007548 <clust2sect>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d1a:	e012      	b.n	8007d42 <dir_next+0x13c>
						fs->wflag = 1;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff fb30 	bl	8007388 <sync_window>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <dir_next+0x12c>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e02a      	b.n	8007d88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3301      	adds	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	895b      	ldrh	r3, [r3, #10]
 8007d46:	461a      	mov	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d3e6      	bcc.n	8007d1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad2      	subs	r2, r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d60:	6979      	ldr	r1, [r7, #20]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fbf0 	bl	8007548 <clust2sect>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	441a      	add	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff feb4 	bl	8007b10 <dir_sdi>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d12b      	bne.n	8007e0a <dir_alloc+0x7a>
		n = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fb27 	bl	8007410 <move_window>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11d      	bne.n	8007e08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2be5      	cmp	r3, #229	; 0xe5
 8007dd4:	d004      	beq.n	8007de0 <dir_alloc+0x50>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d107      	bne.n	8007df0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3301      	adds	r3, #1
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d102      	bne.n	8007df4 <dir_alloc+0x64>
 8007dee:	e00c      	b.n	8007e0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007df0:	2300      	movs	r3, #0
 8007df2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007df4:	2101      	movs	r1, #1
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff ff05 	bl	8007c06 <dir_next>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0d7      	beq.n	8007db6 <dir_alloc+0x26>
 8007e06:	e000      	b.n	8007e0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d101      	bne.n	8007e14 <dir_alloc+0x84>
 8007e10:	2307      	movs	r3, #7
 8007e12:	75fb      	strb	r3, [r7, #23]
	return res;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	331a      	adds	r3, #26
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff f83f 	bl	8006eb0 <ld_word>
 8007e32:	4603      	mov	r3, r0
 8007e34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d109      	bne.n	8007e52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff f834 	bl	8006eb0 <ld_word>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	331a      	adds	r3, #26
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	b292      	uxth	r2, r2
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff f857 	bl	8006f26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d109      	bne.n	8007e94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f103 0214 	add.w	r2, r3, #20
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0c1b      	lsrs	r3, r3, #16
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7ff f849 	bl	8006f26 <st_word>
	}
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fe2f 	bl	8007b10 <dir_sdi>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <dir_find+0x24>
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	e03e      	b.n	8007f3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6938      	ldr	r0, [r7, #16]
 8007ec8:	f7ff faa2 	bl	8007410 <move_window>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d12f      	bne.n	8007f36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <dir_find+0x4e>
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	75fb      	strb	r3, [r7, #23]
 8007ee8:	e028      	b.n	8007f3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	330b      	adds	r3, #11
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	330b      	adds	r3, #11
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <dir_find+0x86>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a18      	ldr	r0, [r3, #32]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3324      	adds	r3, #36	; 0x24
 8007f14:	220b      	movs	r2, #11
 8007f16:	4619      	mov	r1, r3
 8007f18:	f7ff f888 	bl	800702c <mem_cmp>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f22:	2100      	movs	r1, #0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fe6e 	bl	8007c06 <dir_next>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0c5      	beq.n	8007ec0 <dir_find+0x24>
 8007f34:	e002      	b.n	8007f3c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f3a:	bf00      	nop

	return res;
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f54:	2101      	movs	r1, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff ff1a 	bl	8007d90 <dir_alloc>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d11c      	bne.n	8007fa0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	68b8      	ldr	r0, [r7, #8]
 8007f6e:	f7ff fa4f 	bl	8007410 <move_window>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d111      	bne.n	8007fa0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	2220      	movs	r2, #32
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff f836 	bl	8006ff6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a18      	ldr	r0, [r3, #32]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	3324      	adds	r3, #36	; 0x24
 8007f92:	220b      	movs	r2, #11
 8007f94:	4619      	mov	r1, r3
 8007f96:	f7ff f80d 	bl	8006fb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3324      	adds	r3, #36	; 0x24
 8007fc0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007fc2:	220b      	movs	r2, #11
 8007fc4:	2120      	movs	r1, #32
 8007fc6:	68b8      	ldr	r0, [r7, #8]
 8007fc8:	f7ff f815 	bl	8006ff6 <mem_set>
	si = i = 0; ni = 8;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	61fa      	str	r2, [r7, #28]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007fe6:	7efb      	ldrb	r3, [r7, #27]
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d94e      	bls.n	800808a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007fec:	7efb      	ldrb	r3, [r7, #27]
 8007fee:	2b2f      	cmp	r3, #47	; 0x2f
 8007ff0:	d006      	beq.n	8008000 <create_name+0x54>
 8007ff2:	7efb      	ldrb	r3, [r7, #27]
 8007ff4:	2b5c      	cmp	r3, #92	; 0x5c
 8007ff6:	d110      	bne.n	800801a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007ff8:	e002      	b.n	8008000 <create_name+0x54>
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b2f      	cmp	r3, #47	; 0x2f
 800800a:	d0f6      	beq.n	8007ffa <create_name+0x4e>
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b5c      	cmp	r3, #92	; 0x5c
 8008016:	d0f0      	beq.n	8007ffa <create_name+0x4e>
			break;
 8008018:	e038      	b.n	800808c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800801a:	7efb      	ldrb	r3, [r7, #27]
 800801c:	2b2e      	cmp	r3, #46	; 0x2e
 800801e:	d003      	beq.n	8008028 <create_name+0x7c>
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	429a      	cmp	r2, r3
 8008026:	d30c      	bcc.n	8008042 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b0b      	cmp	r3, #11
 800802c:	d002      	beq.n	8008034 <create_name+0x88>
 800802e:	7efb      	ldrb	r3, [r7, #27]
 8008030:	2b2e      	cmp	r3, #46	; 0x2e
 8008032:	d001      	beq.n	8008038 <create_name+0x8c>
 8008034:	2306      	movs	r3, #6
 8008036:	e044      	b.n	80080c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008038:	2308      	movs	r3, #8
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	230b      	movs	r3, #11
 800803e:	617b      	str	r3, [r7, #20]
			continue;
 8008040:	e022      	b.n	8008088 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008042:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da04      	bge.n	8008054 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800804a:	7efb      	ldrb	r3, [r7, #27]
 800804c:	3b80      	subs	r3, #128	; 0x80
 800804e:	4a1f      	ldr	r2, [pc, #124]	; (80080cc <create_name+0x120>)
 8008050:	5cd3      	ldrb	r3, [r2, r3]
 8008052:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008054:	7efb      	ldrb	r3, [r7, #27]
 8008056:	4619      	mov	r1, r3
 8008058:	481d      	ldr	r0, [pc, #116]	; (80080d0 <create_name+0x124>)
 800805a:	f7ff f80e 	bl	800707a <chk_chr>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <create_name+0xbc>
 8008064:	2306      	movs	r3, #6
 8008066:	e02c      	b.n	80080c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008068:	7efb      	ldrb	r3, [r7, #27]
 800806a:	2b60      	cmp	r3, #96	; 0x60
 800806c:	d905      	bls.n	800807a <create_name+0xce>
 800806e:	7efb      	ldrb	r3, [r7, #27]
 8008070:	2b7a      	cmp	r3, #122	; 0x7a
 8008072:	d802      	bhi.n	800807a <create_name+0xce>
 8008074:	7efb      	ldrb	r3, [r7, #27]
 8008076:	3b20      	subs	r3, #32
 8008078:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	613a      	str	r2, [r7, #16]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	4413      	add	r3, r2
 8008084:	7efa      	ldrb	r2, [r7, #27]
 8008086:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008088:	e7a6      	b.n	8007fd8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800808a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	441a      	add	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <create_name+0xf4>
 800809c:	2306      	movs	r3, #6
 800809e:	e010      	b.n	80080c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2be5      	cmp	r3, #229	; 0xe5
 80080a6:	d102      	bne.n	80080ae <create_name+0x102>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2205      	movs	r2, #5
 80080ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80080ae:	7efb      	ldrb	r3, [r7, #27]
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d801      	bhi.n	80080b8 <create_name+0x10c>
 80080b4:	2204      	movs	r2, #4
 80080b6:	e000      	b.n	80080ba <create_name+0x10e>
 80080b8:	2200      	movs	r2, #0
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	330b      	adds	r3, #11
 80080be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80080c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	0800b7fc 	.word	0x0800b7fc
 80080d0:	0800a9c4 	.word	0x0800a9c4

080080d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80080e8:	e002      	b.n	80080f0 <follow_path+0x1c>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b2f      	cmp	r3, #47	; 0x2f
 80080f6:	d0f8      	beq.n	80080ea <follow_path+0x16>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b5c      	cmp	r3, #92	; 0x5c
 80080fe:	d0f4      	beq.n	80080ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2200      	movs	r2, #0
 8008104:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b1f      	cmp	r3, #31
 800810c:	d80a      	bhi.n	8008124 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008116:	2100      	movs	r1, #0
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fcf9 	bl	8007b10 <dir_sdi>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
 8008122:	e043      	b.n	80081ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008124:	463b      	mov	r3, r7
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff3f 	bl	8007fac <create_name>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d134      	bne.n	80081a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff feaf 	bl	8007e9c <dir_find>
 800813e:	4603      	mov	r3, r0
 8008140:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008148:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	2b04      	cmp	r3, #4
 8008154:	d127      	bne.n	80081a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d122      	bne.n	80081a6 <follow_path+0xd2>
 8008160:	2305      	movs	r3, #5
 8008162:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008164:	e01f      	b.n	80081a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11c      	bne.n	80081aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	799b      	ldrb	r3, [r3, #6]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800817c:	2305      	movs	r3, #5
 800817e:	75fb      	strb	r3, [r7, #23]
 8008180:	e014      	b.n	80081ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008190:	4413      	add	r3, r2
 8008192:	4619      	mov	r1, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff fe42 	bl	8007e1e <ld_clust>
 800819a:	4602      	mov	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80081a0:	e7c0      	b.n	8008124 <follow_path+0x50>
			if (res != FR_OK) break;
 80081a2:	bf00      	nop
 80081a4:	e002      	b.n	80081ac <follow_path+0xd8>
				break;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80081aa:	bf00      	nop
			}
		}
	}

	return res;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b087      	sub	sp, #28
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80081be:	f04f 33ff 	mov.w	r3, #4294967295
 80081c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d031      	beq.n	8008230 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e002      	b.n	80081da <get_ldnumber+0x24>
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	3301      	adds	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d903      	bls.n	80081ea <get_ldnumber+0x34>
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b3a      	cmp	r3, #58	; 0x3a
 80081e8:	d1f4      	bne.n	80081d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b3a      	cmp	r3, #58	; 0x3a
 80081f0:	d11c      	bne.n	800822c <get_ldnumber+0x76>
			tp = *path;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	60fa      	str	r2, [r7, #12]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	3b30      	subs	r3, #48	; 0x30
 8008202:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b09      	cmp	r3, #9
 8008208:	d80e      	bhi.n	8008228 <get_ldnumber+0x72>
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	429a      	cmp	r2, r3
 8008210:	d10a      	bne.n	8008228 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d107      	bne.n	8008228 <get_ldnumber+0x72>
					vol = (int)i;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	3301      	adds	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	e002      	b.n	8008232 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008230:	693b      	ldr	r3, [r7, #16]
}
 8008232:	4618      	mov	r0, r3
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	70da      	strb	r2, [r3, #3]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f04f 32ff 	mov.w	r2, #4294967295
 8008256:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff f8d8 	bl	8007410 <move_window>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <check_fs+0x2a>
 8008266:	2304      	movs	r3, #4
 8008268:	e038      	b.n	80082dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3330      	adds	r3, #48	; 0x30
 800826e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fe1c 	bl	8006eb0 <ld_word>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008280:	429a      	cmp	r2, r3
 8008282:	d001      	beq.n	8008288 <check_fs+0x48>
 8008284:	2303      	movs	r3, #3
 8008286:	e029      	b.n	80082dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800828e:	2be9      	cmp	r3, #233	; 0xe9
 8008290:	d009      	beq.n	80082a6 <check_fs+0x66>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008298:	2beb      	cmp	r3, #235	; 0xeb
 800829a:	d11e      	bne.n	80082da <check_fs+0x9a>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80082a2:	2b90      	cmp	r3, #144	; 0x90
 80082a4:	d119      	bne.n	80082da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3330      	adds	r3, #48	; 0x30
 80082aa:	3336      	adds	r3, #54	; 0x36
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fe17 	bl	8006ee0 <ld_dword>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082b8:	4a0a      	ldr	r2, [pc, #40]	; (80082e4 <check_fs+0xa4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d101      	bne.n	80082c2 <check_fs+0x82>
 80082be:	2300      	movs	r3, #0
 80082c0:	e00c      	b.n	80082dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3330      	adds	r3, #48	; 0x30
 80082c6:	3352      	adds	r3, #82	; 0x52
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fe09 	bl	8006ee0 <ld_dword>
 80082ce:	4603      	mov	r3, r0
 80082d0:	4a05      	ldr	r2, [pc, #20]	; (80082e8 <check_fs+0xa8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d101      	bne.n	80082da <check_fs+0x9a>
 80082d6:	2300      	movs	r3, #0
 80082d8:	e000      	b.n	80082dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082da:	2302      	movs	r3, #2
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	00544146 	.word	0x00544146
 80082e8:	33544146 	.word	0x33544146

080082ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b096      	sub	sp, #88	; 0x58
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff ff58 	bl	80081b6 <get_ldnumber>
 8008306:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830a:	2b00      	cmp	r3, #0
 800830c:	da01      	bge.n	8008312 <find_volume+0x26>
 800830e:	230b      	movs	r3, #11
 8008310:	e22d      	b.n	800876e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008312:	4aa1      	ldr	r2, [pc, #644]	; (8008598 <find_volume+0x2ac>)
 8008314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <find_volume+0x3a>
 8008322:	230c      	movs	r3, #12
 8008324:	e223      	b.n	800876e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800832a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01a      	beq.n	8008372 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fd17 	bl	8006d74 <disk_status>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800834c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10c      	bne.n	8008372 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <find_volume+0x82>
 800835e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800836a:	230a      	movs	r3, #10
 800836c:	e1ff      	b.n	800876e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800836e:	2300      	movs	r3, #0
 8008370:	e1fd      	b.n	800876e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837a:	b2da      	uxtb	r2, r3
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fd0f 	bl	8006da8 <disk_initialize>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800839c:	2303      	movs	r3, #3
 800839e:	e1e6      	b.n	800876e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <find_volume+0xca>
 80083a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80083b2:	230a      	movs	r3, #10
 80083b4:	e1db      	b.n	800876e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083be:	f7ff ff3f 	bl	8008240 <check_fs>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d149      	bne.n	8008464 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083d0:	2300      	movs	r3, #0
 80083d2:	643b      	str	r3, [r7, #64]	; 0x40
 80083d4:	e01e      	b.n	8008414 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80083e4:	4413      	add	r3, r2
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	3304      	adds	r3, #4
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d006      	beq.n	8008400 <find_volume+0x114>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	3308      	adds	r3, #8
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fd72 	bl	8006ee0 <ld_dword>
 80083fc:	4602      	mov	r2, r0
 80083fe:	e000      	b.n	8008402 <find_volume+0x116>
 8008400:	2200      	movs	r2, #0
 8008402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	3358      	adds	r3, #88	; 0x58
 8008408:	443b      	add	r3, r7
 800840a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800840e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008410:	3301      	adds	r3, #1
 8008412:	643b      	str	r3, [r7, #64]	; 0x40
 8008414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008416:	2b03      	cmp	r3, #3
 8008418:	d9dd      	bls.n	80083d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800841a:	2300      	movs	r3, #0
 800841c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <find_volume+0x13e>
 8008424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008426:	3b01      	subs	r3, #1
 8008428:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800842a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	3358      	adds	r3, #88	; 0x58
 8008430:	443b      	add	r3, r7
 8008432:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008436:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843a:	2b00      	cmp	r3, #0
 800843c:	d005      	beq.n	800844a <find_volume+0x15e>
 800843e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008442:	f7ff fefd 	bl	8008240 <check_fs>
 8008446:	4603      	mov	r3, r0
 8008448:	e000      	b.n	800844c <find_volume+0x160>
 800844a:	2303      	movs	r3, #3
 800844c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008454:	2b01      	cmp	r3, #1
 8008456:	d905      	bls.n	8008464 <find_volume+0x178>
 8008458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845a:	3301      	adds	r3, #1
 800845c:	643b      	str	r3, [r7, #64]	; 0x40
 800845e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008460:	2b03      	cmp	r3, #3
 8008462:	d9e2      	bls.n	800842a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008468:	2b04      	cmp	r3, #4
 800846a:	d101      	bne.n	8008470 <find_volume+0x184>
 800846c:	2301      	movs	r3, #1
 800846e:	e17e      	b.n	800876e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008474:	2b01      	cmp	r3, #1
 8008476:	d901      	bls.n	800847c <find_volume+0x190>
 8008478:	230d      	movs	r3, #13
 800847a:	e178      	b.n	800876e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	3330      	adds	r3, #48	; 0x30
 8008480:	330b      	adds	r3, #11
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fd14 	bl	8006eb0 <ld_word>
 8008488:	4603      	mov	r3, r0
 800848a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848e:	d001      	beq.n	8008494 <find_volume+0x1a8>
 8008490:	230d      	movs	r3, #13
 8008492:	e16c      	b.n	800876e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	3330      	adds	r3, #48	; 0x30
 8008498:	3316      	adds	r3, #22
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fd08 	bl	8006eb0 <ld_word>
 80084a0:	4603      	mov	r3, r0
 80084a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <find_volume+0x1cc>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	3330      	adds	r3, #48	; 0x30
 80084ae:	3324      	adds	r3, #36	; 0x24
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fd15 	bl	8006ee0 <ld_dword>
 80084b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084bc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	789b      	ldrb	r3, [r3, #2]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d005      	beq.n	80084dc <find_volume+0x1f0>
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	789b      	ldrb	r3, [r3, #2]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d001      	beq.n	80084dc <find_volume+0x1f0>
 80084d8:	230d      	movs	r3, #13
 80084da:	e148      	b.n	800876e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	789b      	ldrb	r3, [r3, #2]
 80084e0:	461a      	mov	r2, r3
 80084e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e4:	fb02 f303 	mul.w	r3, r2, r3
 80084e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	895b      	ldrh	r3, [r3, #10]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d008      	beq.n	8008510 <find_volume+0x224>
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	895b      	ldrh	r3, [r3, #10]
 8008502:	461a      	mov	r2, r3
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	895b      	ldrh	r3, [r3, #10]
 8008508:	3b01      	subs	r3, #1
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <find_volume+0x228>
 8008510:	230d      	movs	r3, #13
 8008512:	e12c      	b.n	800876e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	3330      	adds	r3, #48	; 0x30
 8008518:	3311      	adds	r3, #17
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fcc8 	bl	8006eb0 <ld_word>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	891b      	ldrh	r3, [r3, #8]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <find_volume+0x24e>
 8008536:	230d      	movs	r3, #13
 8008538:	e119      	b.n	800876e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	3330      	adds	r3, #48	; 0x30
 800853e:	3313      	adds	r3, #19
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fcb5 	bl	8006eb0 <ld_word>
 8008546:	4603      	mov	r3, r0
 8008548:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800854a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <find_volume+0x272>
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	3330      	adds	r3, #48	; 0x30
 8008554:	3320      	adds	r3, #32
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fcc2 	bl	8006ee0 <ld_dword>
 800855c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	3330      	adds	r3, #48	; 0x30
 8008562:	330e      	adds	r3, #14
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fca3 	bl	8006eb0 <ld_word>
 800856a:	4603      	mov	r3, r0
 800856c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800856e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <find_volume+0x28c>
 8008574:	230d      	movs	r3, #13
 8008576:	e0fa      	b.n	800876e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008578:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857c:	4413      	add	r3, r2
 800857e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008580:	8912      	ldrh	r2, [r2, #8]
 8008582:	0912      	lsrs	r2, r2, #4
 8008584:	b292      	uxth	r2, r2
 8008586:	4413      	add	r3, r2
 8008588:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800858a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	429a      	cmp	r2, r3
 8008590:	d204      	bcs.n	800859c <find_volume+0x2b0>
 8008592:	230d      	movs	r3, #13
 8008594:	e0eb      	b.n	800876e <find_volume+0x482>
 8008596:	bf00      	nop
 8008598:	2000081c 	.word	0x2000081c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800859c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a4:	8952      	ldrh	r2, [r2, #10]
 80085a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <find_volume+0x2ca>
 80085b2:	230d      	movs	r3, #13
 80085b4:	e0db      	b.n	800876e <find_volume+0x482>
		fmt = FS_FAT32;
 80085b6:	2303      	movs	r3, #3
 80085b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d802      	bhi.n	80085cc <find_volume+0x2e0>
 80085c6:	2302      	movs	r3, #2
 80085c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d802      	bhi.n	80085dc <find_volume+0x2f0>
 80085d6:	2301      	movs	r3, #1
 80085d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	1c9a      	adds	r2, r3, #2
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085e8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80085ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ee:	441a      	add	r2, r3
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80085f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	441a      	add	r2, r3
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80085fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008602:	2b03      	cmp	r3, #3
 8008604:	d11e      	bne.n	8008644 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	3330      	adds	r3, #48	; 0x30
 800860a:	332a      	adds	r3, #42	; 0x2a
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fc4f 	bl	8006eb0 <ld_word>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <find_volume+0x330>
 8008618:	230d      	movs	r3, #13
 800861a:	e0a8      	b.n	800876e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	891b      	ldrh	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <find_volume+0x33c>
 8008624:	230d      	movs	r3, #13
 8008626:	e0a2      	b.n	800876e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	332c      	adds	r3, #44	; 0x2c
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fc56 	bl	8006ee0 <ld_dword>
 8008634:	4602      	mov	r2, r0
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	647b      	str	r3, [r7, #68]	; 0x44
 8008642:	e01f      	b.n	8008684 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	891b      	ldrh	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <find_volume+0x364>
 800864c:	230d      	movs	r3, #13
 800864e:	e08e      	b.n	800876e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008656:	441a      	add	r2, r3
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800865c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008660:	2b02      	cmp	r3, #2
 8008662:	d103      	bne.n	800866c <find_volume+0x380>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	e00a      	b.n	8008682 <find_volume+0x396>
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	695a      	ldr	r2, [r3, #20]
 8008670:	4613      	mov	r3, r2
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	4413      	add	r3, r2
 8008676:	085a      	lsrs	r2, r3, #1
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008682:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	699a      	ldr	r2, [r3, #24]
 8008688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800868e:	0a5b      	lsrs	r3, r3, #9
 8008690:	429a      	cmp	r2, r3
 8008692:	d201      	bcs.n	8008698 <find_volume+0x3ac>
 8008694:	230d      	movs	r3, #13
 8008696:	e06a      	b.n	800876e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	f04f 32ff 	mov.w	r2, #4294967295
 800869e:	611a      	str	r2, [r3, #16]
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	2280      	movs	r2, #128	; 0x80
 80086ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d149      	bne.n	800874a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	3330      	adds	r3, #48	; 0x30
 80086ba:	3330      	adds	r3, #48	; 0x30
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fbf7 	bl	8006eb0 <ld_word>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d140      	bne.n	800874a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80086c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ca:	3301      	adds	r3, #1
 80086cc:	4619      	mov	r1, r3
 80086ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086d0:	f7fe fe9e 	bl	8007410 <move_window>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d137      	bne.n	800874a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	2200      	movs	r2, #0
 80086de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	3330      	adds	r3, #48	; 0x30
 80086e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fbe1 	bl	8006eb0 <ld_word>
 80086ee:	4603      	mov	r3, r0
 80086f0:	461a      	mov	r2, r3
 80086f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d127      	bne.n	800874a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	3330      	adds	r3, #48	; 0x30
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fbee 	bl	8006ee0 <ld_dword>
 8008704:	4603      	mov	r3, r0
 8008706:	4a1c      	ldr	r2, [pc, #112]	; (8008778 <find_volume+0x48c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d11e      	bne.n	800874a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	3330      	adds	r3, #48	; 0x30
 8008710:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fbe3 	bl	8006ee0 <ld_dword>
 800871a:	4603      	mov	r3, r0
 800871c:	4a17      	ldr	r2, [pc, #92]	; (800877c <find_volume+0x490>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d113      	bne.n	800874a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008724:	3330      	adds	r3, #48	; 0x30
 8008726:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fbd8 	bl	8006ee0 <ld_dword>
 8008730:	4602      	mov	r2, r0
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	3330      	adds	r3, #48	; 0x30
 800873a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fbce 	bl	8006ee0 <ld_dword>
 8008744:	4602      	mov	r2, r0
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008750:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <find_volume+0x494>)
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <find_volume+0x494>)
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <find_volume+0x494>)
 8008760:	881a      	ldrh	r2, [r3, #0]
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008768:	f7fe fdea 	bl	8007340 <clear_lock>
#endif
	return FR_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3758      	adds	r7, #88	; 0x58
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	41615252 	.word	0x41615252
 800877c:	61417272 	.word	0x61417272
 8008780:	20000820 	.word	0x20000820

08008784 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800878e:	2309      	movs	r3, #9
 8008790:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01c      	beq.n	80087d2 <validate+0x4e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d018      	beq.n	80087d2 <validate+0x4e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d013      	beq.n	80087d2 <validate+0x4e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	889a      	ldrh	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	88db      	ldrh	r3, [r3, #6]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d10c      	bne.n	80087d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fad8 	bl	8006d74 <disk_status>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <validate+0x4e>
			res = FR_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <validate+0x5a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	e000      	b.n	80087e0 <validate+0x5c>
 80087de:	2300      	movs	r3, #0
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	6013      	str	r3, [r2, #0]
	return res;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008802:	f107 0310 	add.w	r3, r7, #16
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fcd5 	bl	80081b6 <get_ldnumber>
 800880c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	2b00      	cmp	r3, #0
 8008812:	da01      	bge.n	8008818 <f_mount+0x28>
 8008814:	230b      	movs	r3, #11
 8008816:	e02b      	b.n	8008870 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008818:	4a17      	ldr	r2, [pc, #92]	; (8008878 <f_mount+0x88>)
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008820:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008828:	69b8      	ldr	r0, [r7, #24]
 800882a:	f7fe fd89 	bl	8007340 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	490d      	ldr	r1, [pc, #52]	; (8008878 <f_mount+0x88>)
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <f_mount+0x66>
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d001      	beq.n	800885a <f_mount+0x6a>
 8008856:	2300      	movs	r3, #0
 8008858:	e00a      	b.n	8008870 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800885a:	f107 010c 	add.w	r1, r7, #12
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	2200      	movs	r2, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fd41 	bl	80082ec <find_volume>
 800886a:	4603      	mov	r3, r0
 800886c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800886e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	2000081c 	.word	0x2000081c

0800887c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b098      	sub	sp, #96	; 0x60
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <f_open+0x18>
 8008890:	2309      	movs	r3, #9
 8008892:	e1ad      	b.n	8008bf0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800889a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800889c:	79fa      	ldrb	r2, [r7, #7]
 800889e:	f107 0110 	add.w	r1, r7, #16
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fd20 	bl	80082ec <find_volume>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80088b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 8191 	bne.w	8008bde <f_open+0x362>
		dj.obj.fs = fs;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	f107 0314 	add.w	r3, r7, #20
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fc03 	bl	80080d4 <follow_path>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80088d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11a      	bne.n	8008912 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80088dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da03      	bge.n	80088ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80088e6:	2306      	movs	r3, #6
 80088e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088ec:	e011      	b.n	8008912 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf14      	ite	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2300      	moveq	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fbd2 	bl	80070b0 <chk_lock>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	f003 031c 	and.w	r3, r3, #28
 8008918:	2b00      	cmp	r3, #0
 800891a:	d07f      	beq.n	8008a1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800891c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008920:	2b00      	cmp	r3, #0
 8008922:	d017      	beq.n	8008954 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008928:	2b04      	cmp	r3, #4
 800892a:	d10e      	bne.n	800894a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800892c:	f7fe fc1c 	bl	8007168 <enq_lock>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d006      	beq.n	8008944 <f_open+0xc8>
 8008936:	f107 0314 	add.w	r3, r7, #20
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fb03 	bl	8007f46 <dir_register>
 8008940:	4603      	mov	r3, r0
 8008942:	e000      	b.n	8008946 <f_open+0xca>
 8008944:	2312      	movs	r3, #18
 8008946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	f043 0308 	orr.w	r3, r3, #8
 8008950:	71fb      	strb	r3, [r7, #7]
 8008952:	e010      	b.n	8008976 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008954:	7ebb      	ldrb	r3, [r7, #26]
 8008956:	f003 0311 	and.w	r3, r3, #17
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <f_open+0xea>
					res = FR_DENIED;
 800895e:	2307      	movs	r3, #7
 8008960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008964:	e007      	b.n	8008976 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <f_open+0xfa>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800897a:	2b00      	cmp	r3, #0
 800897c:	d168      	bne.n	8008a50 <f_open+0x1d4>
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d063      	beq.n	8008a50 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008988:	f7fe f996 	bl	8006cb8 <get_fattime>
 800898c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	330e      	adds	r3, #14
 8008992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe fae1 	bl	8006f5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899c:	3316      	adds	r3, #22
 800899e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fadb 	bl	8006f5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80089a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a8:	330b      	adds	r3, #11
 80089aa:	2220      	movs	r2, #32
 80089ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fa32 	bl	8007e1e <ld_clust>
 80089ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089c0:	2200      	movs	r2, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fa4a 	bl	8007e5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80089c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ca:	331c      	adds	r3, #28
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fac4 	bl	8006f5c <st_dword>
					fs->wflag = 1;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2201      	movs	r2, #1
 80089d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80089da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d037      	beq.n	8008a50 <f_open+0x1d4>
						dw = fs->winsect;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80089e6:	f107 0314 	add.w	r3, r7, #20
 80089ea:	2200      	movs	r2, #0
 80089ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe ff5d 	bl	80078ae <remove_chain>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80089fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d126      	bne.n	8008a50 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe fd02 	bl	8007410 <move_window>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a16:	3a01      	subs	r2, #1
 8008a18:	60da      	str	r2, [r3, #12]
 8008a1a:	e019      	b.n	8008a50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d115      	bne.n	8008a50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008a24:	7ebb      	ldrb	r3, [r7, #26]
 8008a26:	f003 0310 	and.w	r3, r3, #16
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008a2e:	2304      	movs	r3, #4
 8008a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a34:	e00c      	b.n	8008a50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d007      	beq.n	8008a50 <f_open+0x1d4>
 8008a40:	7ebb      	ldrb	r3, [r7, #26]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <f_open+0x1d4>
						res = FR_DENIED;
 8008a4a:	2307      	movs	r3, #7
 8008a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d128      	bne.n	8008aaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bf14      	ite	ne
 8008a82:	2301      	movne	r3, #1
 8008a84:	2300      	moveq	r3, #0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f107 0314 	add.w	r3, r7, #20
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fb8b 	bl	80071ac <inc_lock>
 8008a96:	4602      	mov	r2, r0
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <f_open+0x22e>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f040 8095 	bne.w	8008bde <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff f9af 	bl	8007e1e <ld_clust>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	331c      	adds	r3, #28
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fa08 	bl	8006ee0 <ld_dword>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	88da      	ldrh	r2, [r3, #6]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	79fa      	ldrb	r2, [r7, #7]
 8008aee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3330      	adds	r3, #48	; 0x30
 8008b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fa72 	bl	8006ff6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d060      	beq.n	8008bde <f_open+0x362>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d05c      	beq.n	8008bde <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	895b      	ldrh	r3, [r3, #10]
 8008b30:	025b      	lsls	r3, r3, #9
 8008b32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008b40:	e016      	b.n	8008b70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fd1d 	bl	8007586 <get_fat>
 8008b4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d802      	bhi.n	8008b5a <f_open+0x2de>
 8008b54:	2302      	movs	r3, #2
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d102      	bne.n	8008b68 <f_open+0x2ec>
 8008b62:	2301      	movs	r3, #1
 8008b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <f_open+0x304>
 8008b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d8e0      	bhi.n	8008b42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d127      	bne.n	8008bde <f_open+0x362>
 8008b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d022      	beq.n	8008bde <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fcd3 	bl	8007548 <clust2sect>
 8008ba2:	6478      	str	r0, [r7, #68]	; 0x44
 8008ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <f_open+0x336>
						res = FR_INT_ERR;
 8008baa:	2302      	movs	r3, #2
 8008bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008bb0:	e015      	b.n	8008bde <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb4:	0a5a      	lsrs	r2, r3, #9
 8008bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb8:	441a      	add	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	7858      	ldrb	r0, [r3, #1]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f7fe f911 	bl	8006df4 <disk_read>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <f_open+0x362>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <f_open+0x370>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3760      	adds	r7, #96	; 0x60
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	; 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f107 0214 	add.w	r2, r7, #20
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fdb3 	bl	8008784 <validate>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d107      	bne.n	8008c3c <f_read+0x44>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	7d5b      	ldrb	r3, [r3, #21]
 8008c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <f_read+0x4a>
 8008c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c40:	e115      	b.n	8008e6e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	7d1b      	ldrb	r3, [r3, #20]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <f_read+0x5a>
 8008c4e:	2307      	movs	r3, #7
 8008c50:	e10d      	b.n	8008e6e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	f240 80fe 	bls.w	8008e64 <f_read+0x26c>
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008c6c:	e0fa      	b.n	8008e64 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 80c6 	bne.w	8008e08 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	0a5b      	lsrs	r3, r3, #9
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	8952      	ldrh	r2, [r2, #10]
 8008c86:	3a01      	subs	r2, #1
 8008c88:	4013      	ands	r3, r2
 8008c8a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d12f      	bne.n	8008cf2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d103      	bne.n	8008ca2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8008ca0:	e013      	b.n	8008cca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7fe fef9 	bl	8007aa8 <clmt_clust>
 8008cb6:	6338      	str	r0, [r7, #48]	; 0x30
 8008cb8:	e007      	b.n	8008cca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe fc5f 	bl	8007586 <get_fat>
 8008cc8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d804      	bhi.n	8008cda <f_read+0xe2>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	755a      	strb	r2, [r3, #21]
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e0c9      	b.n	8008e6e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce0:	d104      	bne.n	8008cec <f_read+0xf4>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	755a      	strb	r2, [r3, #21]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e0c0      	b.n	8008e6e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fe fc24 	bl	8007548 <clust2sect>
 8008d00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <f_read+0x11a>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	755a      	strb	r2, [r3, #21]
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e0ad      	b.n	8008e6e <f_read+0x276>
			sect += csect;
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	0a5b      	lsrs	r3, r3, #9
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d039      	beq.n	8008d9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	4413      	add	r3, r2
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	8952      	ldrh	r2, [r2, #10]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d905      	bls.n	8008d40 <f_read+0x148>
					cc = fs->csize - csect;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	895b      	ldrh	r3, [r3, #10]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	7858      	ldrb	r0, [r3, #1]
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d4a:	f7fe f853 	bl	8006df4 <disk_read>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <f_read+0x166>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	755a      	strb	r2, [r3, #21]
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e087      	b.n	8008e6e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	7d1b      	ldrb	r3, [r3, #20]
 8008d62:	b25b      	sxtb	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da14      	bge.n	8008d92 <f_read+0x19a>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a1a      	ldr	r2, [r3, #32]
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d90d      	bls.n	8008d92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1a      	ldr	r2, [r3, #32]
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	025b      	lsls	r3, r3, #9
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	18d0      	adds	r0, r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3330      	adds	r3, #48	; 0x30
 8008d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f7fe f911 	bl	8006fb4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	025b      	lsls	r3, r3, #9
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008d98:	e050      	b.n	8008e3c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d02e      	beq.n	8008e02 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	7d1b      	ldrb	r3, [r3, #20]
 8008da8:	b25b      	sxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da18      	bge.n	8008de0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	7858      	ldrb	r0, [r3, #1]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1a      	ldr	r2, [r3, #32]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f7fe f839 	bl	8006e34 <disk_write>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <f_read+0x1da>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	755a      	strb	r2, [r3, #21]
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e04d      	b.n	8008e6e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	7d1b      	ldrb	r3, [r3, #20]
 8008dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	7858      	ldrb	r0, [r3, #1]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dea:	2301      	movs	r3, #1
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	f7fe f801 	bl	8006df4 <disk_read>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <f_read+0x20a>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	755a      	strb	r2, [r3, #21]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e035      	b.n	8008e6e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d901      	bls.n	8008e22 <f_read+0x22a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e30:	4413      	add	r3, r2
 8008e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e34:	4619      	mov	r1, r3
 8008e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e38:	f7fe f8bc 	bl	8006fb4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	4413      	add	r3, r2
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	699a      	ldr	r2, [r3, #24]
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	441a      	add	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	619a      	str	r2, [r3, #24]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	441a      	add	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f47f af01 	bne.w	8008c6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3738      	adds	r7, #56	; 0x38
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b08c      	sub	sp, #48	; 0x30
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f107 0210 	add.w	r2, r7, #16
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fc74 	bl	8008784 <validate>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d107      	bne.n	8008eba <f_write+0x44>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	7d5b      	ldrb	r3, [r3, #21]
 8008eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <f_write+0x4a>
 8008eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ebe:	e14b      	b.n	8009158 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7d1b      	ldrb	r3, [r3, #20]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <f_write+0x5a>
 8008ecc:	2307      	movs	r3, #7
 8008ece:	e143      	b.n	8009158 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	441a      	add	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	f080 812d 	bcs.w	800913c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	43db      	mvns	r3, r3
 8008ee8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008eea:	e127      	b.n	800913c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f040 80e3 	bne.w	80090c0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	0a5b      	lsrs	r3, r3, #9
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	8952      	ldrh	r2, [r2, #10]
 8008f04:	3a01      	subs	r2, #1
 8008f06:	4013      	ands	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d143      	bne.n	8008f98 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10c      	bne.n	8008f32 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d11a      	bne.n	8008f5a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2100      	movs	r1, #0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe fd25 	bl	8007978 <create_chain>
 8008f2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f30:	e013      	b.n	8008f5a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7fe fdb1 	bl	8007aa8 <clmt_clust>
 8008f46:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f48:	e007      	b.n	8008f5a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fe fd10 	bl	8007978 <create_chain>
 8008f58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80f2 	beq.w	8009146 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d104      	bne.n	8008f72 <f_write+0xfc>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	755a      	strb	r2, [r3, #21]
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e0f2      	b.n	8009158 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d104      	bne.n	8008f84 <f_write+0x10e>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	755a      	strb	r2, [r3, #21]
 8008f80:	2301      	movs	r3, #1
 8008f82:	e0e9      	b.n	8009158 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <f_write+0x122>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	7d1b      	ldrb	r3, [r3, #20]
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da18      	bge.n	8008fd4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	7858      	ldrb	r0, [r3, #1]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1a      	ldr	r2, [r3, #32]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f7fd ff3f 	bl	8006e34 <disk_write>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <f_write+0x150>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	755a      	strb	r2, [r3, #21]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e0c8      	b.n	8009158 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	7d1b      	ldrb	r3, [r3, #20]
 8008fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4610      	mov	r0, r2
 8008fde:	f7fe fab3 	bl	8007548 <clust2sect>
 8008fe2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <f_write+0x17e>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	755a      	strb	r2, [r3, #21]
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e0b1      	b.n	8009158 <f_write+0x2e2>
			sect += csect;
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	0a5b      	lsrs	r3, r3, #9
 8009000:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d03c      	beq.n	8009082 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	4413      	add	r3, r2
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	8952      	ldrh	r2, [r2, #10]
 8009012:	4293      	cmp	r3, r2
 8009014:	d905      	bls.n	8009022 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	895b      	ldrh	r3, [r3, #10]
 800901a:	461a      	mov	r2, r3
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	7858      	ldrb	r0, [r3, #1]
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	69f9      	ldr	r1, [r7, #28]
 800902c:	f7fd ff02 	bl	8006e34 <disk_write>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d004      	beq.n	8009040 <f_write+0x1ca>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	755a      	strb	r2, [r3, #21]
 800903c:	2301      	movs	r3, #1
 800903e:	e08b      	b.n	8009158 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	6a3a      	ldr	r2, [r7, #32]
 800904a:	429a      	cmp	r2, r3
 800904c:	d915      	bls.n	800907a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6a1a      	ldr	r2, [r3, #32]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	025b      	lsls	r3, r3, #9
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009066:	4619      	mov	r1, r3
 8009068:	f7fd ffa4 	bl	8006fb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	7d1b      	ldrb	r3, [r3, #20]
 8009070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009074:	b2da      	uxtb	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	025b      	lsls	r3, r3, #9
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009080:	e03f      	b.n	8009102 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	429a      	cmp	r2, r3
 800908a:	d016      	beq.n	80090ba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009094:	429a      	cmp	r2, r3
 8009096:	d210      	bcs.n	80090ba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	7858      	ldrb	r0, [r3, #1]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090a2:	2301      	movs	r3, #1
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	f7fd fea5 	bl	8006df4 <disk_read>
 80090aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	755a      	strb	r2, [r3, #21]
 80090b6:	2301      	movs	r3, #1
 80090b8:	e04e      	b.n	8009158 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80090ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d901      	bls.n	80090da <f_write+0x264>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e8:	4413      	add	r3, r2
 80090ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ec:	69f9      	ldr	r1, [r7, #28]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd ff60 	bl	8006fb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	7d1b      	ldrb	r3, [r3, #20]
 80090f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	4413      	add	r3, r2
 8009108:	61fb      	str	r3, [r7, #28]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	619a      	str	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	429a      	cmp	r2, r3
 8009120:	bf38      	it	cc
 8009122:	461a      	movcc	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	60da      	str	r2, [r3, #12]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	441a      	add	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f47f aed4 	bne.w	8008eec <f_write+0x76>
 8009144:	e000      	b.n	8009148 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009146:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	7d1b      	ldrb	r3, [r3, #20]
 800914c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009150:	b2da      	uxtb	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3730      	adds	r7, #48	; 0x30
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f107 0208 	add.w	r2, r7, #8
 800916e:	4611      	mov	r1, r2
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff fb07 	bl	8008784 <validate>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d168      	bne.n	8009252 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7d1b      	ldrb	r3, [r3, #20]
 8009184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009188:	2b00      	cmp	r3, #0
 800918a:	d062      	beq.n	8009252 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7d1b      	ldrb	r3, [r3, #20]
 8009190:	b25b      	sxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	da15      	bge.n	80091c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7858      	ldrb	r0, [r3, #1]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1a      	ldr	r2, [r3, #32]
 80091a4:	2301      	movs	r3, #1
 80091a6:	f7fd fe45 	bl	8006e34 <disk_write>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <f_sync+0x54>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e04f      	b.n	8009254 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80091c2:	f7fd fd79 	bl	8006cb8 <get_fattime>
 80091c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	4619      	mov	r1, r3
 80091d0:	4610      	mov	r0, r2
 80091d2:	f7fe f91d 	bl	8007410 <move_window>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d138      	bne.n	8009252 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	330b      	adds	r3, #11
 80091ea:	781a      	ldrb	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	330b      	adds	r3, #11
 80091f0:	f042 0220 	orr.w	r2, r2, #32
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	461a      	mov	r2, r3
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	f7fe fe2a 	bl	8007e5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f103 021c 	add.w	r2, r3, #28
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7fd fea1 	bl	8006f5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3316      	adds	r3, #22
 800921e:	6939      	ldr	r1, [r7, #16]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fd fe9b 	bl	8006f5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3312      	adds	r3, #18
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f7fd fe7a 	bl	8006f26 <st_word>
					fs->wflag = 1;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2201      	movs	r2, #1
 8009236:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4618      	mov	r0, r3
 800923c:	f7fe f916 	bl	800746c <sync_fs>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7d1b      	ldrb	r3, [r3, #20]
 8009248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800924c:	b2da      	uxtb	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009252:	7dfb      	ldrb	r3, [r7, #23]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ff7b 	bl	8009160 <f_sync>
 800926a:	4603      	mov	r3, r0
 800926c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d118      	bne.n	80092a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f107 0208 	add.w	r2, r7, #8
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff fa81 	bl	8008784 <validate>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10c      	bne.n	80092a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe f819 	bl	80072c8 <dec_lock>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80092c6:	4b1f      	ldr	r3, [pc, #124]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092c8:	7a5b      	ldrb	r3, [r3, #9]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d131      	bne.n	8009334 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80092d0:	4b1c      	ldr	r3, [pc, #112]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092d2:	7a5b      	ldrb	r3, [r3, #9]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	461a      	mov	r2, r3
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092da:	2100      	movs	r1, #0
 80092dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80092de:	4b19      	ldr	r3, [pc, #100]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092e0:	7a5b      	ldrb	r3, [r3, #9]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	4a17      	ldr	r2, [pc, #92]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80092ee:	4b15      	ldr	r3, [pc, #84]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092f0:	7a5b      	ldrb	r3, [r3, #9]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 80092f8:	4413      	add	r3, r2
 80092fa:	79fa      	ldrb	r2, [r7, #7]
 80092fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 8009300:	7a5b      	ldrb	r3, [r3, #9]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	b2d1      	uxtb	r1, r2
 8009308:	4a0e      	ldr	r2, [pc, #56]	; (8009344 <FATFS_LinkDriverEx+0x94>)
 800930a:	7251      	strb	r1, [r2, #9]
 800930c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800930e:	7dbb      	ldrb	r3, [r7, #22]
 8009310:	3330      	adds	r3, #48	; 0x30
 8009312:	b2da      	uxtb	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	3301      	adds	r3, #1
 800931c:	223a      	movs	r2, #58	; 0x3a
 800931e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	3302      	adds	r3, #2
 8009324:	222f      	movs	r2, #47	; 0x2f
 8009326:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3303      	adds	r3, #3
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
}
 8009336:	4618      	mov	r0, r3
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20000844 	.word	0x20000844

08009348 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009352:	2200      	movs	r2, #0
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff ffaa 	bl	80092b0 <FATFS_LinkDriverEx>
 800935c:	4603      	mov	r3, r0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <atoi>:
 8009366:	220a      	movs	r2, #10
 8009368:	2100      	movs	r1, #0
 800936a:	f000 b9cf 	b.w	800970c <strtol>
	...

08009370 <__errno>:
 8009370:	4b01      	ldr	r3, [pc, #4]	; (8009378 <__errno+0x8>)
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000038 	.word	0x20000038

0800937c <__libc_init_array>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4d0d      	ldr	r5, [pc, #52]	; (80093b4 <__libc_init_array+0x38>)
 8009380:	4c0d      	ldr	r4, [pc, #52]	; (80093b8 <__libc_init_array+0x3c>)
 8009382:	1b64      	subs	r4, r4, r5
 8009384:	10a4      	asrs	r4, r4, #2
 8009386:	2600      	movs	r6, #0
 8009388:	42a6      	cmp	r6, r4
 800938a:	d109      	bne.n	80093a0 <__libc_init_array+0x24>
 800938c:	4d0b      	ldr	r5, [pc, #44]	; (80093bc <__libc_init_array+0x40>)
 800938e:	4c0c      	ldr	r4, [pc, #48]	; (80093c0 <__libc_init_array+0x44>)
 8009390:	f001 fafc 	bl	800a98c <_init>
 8009394:	1b64      	subs	r4, r4, r5
 8009396:	10a4      	asrs	r4, r4, #2
 8009398:	2600      	movs	r6, #0
 800939a:	42a6      	cmp	r6, r4
 800939c:	d105      	bne.n	80093aa <__libc_init_array+0x2e>
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a4:	4798      	blx	r3
 80093a6:	3601      	adds	r6, #1
 80093a8:	e7ee      	b.n	8009388 <__libc_init_array+0xc>
 80093aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ae:	4798      	blx	r3
 80093b0:	3601      	adds	r6, #1
 80093b2:	e7f2      	b.n	800939a <__libc_init_array+0x1e>
 80093b4:	0800bb88 	.word	0x0800bb88
 80093b8:	0800bb88 	.word	0x0800bb88
 80093bc:	0800bb88 	.word	0x0800bb88
 80093c0:	0800bb8c 	.word	0x0800bb8c

080093c4 <__itoa>:
 80093c4:	1e93      	subs	r3, r2, #2
 80093c6:	2b22      	cmp	r3, #34	; 0x22
 80093c8:	b510      	push	{r4, lr}
 80093ca:	460c      	mov	r4, r1
 80093cc:	d904      	bls.n	80093d8 <__itoa+0x14>
 80093ce:	2300      	movs	r3, #0
 80093d0:	700b      	strb	r3, [r1, #0]
 80093d2:	461c      	mov	r4, r3
 80093d4:	4620      	mov	r0, r4
 80093d6:	bd10      	pop	{r4, pc}
 80093d8:	2a0a      	cmp	r2, #10
 80093da:	d109      	bne.n	80093f0 <__itoa+0x2c>
 80093dc:	2800      	cmp	r0, #0
 80093de:	da07      	bge.n	80093f0 <__itoa+0x2c>
 80093e0:	232d      	movs	r3, #45	; 0x2d
 80093e2:	700b      	strb	r3, [r1, #0]
 80093e4:	4240      	negs	r0, r0
 80093e6:	2101      	movs	r1, #1
 80093e8:	4421      	add	r1, r4
 80093ea:	f000 f999 	bl	8009720 <__utoa>
 80093ee:	e7f1      	b.n	80093d4 <__itoa+0x10>
 80093f0:	2100      	movs	r1, #0
 80093f2:	e7f9      	b.n	80093e8 <__itoa+0x24>

080093f4 <itoa>:
 80093f4:	f7ff bfe6 	b.w	80093c4 <__itoa>

080093f8 <malloc>:
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <malloc+0xc>)
 80093fa:	4601      	mov	r1, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f000 b87f 	b.w	8009500 <_malloc_r>
 8009402:	bf00      	nop
 8009404:	20000038 	.word	0x20000038

08009408 <free>:
 8009408:	4b02      	ldr	r3, [pc, #8]	; (8009414 <free+0xc>)
 800940a:	4601      	mov	r1, r0
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	f000 b80b 	b.w	8009428 <_free_r>
 8009412:	bf00      	nop
 8009414:	20000038 	.word	0x20000038

08009418 <memset>:
 8009418:	4402      	add	r2, r0
 800941a:	4603      	mov	r3, r0
 800941c:	4293      	cmp	r3, r2
 800941e:	d100      	bne.n	8009422 <memset+0xa>
 8009420:	4770      	bx	lr
 8009422:	f803 1b01 	strb.w	r1, [r3], #1
 8009426:	e7f9      	b.n	800941c <memset+0x4>

08009428 <_free_r>:
 8009428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800942a:	2900      	cmp	r1, #0
 800942c:	d044      	beq.n	80094b8 <_free_r+0x90>
 800942e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009432:	9001      	str	r0, [sp, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f1a1 0404 	sub.w	r4, r1, #4
 800943a:	bfb8      	it	lt
 800943c:	18e4      	addlt	r4, r4, r3
 800943e:	f000 f9b1 	bl	80097a4 <__malloc_lock>
 8009442:	4a1e      	ldr	r2, [pc, #120]	; (80094bc <_free_r+0x94>)
 8009444:	9801      	ldr	r0, [sp, #4]
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	b933      	cbnz	r3, 8009458 <_free_r+0x30>
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	b003      	add	sp, #12
 8009450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009454:	f000 b9ac 	b.w	80097b0 <__malloc_unlock>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d908      	bls.n	800946e <_free_r+0x46>
 800945c:	6825      	ldr	r5, [r4, #0]
 800945e:	1961      	adds	r1, r4, r5
 8009460:	428b      	cmp	r3, r1
 8009462:	bf01      	itttt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	1949      	addeq	r1, r1, r5
 800946a:	6021      	streq	r1, [r4, #0]
 800946c:	e7ed      	b.n	800944a <_free_r+0x22>
 800946e:	461a      	mov	r2, r3
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b10b      	cbz	r3, 8009478 <_free_r+0x50>
 8009474:	42a3      	cmp	r3, r4
 8009476:	d9fa      	bls.n	800946e <_free_r+0x46>
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	1855      	adds	r5, r2, r1
 800947c:	42a5      	cmp	r5, r4
 800947e:	d10b      	bne.n	8009498 <_free_r+0x70>
 8009480:	6824      	ldr	r4, [r4, #0]
 8009482:	4421      	add	r1, r4
 8009484:	1854      	adds	r4, r2, r1
 8009486:	42a3      	cmp	r3, r4
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	d1e0      	bne.n	800944e <_free_r+0x26>
 800948c:	681c      	ldr	r4, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	6053      	str	r3, [r2, #4]
 8009492:	4421      	add	r1, r4
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	e7da      	b.n	800944e <_free_r+0x26>
 8009498:	d902      	bls.n	80094a0 <_free_r+0x78>
 800949a:	230c      	movs	r3, #12
 800949c:	6003      	str	r3, [r0, #0]
 800949e:	e7d6      	b.n	800944e <_free_r+0x26>
 80094a0:	6825      	ldr	r5, [r4, #0]
 80094a2:	1961      	adds	r1, r4, r5
 80094a4:	428b      	cmp	r3, r1
 80094a6:	bf04      	itt	eq
 80094a8:	6819      	ldreq	r1, [r3, #0]
 80094aa:	685b      	ldreq	r3, [r3, #4]
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	bf04      	itt	eq
 80094b0:	1949      	addeq	r1, r1, r5
 80094b2:	6021      	streq	r1, [r4, #0]
 80094b4:	6054      	str	r4, [r2, #4]
 80094b6:	e7ca      	b.n	800944e <_free_r+0x26>
 80094b8:	b003      	add	sp, #12
 80094ba:	bd30      	pop	{r4, r5, pc}
 80094bc:	20000850 	.word	0x20000850

080094c0 <sbrk_aligned>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	4e0e      	ldr	r6, [pc, #56]	; (80094fc <sbrk_aligned+0x3c>)
 80094c4:	460c      	mov	r4, r1
 80094c6:	6831      	ldr	r1, [r6, #0]
 80094c8:	4605      	mov	r5, r0
 80094ca:	b911      	cbnz	r1, 80094d2 <sbrk_aligned+0x12>
 80094cc:	f000 f88c 	bl	80095e8 <_sbrk_r>
 80094d0:	6030      	str	r0, [r6, #0]
 80094d2:	4621      	mov	r1, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	f000 f887 	bl	80095e8 <_sbrk_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d00a      	beq.n	80094f4 <sbrk_aligned+0x34>
 80094de:	1cc4      	adds	r4, r0, #3
 80094e0:	f024 0403 	bic.w	r4, r4, #3
 80094e4:	42a0      	cmp	r0, r4
 80094e6:	d007      	beq.n	80094f8 <sbrk_aligned+0x38>
 80094e8:	1a21      	subs	r1, r4, r0
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 f87c 	bl	80095e8 <_sbrk_r>
 80094f0:	3001      	adds	r0, #1
 80094f2:	d101      	bne.n	80094f8 <sbrk_aligned+0x38>
 80094f4:	f04f 34ff 	mov.w	r4, #4294967295
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	20000854 	.word	0x20000854

08009500 <_malloc_r>:
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	1ccd      	adds	r5, r1, #3
 8009506:	f025 0503 	bic.w	r5, r5, #3
 800950a:	3508      	adds	r5, #8
 800950c:	2d0c      	cmp	r5, #12
 800950e:	bf38      	it	cc
 8009510:	250c      	movcc	r5, #12
 8009512:	2d00      	cmp	r5, #0
 8009514:	4607      	mov	r7, r0
 8009516:	db01      	blt.n	800951c <_malloc_r+0x1c>
 8009518:	42a9      	cmp	r1, r5
 800951a:	d905      	bls.n	8009528 <_malloc_r+0x28>
 800951c:	230c      	movs	r3, #12
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	2600      	movs	r6, #0
 8009522:	4630      	mov	r0, r6
 8009524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009528:	4e2e      	ldr	r6, [pc, #184]	; (80095e4 <_malloc_r+0xe4>)
 800952a:	f000 f93b 	bl	80097a4 <__malloc_lock>
 800952e:	6833      	ldr	r3, [r6, #0]
 8009530:	461c      	mov	r4, r3
 8009532:	bb34      	cbnz	r4, 8009582 <_malloc_r+0x82>
 8009534:	4629      	mov	r1, r5
 8009536:	4638      	mov	r0, r7
 8009538:	f7ff ffc2 	bl	80094c0 <sbrk_aligned>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	4604      	mov	r4, r0
 8009540:	d14d      	bne.n	80095de <_malloc_r+0xde>
 8009542:	6834      	ldr	r4, [r6, #0]
 8009544:	4626      	mov	r6, r4
 8009546:	2e00      	cmp	r6, #0
 8009548:	d140      	bne.n	80095cc <_malloc_r+0xcc>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	4631      	mov	r1, r6
 800954e:	4638      	mov	r0, r7
 8009550:	eb04 0803 	add.w	r8, r4, r3
 8009554:	f000 f848 	bl	80095e8 <_sbrk_r>
 8009558:	4580      	cmp	r8, r0
 800955a:	d13a      	bne.n	80095d2 <_malloc_r+0xd2>
 800955c:	6821      	ldr	r1, [r4, #0]
 800955e:	3503      	adds	r5, #3
 8009560:	1a6d      	subs	r5, r5, r1
 8009562:	f025 0503 	bic.w	r5, r5, #3
 8009566:	3508      	adds	r5, #8
 8009568:	2d0c      	cmp	r5, #12
 800956a:	bf38      	it	cc
 800956c:	250c      	movcc	r5, #12
 800956e:	4629      	mov	r1, r5
 8009570:	4638      	mov	r0, r7
 8009572:	f7ff ffa5 	bl	80094c0 <sbrk_aligned>
 8009576:	3001      	adds	r0, #1
 8009578:	d02b      	beq.n	80095d2 <_malloc_r+0xd2>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	442b      	add	r3, r5
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	e00e      	b.n	80095a0 <_malloc_r+0xa0>
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	1b52      	subs	r2, r2, r5
 8009586:	d41e      	bmi.n	80095c6 <_malloc_r+0xc6>
 8009588:	2a0b      	cmp	r2, #11
 800958a:	d916      	bls.n	80095ba <_malloc_r+0xba>
 800958c:	1961      	adds	r1, r4, r5
 800958e:	42a3      	cmp	r3, r4
 8009590:	6025      	str	r5, [r4, #0]
 8009592:	bf18      	it	ne
 8009594:	6059      	strne	r1, [r3, #4]
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	bf08      	it	eq
 800959a:	6031      	streq	r1, [r6, #0]
 800959c:	5162      	str	r2, [r4, r5]
 800959e:	604b      	str	r3, [r1, #4]
 80095a0:	4638      	mov	r0, r7
 80095a2:	f104 060b 	add.w	r6, r4, #11
 80095a6:	f000 f903 	bl	80097b0 <__malloc_unlock>
 80095aa:	f026 0607 	bic.w	r6, r6, #7
 80095ae:	1d23      	adds	r3, r4, #4
 80095b0:	1af2      	subs	r2, r6, r3
 80095b2:	d0b6      	beq.n	8009522 <_malloc_r+0x22>
 80095b4:	1b9b      	subs	r3, r3, r6
 80095b6:	50a3      	str	r3, [r4, r2]
 80095b8:	e7b3      	b.n	8009522 <_malloc_r+0x22>
 80095ba:	6862      	ldr	r2, [r4, #4]
 80095bc:	42a3      	cmp	r3, r4
 80095be:	bf0c      	ite	eq
 80095c0:	6032      	streq	r2, [r6, #0]
 80095c2:	605a      	strne	r2, [r3, #4]
 80095c4:	e7ec      	b.n	80095a0 <_malloc_r+0xa0>
 80095c6:	4623      	mov	r3, r4
 80095c8:	6864      	ldr	r4, [r4, #4]
 80095ca:	e7b2      	b.n	8009532 <_malloc_r+0x32>
 80095cc:	4634      	mov	r4, r6
 80095ce:	6876      	ldr	r6, [r6, #4]
 80095d0:	e7b9      	b.n	8009546 <_malloc_r+0x46>
 80095d2:	230c      	movs	r3, #12
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	4638      	mov	r0, r7
 80095d8:	f000 f8ea 	bl	80097b0 <__malloc_unlock>
 80095dc:	e7a1      	b.n	8009522 <_malloc_r+0x22>
 80095de:	6025      	str	r5, [r4, #0]
 80095e0:	e7de      	b.n	80095a0 <_malloc_r+0xa0>
 80095e2:	bf00      	nop
 80095e4:	20000850 	.word	0x20000850

080095e8 <_sbrk_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d06      	ldr	r5, [pc, #24]	; (8009604 <_sbrk_r+0x1c>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	f7f9 f8bc 	bl	8002770 <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_sbrk_r+0x1a>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_sbrk_r+0x1a>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	20000858 	.word	0x20000858

08009608 <_strtol_l.constprop.0>:
 8009608:	2b01      	cmp	r3, #1
 800960a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800960e:	d001      	beq.n	8009614 <_strtol_l.constprop.0+0xc>
 8009610:	2b24      	cmp	r3, #36	; 0x24
 8009612:	d906      	bls.n	8009622 <_strtol_l.constprop.0+0x1a>
 8009614:	f7ff feac 	bl	8009370 <__errno>
 8009618:	2316      	movs	r3, #22
 800961a:	6003      	str	r3, [r0, #0]
 800961c:	2000      	movs	r0, #0
 800961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009622:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009708 <_strtol_l.constprop.0+0x100>
 8009626:	460d      	mov	r5, r1
 8009628:	462e      	mov	r6, r5
 800962a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800962e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009632:	f017 0708 	ands.w	r7, r7, #8
 8009636:	d1f7      	bne.n	8009628 <_strtol_l.constprop.0+0x20>
 8009638:	2c2d      	cmp	r4, #45	; 0x2d
 800963a:	d132      	bne.n	80096a2 <_strtol_l.constprop.0+0x9a>
 800963c:	782c      	ldrb	r4, [r5, #0]
 800963e:	2701      	movs	r7, #1
 8009640:	1cb5      	adds	r5, r6, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d05b      	beq.n	80096fe <_strtol_l.constprop.0+0xf6>
 8009646:	2b10      	cmp	r3, #16
 8009648:	d109      	bne.n	800965e <_strtol_l.constprop.0+0x56>
 800964a:	2c30      	cmp	r4, #48	; 0x30
 800964c:	d107      	bne.n	800965e <_strtol_l.constprop.0+0x56>
 800964e:	782c      	ldrb	r4, [r5, #0]
 8009650:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009654:	2c58      	cmp	r4, #88	; 0x58
 8009656:	d14d      	bne.n	80096f4 <_strtol_l.constprop.0+0xec>
 8009658:	786c      	ldrb	r4, [r5, #1]
 800965a:	2310      	movs	r3, #16
 800965c:	3502      	adds	r5, #2
 800965e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009662:	f108 38ff 	add.w	r8, r8, #4294967295
 8009666:	f04f 0c00 	mov.w	ip, #0
 800966a:	fbb8 f9f3 	udiv	r9, r8, r3
 800966e:	4666      	mov	r6, ip
 8009670:	fb03 8a19 	mls	sl, r3, r9, r8
 8009674:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009678:	f1be 0f09 	cmp.w	lr, #9
 800967c:	d816      	bhi.n	80096ac <_strtol_l.constprop.0+0xa4>
 800967e:	4674      	mov	r4, lr
 8009680:	42a3      	cmp	r3, r4
 8009682:	dd24      	ble.n	80096ce <_strtol_l.constprop.0+0xc6>
 8009684:	f1bc 0f00 	cmp.w	ip, #0
 8009688:	db1e      	blt.n	80096c8 <_strtol_l.constprop.0+0xc0>
 800968a:	45b1      	cmp	r9, r6
 800968c:	d31c      	bcc.n	80096c8 <_strtol_l.constprop.0+0xc0>
 800968e:	d101      	bne.n	8009694 <_strtol_l.constprop.0+0x8c>
 8009690:	45a2      	cmp	sl, r4
 8009692:	db19      	blt.n	80096c8 <_strtol_l.constprop.0+0xc0>
 8009694:	fb06 4603 	mla	r6, r6, r3, r4
 8009698:	f04f 0c01 	mov.w	ip, #1
 800969c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096a0:	e7e8      	b.n	8009674 <_strtol_l.constprop.0+0x6c>
 80096a2:	2c2b      	cmp	r4, #43	; 0x2b
 80096a4:	bf04      	itt	eq
 80096a6:	782c      	ldrbeq	r4, [r5, #0]
 80096a8:	1cb5      	addeq	r5, r6, #2
 80096aa:	e7ca      	b.n	8009642 <_strtol_l.constprop.0+0x3a>
 80096ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096b0:	f1be 0f19 	cmp.w	lr, #25
 80096b4:	d801      	bhi.n	80096ba <_strtol_l.constprop.0+0xb2>
 80096b6:	3c37      	subs	r4, #55	; 0x37
 80096b8:	e7e2      	b.n	8009680 <_strtol_l.constprop.0+0x78>
 80096ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096be:	f1be 0f19 	cmp.w	lr, #25
 80096c2:	d804      	bhi.n	80096ce <_strtol_l.constprop.0+0xc6>
 80096c4:	3c57      	subs	r4, #87	; 0x57
 80096c6:	e7db      	b.n	8009680 <_strtol_l.constprop.0+0x78>
 80096c8:	f04f 3cff 	mov.w	ip, #4294967295
 80096cc:	e7e6      	b.n	800969c <_strtol_l.constprop.0+0x94>
 80096ce:	f1bc 0f00 	cmp.w	ip, #0
 80096d2:	da05      	bge.n	80096e0 <_strtol_l.constprop.0+0xd8>
 80096d4:	2322      	movs	r3, #34	; 0x22
 80096d6:	6003      	str	r3, [r0, #0]
 80096d8:	4646      	mov	r6, r8
 80096da:	b942      	cbnz	r2, 80096ee <_strtol_l.constprop.0+0xe6>
 80096dc:	4630      	mov	r0, r6
 80096de:	e79e      	b.n	800961e <_strtol_l.constprop.0+0x16>
 80096e0:	b107      	cbz	r7, 80096e4 <_strtol_l.constprop.0+0xdc>
 80096e2:	4276      	negs	r6, r6
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	d0f9      	beq.n	80096dc <_strtol_l.constprop.0+0xd4>
 80096e8:	f1bc 0f00 	cmp.w	ip, #0
 80096ec:	d000      	beq.n	80096f0 <_strtol_l.constprop.0+0xe8>
 80096ee:	1e69      	subs	r1, r5, #1
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	e7f3      	b.n	80096dc <_strtol_l.constprop.0+0xd4>
 80096f4:	2430      	movs	r4, #48	; 0x30
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1b1      	bne.n	800965e <_strtol_l.constprop.0+0x56>
 80096fa:	2308      	movs	r3, #8
 80096fc:	e7af      	b.n	800965e <_strtol_l.constprop.0+0x56>
 80096fe:	2c30      	cmp	r4, #48	; 0x30
 8009700:	d0a5      	beq.n	800964e <_strtol_l.constprop.0+0x46>
 8009702:	230a      	movs	r3, #10
 8009704:	e7ab      	b.n	800965e <_strtol_l.constprop.0+0x56>
 8009706:	bf00      	nop
 8009708:	0800b8a2 	.word	0x0800b8a2

0800970c <strtol>:
 800970c:	4613      	mov	r3, r2
 800970e:	460a      	mov	r2, r1
 8009710:	4601      	mov	r1, r0
 8009712:	4802      	ldr	r0, [pc, #8]	; (800971c <strtol+0x10>)
 8009714:	6800      	ldr	r0, [r0, #0]
 8009716:	f7ff bf77 	b.w	8009608 <_strtol_l.constprop.0>
 800971a:	bf00      	nop
 800971c:	20000038 	.word	0x20000038

08009720 <__utoa>:
 8009720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009722:	4c1f      	ldr	r4, [pc, #124]	; (80097a0 <__utoa+0x80>)
 8009724:	b08b      	sub	sp, #44	; 0x2c
 8009726:	4605      	mov	r5, r0
 8009728:	460b      	mov	r3, r1
 800972a:	466e      	mov	r6, sp
 800972c:	f104 0c20 	add.w	ip, r4, #32
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	6861      	ldr	r1, [r4, #4]
 8009734:	4637      	mov	r7, r6
 8009736:	c703      	stmia	r7!, {r0, r1}
 8009738:	3408      	adds	r4, #8
 800973a:	4564      	cmp	r4, ip
 800973c:	463e      	mov	r6, r7
 800973e:	d1f7      	bne.n	8009730 <__utoa+0x10>
 8009740:	7921      	ldrb	r1, [r4, #4]
 8009742:	7139      	strb	r1, [r7, #4]
 8009744:	1e91      	subs	r1, r2, #2
 8009746:	6820      	ldr	r0, [r4, #0]
 8009748:	6038      	str	r0, [r7, #0]
 800974a:	2922      	cmp	r1, #34	; 0x22
 800974c:	f04f 0100 	mov.w	r1, #0
 8009750:	d904      	bls.n	800975c <__utoa+0x3c>
 8009752:	7019      	strb	r1, [r3, #0]
 8009754:	460b      	mov	r3, r1
 8009756:	4618      	mov	r0, r3
 8009758:	b00b      	add	sp, #44	; 0x2c
 800975a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975c:	1e58      	subs	r0, r3, #1
 800975e:	4684      	mov	ip, r0
 8009760:	fbb5 f7f2 	udiv	r7, r5, r2
 8009764:	fb02 5617 	mls	r6, r2, r7, r5
 8009768:	3628      	adds	r6, #40	; 0x28
 800976a:	446e      	add	r6, sp
 800976c:	460c      	mov	r4, r1
 800976e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009772:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009776:	462e      	mov	r6, r5
 8009778:	42b2      	cmp	r2, r6
 800977a:	f101 0101 	add.w	r1, r1, #1
 800977e:	463d      	mov	r5, r7
 8009780:	d9ee      	bls.n	8009760 <__utoa+0x40>
 8009782:	2200      	movs	r2, #0
 8009784:	545a      	strb	r2, [r3, r1]
 8009786:	1919      	adds	r1, r3, r4
 8009788:	1aa5      	subs	r5, r4, r2
 800978a:	42aa      	cmp	r2, r5
 800978c:	dae3      	bge.n	8009756 <__utoa+0x36>
 800978e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009792:	780e      	ldrb	r6, [r1, #0]
 8009794:	7006      	strb	r6, [r0, #0]
 8009796:	3201      	adds	r2, #1
 8009798:	f801 5901 	strb.w	r5, [r1], #-1
 800979c:	e7f4      	b.n	8009788 <__utoa+0x68>
 800979e:	bf00      	nop
 80097a0:	0800b87c 	.word	0x0800b87c

080097a4 <__malloc_lock>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__malloc_lock+0x8>)
 80097a6:	f000 b809 	b.w	80097bc <__retarget_lock_acquire_recursive>
 80097aa:	bf00      	nop
 80097ac:	2000085c 	.word	0x2000085c

080097b0 <__malloc_unlock>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__malloc_unlock+0x8>)
 80097b2:	f000 b804 	b.w	80097be <__retarget_lock_release_recursive>
 80097b6:	bf00      	nop
 80097b8:	2000085c 	.word	0x2000085c

080097bc <__retarget_lock_acquire_recursive>:
 80097bc:	4770      	bx	lr

080097be <__retarget_lock_release_recursive>:
 80097be:	4770      	bx	lr

080097c0 <cos>:
 80097c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097c2:	ec53 2b10 	vmov	r2, r3, d0
 80097c6:	4826      	ldr	r0, [pc, #152]	; (8009860 <cos+0xa0>)
 80097c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80097cc:	4281      	cmp	r1, r0
 80097ce:	dc06      	bgt.n	80097de <cos+0x1e>
 80097d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009858 <cos+0x98>
 80097d4:	b005      	add	sp, #20
 80097d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80097da:	f000 baf1 	b.w	8009dc0 <__kernel_cos>
 80097de:	4821      	ldr	r0, [pc, #132]	; (8009864 <cos+0xa4>)
 80097e0:	4281      	cmp	r1, r0
 80097e2:	dd09      	ble.n	80097f8 <cos+0x38>
 80097e4:	ee10 0a10 	vmov	r0, s0
 80097e8:	4619      	mov	r1, r3
 80097ea:	f7f6 fcf9 	bl	80001e0 <__aeabi_dsub>
 80097ee:	ec41 0b10 	vmov	d0, r0, r1
 80097f2:	b005      	add	sp, #20
 80097f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80097f8:	4668      	mov	r0, sp
 80097fa:	f000 f8d5 	bl	80099a8 <__ieee754_rem_pio2>
 80097fe:	f000 0003 	and.w	r0, r0, #3
 8009802:	2801      	cmp	r0, #1
 8009804:	d00b      	beq.n	800981e <cos+0x5e>
 8009806:	2802      	cmp	r0, #2
 8009808:	d016      	beq.n	8009838 <cos+0x78>
 800980a:	b9e0      	cbnz	r0, 8009846 <cos+0x86>
 800980c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009810:	ed9d 0b00 	vldr	d0, [sp]
 8009814:	f000 fad4 	bl	8009dc0 <__kernel_cos>
 8009818:	ec51 0b10 	vmov	r0, r1, d0
 800981c:	e7e7      	b.n	80097ee <cos+0x2e>
 800981e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009822:	ed9d 0b00 	vldr	d0, [sp]
 8009826:	f000 fee3 	bl	800a5f0 <__kernel_sin>
 800982a:	ec53 2b10 	vmov	r2, r3, d0
 800982e:	ee10 0a10 	vmov	r0, s0
 8009832:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009836:	e7da      	b.n	80097ee <cos+0x2e>
 8009838:	ed9d 1b02 	vldr	d1, [sp, #8]
 800983c:	ed9d 0b00 	vldr	d0, [sp]
 8009840:	f000 fabe 	bl	8009dc0 <__kernel_cos>
 8009844:	e7f1      	b.n	800982a <cos+0x6a>
 8009846:	ed9d 1b02 	vldr	d1, [sp, #8]
 800984a:	ed9d 0b00 	vldr	d0, [sp]
 800984e:	2001      	movs	r0, #1
 8009850:	f000 fece 	bl	800a5f0 <__kernel_sin>
 8009854:	e7e0      	b.n	8009818 <cos+0x58>
 8009856:	bf00      	nop
	...
 8009860:	3fe921fb 	.word	0x3fe921fb
 8009864:	7fefffff 	.word	0x7fefffff

08009868 <round>:
 8009868:	ec51 0b10 	vmov	r0, r1, d0
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009872:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009876:	2c13      	cmp	r4, #19
 8009878:	ee10 2a10 	vmov	r2, s0
 800987c:	460b      	mov	r3, r1
 800987e:	dc19      	bgt.n	80098b4 <round+0x4c>
 8009880:	2c00      	cmp	r4, #0
 8009882:	da09      	bge.n	8009898 <round+0x30>
 8009884:	3401      	adds	r4, #1
 8009886:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800988a:	d103      	bne.n	8009894 <round+0x2c>
 800988c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009890:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009894:	2200      	movs	r2, #0
 8009896:	e028      	b.n	80098ea <round+0x82>
 8009898:	4d15      	ldr	r5, [pc, #84]	; (80098f0 <round+0x88>)
 800989a:	4125      	asrs	r5, r4
 800989c:	ea01 0605 	and.w	r6, r1, r5
 80098a0:	4332      	orrs	r2, r6
 80098a2:	d00e      	beq.n	80098c2 <round+0x5a>
 80098a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80098a8:	fa42 f404 	asr.w	r4, r2, r4
 80098ac:	4423      	add	r3, r4
 80098ae:	ea23 0305 	bic.w	r3, r3, r5
 80098b2:	e7ef      	b.n	8009894 <round+0x2c>
 80098b4:	2c33      	cmp	r4, #51	; 0x33
 80098b6:	dd07      	ble.n	80098c8 <round+0x60>
 80098b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80098bc:	d101      	bne.n	80098c2 <round+0x5a>
 80098be:	f7f6 fc91 	bl	80001e4 <__adddf3>
 80098c2:	ec41 0b10 	vmov	d0, r0, r1
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80098cc:	f04f 35ff 	mov.w	r5, #4294967295
 80098d0:	40f5      	lsrs	r5, r6
 80098d2:	4228      	tst	r0, r5
 80098d4:	d0f5      	beq.n	80098c2 <round+0x5a>
 80098d6:	2101      	movs	r1, #1
 80098d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80098dc:	fa01 f404 	lsl.w	r4, r1, r4
 80098e0:	1912      	adds	r2, r2, r4
 80098e2:	bf28      	it	cs
 80098e4:	185b      	addcs	r3, r3, r1
 80098e6:	ea22 0205 	bic.w	r2, r2, r5
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	e7e8      	b.n	80098c2 <round+0x5a>
 80098f0:	000fffff 	.word	0x000fffff
 80098f4:	00000000 	.word	0x00000000

080098f8 <sin>:
 80098f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098fa:	ec53 2b10 	vmov	r2, r3, d0
 80098fe:	4828      	ldr	r0, [pc, #160]	; (80099a0 <sin+0xa8>)
 8009900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009904:	4281      	cmp	r1, r0
 8009906:	dc07      	bgt.n	8009918 <sin+0x20>
 8009908:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009998 <sin+0xa0>
 800990c:	2000      	movs	r0, #0
 800990e:	b005      	add	sp, #20
 8009910:	f85d eb04 	ldr.w	lr, [sp], #4
 8009914:	f000 be6c 	b.w	800a5f0 <__kernel_sin>
 8009918:	4822      	ldr	r0, [pc, #136]	; (80099a4 <sin+0xac>)
 800991a:	4281      	cmp	r1, r0
 800991c:	dd09      	ble.n	8009932 <sin+0x3a>
 800991e:	ee10 0a10 	vmov	r0, s0
 8009922:	4619      	mov	r1, r3
 8009924:	f7f6 fc5c 	bl	80001e0 <__aeabi_dsub>
 8009928:	ec41 0b10 	vmov	d0, r0, r1
 800992c:	b005      	add	sp, #20
 800992e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009932:	4668      	mov	r0, sp
 8009934:	f000 f838 	bl	80099a8 <__ieee754_rem_pio2>
 8009938:	f000 0003 	and.w	r0, r0, #3
 800993c:	2801      	cmp	r0, #1
 800993e:	d00c      	beq.n	800995a <sin+0x62>
 8009940:	2802      	cmp	r0, #2
 8009942:	d011      	beq.n	8009968 <sin+0x70>
 8009944:	b9f0      	cbnz	r0, 8009984 <sin+0x8c>
 8009946:	ed9d 1b02 	vldr	d1, [sp, #8]
 800994a:	ed9d 0b00 	vldr	d0, [sp]
 800994e:	2001      	movs	r0, #1
 8009950:	f000 fe4e 	bl	800a5f0 <__kernel_sin>
 8009954:	ec51 0b10 	vmov	r0, r1, d0
 8009958:	e7e6      	b.n	8009928 <sin+0x30>
 800995a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800995e:	ed9d 0b00 	vldr	d0, [sp]
 8009962:	f000 fa2d 	bl	8009dc0 <__kernel_cos>
 8009966:	e7f5      	b.n	8009954 <sin+0x5c>
 8009968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800996c:	ed9d 0b00 	vldr	d0, [sp]
 8009970:	2001      	movs	r0, #1
 8009972:	f000 fe3d 	bl	800a5f0 <__kernel_sin>
 8009976:	ec53 2b10 	vmov	r2, r3, d0
 800997a:	ee10 0a10 	vmov	r0, s0
 800997e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009982:	e7d1      	b.n	8009928 <sin+0x30>
 8009984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009988:	ed9d 0b00 	vldr	d0, [sp]
 800998c:	f000 fa18 	bl	8009dc0 <__kernel_cos>
 8009990:	e7f1      	b.n	8009976 <sin+0x7e>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
	...
 80099a0:	3fe921fb 	.word	0x3fe921fb
 80099a4:	7fefffff 	.word	0x7fefffff

080099a8 <__ieee754_rem_pio2>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	ed2d 8b02 	vpush	{d8}
 80099b0:	ec55 4b10 	vmov	r4, r5, d0
 80099b4:	4bca      	ldr	r3, [pc, #808]	; (8009ce0 <__ieee754_rem_pio2+0x338>)
 80099b6:	b08b      	sub	sp, #44	; 0x2c
 80099b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80099bc:	4598      	cmp	r8, r3
 80099be:	4682      	mov	sl, r0
 80099c0:	9502      	str	r5, [sp, #8]
 80099c2:	dc08      	bgt.n	80099d6 <__ieee754_rem_pio2+0x2e>
 80099c4:	2200      	movs	r2, #0
 80099c6:	2300      	movs	r3, #0
 80099c8:	ed80 0b00 	vstr	d0, [r0]
 80099cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80099d0:	f04f 0b00 	mov.w	fp, #0
 80099d4:	e028      	b.n	8009a28 <__ieee754_rem_pio2+0x80>
 80099d6:	4bc3      	ldr	r3, [pc, #780]	; (8009ce4 <__ieee754_rem_pio2+0x33c>)
 80099d8:	4598      	cmp	r8, r3
 80099da:	dc78      	bgt.n	8009ace <__ieee754_rem_pio2+0x126>
 80099dc:	9b02      	ldr	r3, [sp, #8]
 80099de:	4ec2      	ldr	r6, [pc, #776]	; (8009ce8 <__ieee754_rem_pio2+0x340>)
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	ee10 0a10 	vmov	r0, s0
 80099e6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x300>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	4629      	mov	r1, r5
 80099ee:	dd39      	ble.n	8009a64 <__ieee754_rem_pio2+0xbc>
 80099f0:	f7f6 fbf6 	bl	80001e0 <__aeabi_dsub>
 80099f4:	45b0      	cmp	r8, r6
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	d01b      	beq.n	8009a34 <__ieee754_rem_pio2+0x8c>
 80099fc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009cb0 <__ieee754_rem_pio2+0x308>)
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	f7f6 fbed 	bl	80001e0 <__aeabi_dsub>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9ca 2300 	strd	r2, r3, [sl]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f6 fbe5 	bl	80001e0 <__aeabi_dsub>
 8009a16:	a3a6      	add	r3, pc, #664	; (adr r3, 8009cb0 <__ieee754_rem_pio2+0x308>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fbe0 	bl	80001e0 <__aeabi_dsub>
 8009a20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a24:	f04f 0b01 	mov.w	fp, #1
 8009a28:	4658      	mov	r0, fp
 8009a2a:	b00b      	add	sp, #44	; 0x2c
 8009a2c:	ecbd 8b02 	vpop	{d8}
 8009a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a34:	a3a0      	add	r3, pc, #640	; (adr r3, 8009cb8 <__ieee754_rem_pio2+0x310>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fbd1 	bl	80001e0 <__aeabi_dsub>
 8009a3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009cc0 <__ieee754_rem_pio2+0x318>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	f7f6 fbca 	bl	80001e0 <__aeabi_dsub>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	e9ca 2300 	strd	r2, r3, [sl]
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7f6 fbc2 	bl	80001e0 <__aeabi_dsub>
 8009a5c:	a398      	add	r3, pc, #608	; (adr r3, 8009cc0 <__ieee754_rem_pio2+0x318>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	e7db      	b.n	8009a1c <__ieee754_rem_pio2+0x74>
 8009a64:	f7f6 fbbe 	bl	80001e4 <__adddf3>
 8009a68:	45b0      	cmp	r8, r6
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	d016      	beq.n	8009a9e <__ieee754_rem_pio2+0xf6>
 8009a70:	a38f      	add	r3, pc, #572	; (adr r3, 8009cb0 <__ieee754_rem_pio2+0x308>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fbb5 	bl	80001e4 <__adddf3>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	e9ca 2300 	strd	r2, r3, [sl]
 8009a82:	4620      	mov	r0, r4
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7f6 fbab 	bl	80001e0 <__aeabi_dsub>
 8009a8a:	a389      	add	r3, pc, #548	; (adr r3, 8009cb0 <__ieee754_rem_pio2+0x308>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fba8 	bl	80001e4 <__adddf3>
 8009a94:	f04f 3bff 	mov.w	fp, #4294967295
 8009a98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a9c:	e7c4      	b.n	8009a28 <__ieee754_rem_pio2+0x80>
 8009a9e:	a386      	add	r3, pc, #536	; (adr r3, 8009cb8 <__ieee754_rem_pio2+0x310>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f7f6 fb9e 	bl	80001e4 <__adddf3>
 8009aa8:	a385      	add	r3, pc, #532	; (adr r3, 8009cc0 <__ieee754_rem_pio2+0x318>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	4604      	mov	r4, r0
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	f7f6 fb97 	bl	80001e4 <__adddf3>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	e9ca 2300 	strd	r2, r3, [sl]
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f6 fb8d 	bl	80001e0 <__aeabi_dsub>
 8009ac6:	a37e      	add	r3, pc, #504	; (adr r3, 8009cc0 <__ieee754_rem_pio2+0x318>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	e7e0      	b.n	8009a90 <__ieee754_rem_pio2+0xe8>
 8009ace:	4b87      	ldr	r3, [pc, #540]	; (8009cec <__ieee754_rem_pio2+0x344>)
 8009ad0:	4598      	cmp	r8, r3
 8009ad2:	f300 80d9 	bgt.w	8009c88 <__ieee754_rem_pio2+0x2e0>
 8009ad6:	f000 fe49 	bl	800a76c <fabs>
 8009ada:	ec55 4b10 	vmov	r4, r5, d0
 8009ade:	ee10 0a10 	vmov	r0, s0
 8009ae2:	a379      	add	r3, pc, #484	; (adr r3, 8009cc8 <__ieee754_rem_pio2+0x320>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 fd31 	bl	8000550 <__aeabi_dmul>
 8009aee:	4b80      	ldr	r3, [pc, #512]	; (8009cf0 <__ieee754_rem_pio2+0x348>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	f7f6 fb77 	bl	80001e4 <__adddf3>
 8009af6:	f7f6 ffc5 	bl	8000a84 <__aeabi_d2iz>
 8009afa:	4683      	mov	fp, r0
 8009afc:	f7f6 fcbe 	bl	800047c <__aeabi_i2d>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	ec43 2b18 	vmov	d8, r2, r3
 8009b08:	a367      	add	r3, pc, #412	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x300>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fd1f 	bl	8000550 <__aeabi_dmul>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fb61 	bl	80001e0 <__aeabi_dsub>
 8009b1e:	a364      	add	r3, pc, #400	; (adr r3, 8009cb0 <__ieee754_rem_pio2+0x308>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	4606      	mov	r6, r0
 8009b26:	460f      	mov	r7, r1
 8009b28:	ec51 0b18 	vmov	r0, r1, d8
 8009b2c:	f7f6 fd10 	bl	8000550 <__aeabi_dmul>
 8009b30:	f1bb 0f1f 	cmp.w	fp, #31
 8009b34:	4604      	mov	r4, r0
 8009b36:	460d      	mov	r5, r1
 8009b38:	dc0d      	bgt.n	8009b56 <__ieee754_rem_pio2+0x1ae>
 8009b3a:	4b6e      	ldr	r3, [pc, #440]	; (8009cf4 <__ieee754_rem_pio2+0x34c>)
 8009b3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b44:	4543      	cmp	r3, r8
 8009b46:	d006      	beq.n	8009b56 <__ieee754_rem_pio2+0x1ae>
 8009b48:	4622      	mov	r2, r4
 8009b4a:	462b      	mov	r3, r5
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f7f6 fb46 	bl	80001e0 <__aeabi_dsub>
 8009b54:	e00f      	b.n	8009b76 <__ieee754_rem_pio2+0x1ce>
 8009b56:	462b      	mov	r3, r5
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	f7f6 fb3f 	bl	80001e0 <__aeabi_dsub>
 8009b62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009b70:	f1b8 0f10 	cmp.w	r8, #16
 8009b74:	dc02      	bgt.n	8009b7c <__ieee754_rem_pio2+0x1d4>
 8009b76:	e9ca 0100 	strd	r0, r1, [sl]
 8009b7a:	e039      	b.n	8009bf0 <__ieee754_rem_pio2+0x248>
 8009b7c:	a34e      	add	r3, pc, #312	; (adr r3, 8009cb8 <__ieee754_rem_pio2+0x310>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	ec51 0b18 	vmov	r0, r1, d8
 8009b86:	f7f6 fce3 	bl	8000550 <__aeabi_dmul>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4630      	mov	r0, r6
 8009b94:	4639      	mov	r1, r7
 8009b96:	f7f6 fb23 	bl	80001e0 <__aeabi_dsub>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	f7f6 fb1b 	bl	80001e0 <__aeabi_dsub>
 8009baa:	4622      	mov	r2, r4
 8009bac:	462b      	mov	r3, r5
 8009bae:	f7f6 fb17 	bl	80001e0 <__aeabi_dsub>
 8009bb2:	a343      	add	r3, pc, #268	; (adr r3, 8009cc0 <__ieee754_rem_pio2+0x318>)
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	4604      	mov	r4, r0
 8009bba:	460d      	mov	r5, r1
 8009bbc:	ec51 0b18 	vmov	r0, r1, d8
 8009bc0:	f7f6 fcc6 	bl	8000550 <__aeabi_dmul>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f7f6 fb0a 	bl	80001e0 <__aeabi_dsub>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	460d      	mov	r5, r1
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 fb02 	bl	80001e0 <__aeabi_dsub>
 8009bdc:	9a03      	ldr	r2, [sp, #12]
 8009bde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b31      	cmp	r3, #49	; 0x31
 8009be6:	dc24      	bgt.n	8009c32 <__ieee754_rem_pio2+0x28a>
 8009be8:	e9ca 0100 	strd	r0, r1, [sl]
 8009bec:	4646      	mov	r6, r8
 8009bee:	464f      	mov	r7, r9
 8009bf0:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 faf0 	bl	80001e0 <__aeabi_dsub>
 8009c00:	462b      	mov	r3, r5
 8009c02:	4622      	mov	r2, r4
 8009c04:	f7f6 faec 	bl	80001e0 <__aeabi_dsub>
 8009c08:	9b02      	ldr	r3, [sp, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c10:	f6bf af0a 	bge.w	8009a28 <__ieee754_rem_pio2+0x80>
 8009c14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c18:	f8ca 3004 	str.w	r3, [sl, #4]
 8009c1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c20:	f8ca 8000 	str.w	r8, [sl]
 8009c24:	f8ca 0008 	str.w	r0, [sl, #8]
 8009c28:	f8ca 300c 	str.w	r3, [sl, #12]
 8009c2c:	f1cb 0b00 	rsb	fp, fp, #0
 8009c30:	e6fa      	b.n	8009a28 <__ieee754_rem_pio2+0x80>
 8009c32:	a327      	add	r3, pc, #156	; (adr r3, 8009cd0 <__ieee754_rem_pio2+0x328>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	ec51 0b18 	vmov	r0, r1, d8
 8009c3c:	f7f6 fc88 	bl	8000550 <__aeabi_dmul>
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 fac8 	bl	80001e0 <__aeabi_dsub>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4606      	mov	r6, r0
 8009c56:	460f      	mov	r7, r1
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 fac0 	bl	80001e0 <__aeabi_dsub>
 8009c60:	4622      	mov	r2, r4
 8009c62:	462b      	mov	r3, r5
 8009c64:	f7f6 fabc 	bl	80001e0 <__aeabi_dsub>
 8009c68:	a31b      	add	r3, pc, #108	; (adr r3, 8009cd8 <__ieee754_rem_pio2+0x330>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	4604      	mov	r4, r0
 8009c70:	460d      	mov	r5, r1
 8009c72:	ec51 0b18 	vmov	r0, r1, d8
 8009c76:	f7f6 fc6b 	bl	8000550 <__aeabi_dmul>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	f7f6 faaf 	bl	80001e0 <__aeabi_dsub>
 8009c82:	4604      	mov	r4, r0
 8009c84:	460d      	mov	r5, r1
 8009c86:	e75f      	b.n	8009b48 <__ieee754_rem_pio2+0x1a0>
 8009c88:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <__ieee754_rem_pio2+0x350>)
 8009c8a:	4598      	cmp	r8, r3
 8009c8c:	dd36      	ble.n	8009cfc <__ieee754_rem_pio2+0x354>
 8009c8e:	ee10 2a10 	vmov	r2, s0
 8009c92:	462b      	mov	r3, r5
 8009c94:	4620      	mov	r0, r4
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7f6 faa2 	bl	80001e0 <__aeabi_dsub>
 8009c9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ca0:	e9ca 0100 	strd	r0, r1, [sl]
 8009ca4:	e694      	b.n	80099d0 <__ieee754_rem_pio2+0x28>
 8009ca6:	bf00      	nop
 8009ca8:	54400000 	.word	0x54400000
 8009cac:	3ff921fb 	.word	0x3ff921fb
 8009cb0:	1a626331 	.word	0x1a626331
 8009cb4:	3dd0b461 	.word	0x3dd0b461
 8009cb8:	1a600000 	.word	0x1a600000
 8009cbc:	3dd0b461 	.word	0x3dd0b461
 8009cc0:	2e037073 	.word	0x2e037073
 8009cc4:	3ba3198a 	.word	0x3ba3198a
 8009cc8:	6dc9c883 	.word	0x6dc9c883
 8009ccc:	3fe45f30 	.word	0x3fe45f30
 8009cd0:	2e000000 	.word	0x2e000000
 8009cd4:	3ba3198a 	.word	0x3ba3198a
 8009cd8:	252049c1 	.word	0x252049c1
 8009cdc:	397b839a 	.word	0x397b839a
 8009ce0:	3fe921fb 	.word	0x3fe921fb
 8009ce4:	4002d97b 	.word	0x4002d97b
 8009ce8:	3ff921fb 	.word	0x3ff921fb
 8009cec:	413921fb 	.word	0x413921fb
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	0800b9a4 	.word	0x0800b9a4
 8009cf8:	7fefffff 	.word	0x7fefffff
 8009cfc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009d00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009d04:	ee10 0a10 	vmov	r0, s0
 8009d08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009d0c:	ee10 6a10 	vmov	r6, s0
 8009d10:	460f      	mov	r7, r1
 8009d12:	f7f6 feb7 	bl	8000a84 <__aeabi_d2iz>
 8009d16:	f7f6 fbb1 	bl	800047c <__aeabi_i2d>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4630      	mov	r0, r6
 8009d20:	4639      	mov	r1, r7
 8009d22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d26:	f7f6 fa5b 	bl	80001e0 <__aeabi_dsub>
 8009d2a:	4b23      	ldr	r3, [pc, #140]	; (8009db8 <__ieee754_rem_pio2+0x410>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f7f6 fc0f 	bl	8000550 <__aeabi_dmul>
 8009d32:	460f      	mov	r7, r1
 8009d34:	4606      	mov	r6, r0
 8009d36:	f7f6 fea5 	bl	8000a84 <__aeabi_d2iz>
 8009d3a:	f7f6 fb9f 	bl	800047c <__aeabi_i2d>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d4a:	f7f6 fa49 	bl	80001e0 <__aeabi_dsub>
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <__ieee754_rem_pio2+0x410>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	f7f6 fbfd 	bl	8000550 <__aeabi_dmul>
 8009d56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d5a:	ad04      	add	r5, sp, #16
 8009d5c:	f04f 0803 	mov.w	r8, #3
 8009d60:	46a9      	mov	r9, r5
 8009d62:	2600      	movs	r6, #0
 8009d64:	2700      	movs	r7, #0
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009d6e:	46c3      	mov	fp, r8
 8009d70:	3d08      	subs	r5, #8
 8009d72:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d76:	f7f6 fe53 	bl	8000a20 <__aeabi_dcmpeq>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d1f3      	bne.n	8009d66 <__ieee754_rem_pio2+0x3be>
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <__ieee754_rem_pio2+0x414>)
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	2302      	movs	r3, #2
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	4622      	mov	r2, r4
 8009d88:	465b      	mov	r3, fp
 8009d8a:	4651      	mov	r1, sl
 8009d8c:	4648      	mov	r0, r9
 8009d8e:	f000 f8df 	bl	8009f50 <__kernel_rem_pio2>
 8009d92:	9b02      	ldr	r3, [sp, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	4683      	mov	fp, r0
 8009d98:	f6bf ae46 	bge.w	8009a28 <__ieee754_rem_pio2+0x80>
 8009d9c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009da4:	e9ca 2300 	strd	r2, r3, [sl]
 8009da8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009dac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009db0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009db4:	e73a      	b.n	8009c2c <__ieee754_rem_pio2+0x284>
 8009db6:	bf00      	nop
 8009db8:	41700000 	.word	0x41700000
 8009dbc:	0800ba24 	.word	0x0800ba24

08009dc0 <__kernel_cos>:
 8009dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	ec57 6b10 	vmov	r6, r7, d0
 8009dc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009dcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009dd0:	ed8d 1b00 	vstr	d1, [sp]
 8009dd4:	da07      	bge.n	8009de6 <__kernel_cos+0x26>
 8009dd6:	ee10 0a10 	vmov	r0, s0
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 fe52 	bl	8000a84 <__aeabi_d2iz>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	f000 8088 	beq.w	8009ef6 <__kernel_cos+0x136>
 8009de6:	4632      	mov	r2, r6
 8009de8:	463b      	mov	r3, r7
 8009dea:	4630      	mov	r0, r6
 8009dec:	4639      	mov	r1, r7
 8009dee:	f7f6 fbaf 	bl	8000550 <__aeabi_dmul>
 8009df2:	4b51      	ldr	r3, [pc, #324]	; (8009f38 <__kernel_cos+0x178>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	460d      	mov	r5, r1
 8009dfa:	f7f6 fba9 	bl	8000550 <__aeabi_dmul>
 8009dfe:	a340      	add	r3, pc, #256	; (adr r3, 8009f00 <__kernel_cos+0x140>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	4682      	mov	sl, r0
 8009e06:	468b      	mov	fp, r1
 8009e08:	4620      	mov	r0, r4
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f7f6 fba0 	bl	8000550 <__aeabi_dmul>
 8009e10:	a33d      	add	r3, pc, #244	; (adr r3, 8009f08 <__kernel_cos+0x148>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 f9e5 	bl	80001e4 <__adddf3>
 8009e1a:	4622      	mov	r2, r4
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	f7f6 fb97 	bl	8000550 <__aeabi_dmul>
 8009e22:	a33b      	add	r3, pc, #236	; (adr r3, 8009f10 <__kernel_cos+0x150>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f7f6 f9da 	bl	80001e0 <__aeabi_dsub>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	462b      	mov	r3, r5
 8009e30:	f7f6 fb8e 	bl	8000550 <__aeabi_dmul>
 8009e34:	a338      	add	r3, pc, #224	; (adr r3, 8009f18 <__kernel_cos+0x158>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 f9d3 	bl	80001e4 <__adddf3>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	462b      	mov	r3, r5
 8009e42:	f7f6 fb85 	bl	8000550 <__aeabi_dmul>
 8009e46:	a336      	add	r3, pc, #216	; (adr r3, 8009f20 <__kernel_cos+0x160>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f7f6 f9c8 	bl	80001e0 <__aeabi_dsub>
 8009e50:	4622      	mov	r2, r4
 8009e52:	462b      	mov	r3, r5
 8009e54:	f7f6 fb7c 	bl	8000550 <__aeabi_dmul>
 8009e58:	a333      	add	r3, pc, #204	; (adr r3, 8009f28 <__kernel_cos+0x168>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7f6 f9c1 	bl	80001e4 <__adddf3>
 8009e62:	4622      	mov	r2, r4
 8009e64:	462b      	mov	r3, r5
 8009e66:	f7f6 fb73 	bl	8000550 <__aeabi_dmul>
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	f7f6 fb6f 	bl	8000550 <__aeabi_dmul>
 8009e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	f7f6 fb67 	bl	8000550 <__aeabi_dmul>
 8009e82:	460b      	mov	r3, r1
 8009e84:	4602      	mov	r2, r0
 8009e86:	4629      	mov	r1, r5
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f7f6 f9a9 	bl	80001e0 <__aeabi_dsub>
 8009e8e:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <__kernel_cos+0x17c>)
 8009e90:	4598      	cmp	r8, r3
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	dc10      	bgt.n	8009eba <__kernel_cos+0xfa>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4650      	mov	r0, sl
 8009e9e:	4659      	mov	r1, fp
 8009ea0:	f7f6 f99e 	bl	80001e0 <__aeabi_dsub>
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4926      	ldr	r1, [pc, #152]	; (8009f40 <__kernel_cos+0x180>)
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	2000      	movs	r0, #0
 8009eac:	f7f6 f998 	bl	80001e0 <__aeabi_dsub>
 8009eb0:	ec41 0b10 	vmov	d0, r0, r1
 8009eb4:	b003      	add	sp, #12
 8009eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eba:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <__kernel_cos+0x184>)
 8009ebc:	4920      	ldr	r1, [pc, #128]	; (8009f40 <__kernel_cos+0x180>)
 8009ebe:	4598      	cmp	r8, r3
 8009ec0:	bfcc      	ite	gt
 8009ec2:	4d21      	ldrgt	r5, [pc, #132]	; (8009f48 <__kernel_cos+0x188>)
 8009ec4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009ec8:	2400      	movs	r4, #0
 8009eca:	4622      	mov	r2, r4
 8009ecc:	462b      	mov	r3, r5
 8009ece:	2000      	movs	r0, #0
 8009ed0:	f7f6 f986 	bl	80001e0 <__aeabi_dsub>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	4689      	mov	r9, r1
 8009eda:	462b      	mov	r3, r5
 8009edc:	4650      	mov	r0, sl
 8009ede:	4659      	mov	r1, fp
 8009ee0:	f7f6 f97e 	bl	80001e0 <__aeabi_dsub>
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	f7f6 f97a 	bl	80001e0 <__aeabi_dsub>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	e7da      	b.n	8009eac <__kernel_cos+0xec>
 8009ef6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009f30 <__kernel_cos+0x170>
 8009efa:	e7db      	b.n	8009eb4 <__kernel_cos+0xf4>
 8009efc:	f3af 8000 	nop.w
 8009f00:	be8838d4 	.word	0xbe8838d4
 8009f04:	bda8fae9 	.word	0xbda8fae9
 8009f08:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f0c:	3e21ee9e 	.word	0x3e21ee9e
 8009f10:	809c52ad 	.word	0x809c52ad
 8009f14:	3e927e4f 	.word	0x3e927e4f
 8009f18:	19cb1590 	.word	0x19cb1590
 8009f1c:	3efa01a0 	.word	0x3efa01a0
 8009f20:	16c15177 	.word	0x16c15177
 8009f24:	3f56c16c 	.word	0x3f56c16c
 8009f28:	5555554c 	.word	0x5555554c
 8009f2c:	3fa55555 	.word	0x3fa55555
 8009f30:	00000000 	.word	0x00000000
 8009f34:	3ff00000 	.word	0x3ff00000
 8009f38:	3fe00000 	.word	0x3fe00000
 8009f3c:	3fd33332 	.word	0x3fd33332
 8009f40:	3ff00000 	.word	0x3ff00000
 8009f44:	3fe90000 	.word	0x3fe90000
 8009f48:	3fd20000 	.word	0x3fd20000
 8009f4c:	00000000 	.word	0x00000000

08009f50 <__kernel_rem_pio2>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	ed2d 8b02 	vpush	{d8}
 8009f58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009f5c:	f112 0f14 	cmn.w	r2, #20
 8009f60:	9308      	str	r3, [sp, #32]
 8009f62:	9101      	str	r1, [sp, #4]
 8009f64:	4bc4      	ldr	r3, [pc, #784]	; (800a278 <__kernel_rem_pio2+0x328>)
 8009f66:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009f68:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	9b08      	ldr	r3, [sp, #32]
 8009f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f76:	bfa8      	it	ge
 8009f78:	1ed4      	subge	r4, r2, #3
 8009f7a:	9306      	str	r3, [sp, #24]
 8009f7c:	bfb2      	itee	lt
 8009f7e:	2400      	movlt	r4, #0
 8009f80:	2318      	movge	r3, #24
 8009f82:	fb94 f4f3 	sdivge	r4, r4, r3
 8009f86:	f06f 0317 	mvn.w	r3, #23
 8009f8a:	fb04 3303 	mla	r3, r4, r3, r3
 8009f8e:	eb03 0a02 	add.w	sl, r3, r2
 8009f92:	9b02      	ldr	r3, [sp, #8]
 8009f94:	9a06      	ldr	r2, [sp, #24]
 8009f96:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a268 <__kernel_rem_pio2+0x318>
 8009f9a:	eb03 0802 	add.w	r8, r3, r2
 8009f9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009fa0:	1aa7      	subs	r7, r4, r2
 8009fa2:	ae22      	add	r6, sp, #136	; 0x88
 8009fa4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009fa8:	2500      	movs	r5, #0
 8009faa:	4545      	cmp	r5, r8
 8009fac:	dd13      	ble.n	8009fd6 <__kernel_rem_pio2+0x86>
 8009fae:	9b08      	ldr	r3, [sp, #32]
 8009fb0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a268 <__kernel_rem_pio2+0x318>
 8009fb4:	aa22      	add	r2, sp, #136	; 0x88
 8009fb6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009fba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	4598      	cmp	r8, r3
 8009fc6:	dc2f      	bgt.n	800a028 <__kernel_rem_pio2+0xd8>
 8009fc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009fcc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009fd0:	462f      	mov	r7, r5
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	e01b      	b.n	800a00e <__kernel_rem_pio2+0xbe>
 8009fd6:	42ef      	cmn	r7, r5
 8009fd8:	d407      	bmi.n	8009fea <__kernel_rem_pio2+0x9a>
 8009fda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009fde:	f7f6 fa4d 	bl	800047c <__aeabi_i2d>
 8009fe2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009fe6:	3501      	adds	r5, #1
 8009fe8:	e7df      	b.n	8009faa <__kernel_rem_pio2+0x5a>
 8009fea:	ec51 0b18 	vmov	r0, r1, d8
 8009fee:	e7f8      	b.n	8009fe2 <__kernel_rem_pio2+0x92>
 8009ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009ff8:	f7f6 faaa 	bl	8000550 <__aeabi_dmul>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a004:	f7f6 f8ee 	bl	80001e4 <__adddf3>
 800a008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a00c:	3601      	adds	r6, #1
 800a00e:	9b06      	ldr	r3, [sp, #24]
 800a010:	429e      	cmp	r6, r3
 800a012:	f1a7 0708 	sub.w	r7, r7, #8
 800a016:	ddeb      	ble.n	8009ff0 <__kernel_rem_pio2+0xa0>
 800a018:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a01c:	f108 0801 	add.w	r8, r8, #1
 800a020:	ecab 7b02 	vstmia	fp!, {d7}
 800a024:	3508      	adds	r5, #8
 800a026:	e7cc      	b.n	8009fc2 <__kernel_rem_pio2+0x72>
 800a028:	9b02      	ldr	r3, [sp, #8]
 800a02a:	aa0e      	add	r2, sp, #56	; 0x38
 800a02c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a030:	930d      	str	r3, [sp, #52]	; 0x34
 800a032:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a034:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a038:	9c02      	ldr	r4, [sp, #8]
 800a03a:	930c      	str	r3, [sp, #48]	; 0x30
 800a03c:	00e3      	lsls	r3, r4, #3
 800a03e:	930a      	str	r3, [sp, #40]	; 0x28
 800a040:	ab9a      	add	r3, sp, #616	; 0x268
 800a042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a046:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a04a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a04e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a050:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a054:	46c3      	mov	fp, r8
 800a056:	46a1      	mov	r9, r4
 800a058:	f1b9 0f00 	cmp.w	r9, #0
 800a05c:	f1a5 0508 	sub.w	r5, r5, #8
 800a060:	dc77      	bgt.n	800a152 <__kernel_rem_pio2+0x202>
 800a062:	ec47 6b10 	vmov	d0, r6, r7
 800a066:	4650      	mov	r0, sl
 800a068:	f000 fc0a 	bl	800a880 <scalbn>
 800a06c:	ec57 6b10 	vmov	r6, r7, d0
 800a070:	2200      	movs	r2, #0
 800a072:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a076:	ee10 0a10 	vmov	r0, s0
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 fa68 	bl	8000550 <__aeabi_dmul>
 800a080:	ec41 0b10 	vmov	d0, r0, r1
 800a084:	f000 fb7c 	bl	800a780 <floor>
 800a088:	4b7c      	ldr	r3, [pc, #496]	; (800a27c <__kernel_rem_pio2+0x32c>)
 800a08a:	ec51 0b10 	vmov	r0, r1, d0
 800a08e:	2200      	movs	r2, #0
 800a090:	f7f6 fa5e 	bl	8000550 <__aeabi_dmul>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7f6 f8a0 	bl	80001e0 <__aeabi_dsub>
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	f7f6 fcee 	bl	8000a84 <__aeabi_d2iz>
 800a0a8:	9004      	str	r0, [sp, #16]
 800a0aa:	f7f6 f9e7 	bl	800047c <__aeabi_i2d>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 f893 	bl	80001e0 <__aeabi_dsub>
 800a0ba:	f1ba 0f00 	cmp.w	sl, #0
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	dd6d      	ble.n	800a1a0 <__kernel_rem_pio2+0x250>
 800a0c4:	1e62      	subs	r2, r4, #1
 800a0c6:	ab0e      	add	r3, sp, #56	; 0x38
 800a0c8:	9d04      	ldr	r5, [sp, #16]
 800a0ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a0ce:	f1ca 0118 	rsb	r1, sl, #24
 800a0d2:	fa40 f301 	asr.w	r3, r0, r1
 800a0d6:	441d      	add	r5, r3
 800a0d8:	408b      	lsls	r3, r1
 800a0da:	1ac0      	subs	r0, r0, r3
 800a0dc:	ab0e      	add	r3, sp, #56	; 0x38
 800a0de:	9504      	str	r5, [sp, #16]
 800a0e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a0e4:	f1ca 0317 	rsb	r3, sl, #23
 800a0e8:	fa40 fb03 	asr.w	fp, r0, r3
 800a0ec:	f1bb 0f00 	cmp.w	fp, #0
 800a0f0:	dd65      	ble.n	800a1be <__kernel_rem_pio2+0x26e>
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	4615      	mov	r5, r2
 800a0fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a100:	4294      	cmp	r4, r2
 800a102:	f300 809c 	bgt.w	800a23e <__kernel_rem_pio2+0x2ee>
 800a106:	f1ba 0f00 	cmp.w	sl, #0
 800a10a:	dd07      	ble.n	800a11c <__kernel_rem_pio2+0x1cc>
 800a10c:	f1ba 0f01 	cmp.w	sl, #1
 800a110:	f000 80c0 	beq.w	800a294 <__kernel_rem_pio2+0x344>
 800a114:	f1ba 0f02 	cmp.w	sl, #2
 800a118:	f000 80c6 	beq.w	800a2a8 <__kernel_rem_pio2+0x358>
 800a11c:	f1bb 0f02 	cmp.w	fp, #2
 800a120:	d14d      	bne.n	800a1be <__kernel_rem_pio2+0x26e>
 800a122:	4632      	mov	r2, r6
 800a124:	463b      	mov	r3, r7
 800a126:	4956      	ldr	r1, [pc, #344]	; (800a280 <__kernel_rem_pio2+0x330>)
 800a128:	2000      	movs	r0, #0
 800a12a:	f7f6 f859 	bl	80001e0 <__aeabi_dsub>
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	2d00      	cmp	r5, #0
 800a134:	d043      	beq.n	800a1be <__kernel_rem_pio2+0x26e>
 800a136:	4650      	mov	r0, sl
 800a138:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a270 <__kernel_rem_pio2+0x320>
 800a13c:	f000 fba0 	bl	800a880 <scalbn>
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	ec53 2b10 	vmov	r2, r3, d0
 800a148:	f7f6 f84a 	bl	80001e0 <__aeabi_dsub>
 800a14c:	4606      	mov	r6, r0
 800a14e:	460f      	mov	r7, r1
 800a150:	e035      	b.n	800a1be <__kernel_rem_pio2+0x26e>
 800a152:	4b4c      	ldr	r3, [pc, #304]	; (800a284 <__kernel_rem_pio2+0x334>)
 800a154:	2200      	movs	r2, #0
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 f9f9 	bl	8000550 <__aeabi_dmul>
 800a15e:	f7f6 fc91 	bl	8000a84 <__aeabi_d2iz>
 800a162:	f7f6 f98b 	bl	800047c <__aeabi_i2d>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	ec43 2b18 	vmov	d8, r2, r3
 800a16e:	4b46      	ldr	r3, [pc, #280]	; (800a288 <__kernel_rem_pio2+0x338>)
 800a170:	2200      	movs	r2, #0
 800a172:	f7f6 f9ed 	bl	8000550 <__aeabi_dmul>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 f82f 	bl	80001e0 <__aeabi_dsub>
 800a182:	f7f6 fc7f 	bl	8000a84 <__aeabi_d2iz>
 800a186:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a18a:	f84b 0b04 	str.w	r0, [fp], #4
 800a18e:	ec51 0b18 	vmov	r0, r1, d8
 800a192:	f7f6 f827 	bl	80001e4 <__adddf3>
 800a196:	f109 39ff 	add.w	r9, r9, #4294967295
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	e75b      	b.n	800a058 <__kernel_rem_pio2+0x108>
 800a1a0:	d106      	bne.n	800a1b0 <__kernel_rem_pio2+0x260>
 800a1a2:	1e63      	subs	r3, r4, #1
 800a1a4:	aa0e      	add	r2, sp, #56	; 0x38
 800a1a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a1aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a1ae:	e79d      	b.n	800a0ec <__kernel_rem_pio2+0x19c>
 800a1b0:	4b36      	ldr	r3, [pc, #216]	; (800a28c <__kernel_rem_pio2+0x33c>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f7f6 fc52 	bl	8000a5c <__aeabi_dcmpge>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d13d      	bne.n	800a238 <__kernel_rem_pio2+0x2e8>
 800a1bc:	4683      	mov	fp, r0
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	f7f6 fc2b 	bl	8000a20 <__aeabi_dcmpeq>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f000 80c0 	beq.w	800a350 <__kernel_rem_pio2+0x400>
 800a1d0:	1e65      	subs	r5, r4, #1
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	9902      	ldr	r1, [sp, #8]
 800a1d8:	428b      	cmp	r3, r1
 800a1da:	da6c      	bge.n	800a2b6 <__kernel_rem_pio2+0x366>
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	f000 8089 	beq.w	800a2f4 <__kernel_rem_pio2+0x3a4>
 800a1e2:	ab0e      	add	r3, sp, #56	; 0x38
 800a1e4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a1e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 80ad 	beq.w	800a34c <__kernel_rem_pio2+0x3fc>
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a270 <__kernel_rem_pio2+0x320>
 800a1f8:	f000 fb42 	bl	800a880 <scalbn>
 800a1fc:	ab9a      	add	r3, sp, #616	; 0x268
 800a1fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a202:	ec57 6b10 	vmov	r6, r7, d0
 800a206:	00ec      	lsls	r4, r5, #3
 800a208:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a20c:	46aa      	mov	sl, r5
 800a20e:	f1ba 0f00 	cmp.w	sl, #0
 800a212:	f280 80d6 	bge.w	800a3c2 <__kernel_rem_pio2+0x472>
 800a216:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a268 <__kernel_rem_pio2+0x318>
 800a21a:	462e      	mov	r6, r5
 800a21c:	2e00      	cmp	r6, #0
 800a21e:	f2c0 8104 	blt.w	800a42a <__kernel_rem_pio2+0x4da>
 800a222:	ab72      	add	r3, sp, #456	; 0x1c8
 800a224:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a228:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a290 <__kernel_rem_pio2+0x340>
 800a22c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	1baf      	subs	r7, r5, r6
 800a236:	e0ea      	b.n	800a40e <__kernel_rem_pio2+0x4be>
 800a238:	f04f 0b02 	mov.w	fp, #2
 800a23c:	e759      	b.n	800a0f2 <__kernel_rem_pio2+0x1a2>
 800a23e:	f8d8 3000 	ldr.w	r3, [r8]
 800a242:	b955      	cbnz	r5, 800a25a <__kernel_rem_pio2+0x30a>
 800a244:	b123      	cbz	r3, 800a250 <__kernel_rem_pio2+0x300>
 800a246:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a24a:	f8c8 3000 	str.w	r3, [r8]
 800a24e:	2301      	movs	r3, #1
 800a250:	3201      	adds	r2, #1
 800a252:	f108 0804 	add.w	r8, r8, #4
 800a256:	461d      	mov	r5, r3
 800a258:	e752      	b.n	800a100 <__kernel_rem_pio2+0x1b0>
 800a25a:	1acb      	subs	r3, r1, r3
 800a25c:	f8c8 3000 	str.w	r3, [r8]
 800a260:	462b      	mov	r3, r5
 800a262:	e7f5      	b.n	800a250 <__kernel_rem_pio2+0x300>
 800a264:	f3af 8000 	nop.w
	...
 800a274:	3ff00000 	.word	0x3ff00000
 800a278:	0800bb70 	.word	0x0800bb70
 800a27c:	40200000 	.word	0x40200000
 800a280:	3ff00000 	.word	0x3ff00000
 800a284:	3e700000 	.word	0x3e700000
 800a288:	41700000 	.word	0x41700000
 800a28c:	3fe00000 	.word	0x3fe00000
 800a290:	0800bb30 	.word	0x0800bb30
 800a294:	1e62      	subs	r2, r4, #1
 800a296:	ab0e      	add	r3, sp, #56	; 0x38
 800a298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a2a0:	a90e      	add	r1, sp, #56	; 0x38
 800a2a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a2a6:	e739      	b.n	800a11c <__kernel_rem_pio2+0x1cc>
 800a2a8:	1e62      	subs	r2, r4, #1
 800a2aa:	ab0e      	add	r3, sp, #56	; 0x38
 800a2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a2b4:	e7f4      	b.n	800a2a0 <__kernel_rem_pio2+0x350>
 800a2b6:	a90e      	add	r1, sp, #56	; 0x38
 800a2b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	e789      	b.n	800a1d6 <__kernel_rem_pio2+0x286>
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	d0fa      	beq.n	800a2c2 <__kernel_rem_pio2+0x372>
 800a2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a2d2:	446a      	add	r2, sp
 800a2d4:	3a98      	subs	r2, #152	; 0x98
 800a2d6:	920a      	str	r2, [sp, #40]	; 0x28
 800a2d8:	9a08      	ldr	r2, [sp, #32]
 800a2da:	18e3      	adds	r3, r4, r3
 800a2dc:	18a5      	adds	r5, r4, r2
 800a2de:	aa22      	add	r2, sp, #136	; 0x88
 800a2e0:	f104 0801 	add.w	r8, r4, #1
 800a2e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	da04      	bge.n	800a2fa <__kernel_rem_pio2+0x3aa>
 800a2f0:	461c      	mov	r4, r3
 800a2f2:	e6a3      	b.n	800a03c <__kernel_rem_pio2+0xec>
 800a2f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e7e4      	b.n	800a2c4 <__kernel_rem_pio2+0x374>
 800a2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a300:	f7f6 f8bc 	bl	800047c <__aeabi_i2d>
 800a304:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a30a:	46ab      	mov	fp, r5
 800a30c:	461c      	mov	r4, r3
 800a30e:	f04f 0900 	mov.w	r9, #0
 800a312:	2600      	movs	r6, #0
 800a314:	2700      	movs	r7, #0
 800a316:	9b06      	ldr	r3, [sp, #24]
 800a318:	4599      	cmp	r9, r3
 800a31a:	dd06      	ble.n	800a32a <__kernel_rem_pio2+0x3da>
 800a31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a322:	f108 0801 	add.w	r8, r8, #1
 800a326:	930a      	str	r3, [sp, #40]	; 0x28
 800a328:	e7df      	b.n	800a2ea <__kernel_rem_pio2+0x39a>
 800a32a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a32e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a332:	f7f6 f90d 	bl	8000550 <__aeabi_dmul>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ff51 	bl	80001e4 <__adddf3>
 800a342:	f109 0901 	add.w	r9, r9, #1
 800a346:	4606      	mov	r6, r0
 800a348:	460f      	mov	r7, r1
 800a34a:	e7e4      	b.n	800a316 <__kernel_rem_pio2+0x3c6>
 800a34c:	3d01      	subs	r5, #1
 800a34e:	e748      	b.n	800a1e2 <__kernel_rem_pio2+0x292>
 800a350:	ec47 6b10 	vmov	d0, r6, r7
 800a354:	f1ca 0000 	rsb	r0, sl, #0
 800a358:	f000 fa92 	bl	800a880 <scalbn>
 800a35c:	ec57 6b10 	vmov	r6, r7, d0
 800a360:	4ba0      	ldr	r3, [pc, #640]	; (800a5e4 <__kernel_rem_pio2+0x694>)
 800a362:	ee10 0a10 	vmov	r0, s0
 800a366:	2200      	movs	r2, #0
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f6 fb77 	bl	8000a5c <__aeabi_dcmpge>
 800a36e:	b1f8      	cbz	r0, 800a3b0 <__kernel_rem_pio2+0x460>
 800a370:	4b9d      	ldr	r3, [pc, #628]	; (800a5e8 <__kernel_rem_pio2+0x698>)
 800a372:	2200      	movs	r2, #0
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f6 f8ea 	bl	8000550 <__aeabi_dmul>
 800a37c:	f7f6 fb82 	bl	8000a84 <__aeabi_d2iz>
 800a380:	4680      	mov	r8, r0
 800a382:	f7f6 f87b 	bl	800047c <__aeabi_i2d>
 800a386:	4b97      	ldr	r3, [pc, #604]	; (800a5e4 <__kernel_rem_pio2+0x694>)
 800a388:	2200      	movs	r2, #0
 800a38a:	f7f6 f8e1 	bl	8000550 <__aeabi_dmul>
 800a38e:	460b      	mov	r3, r1
 800a390:	4602      	mov	r2, r0
 800a392:	4639      	mov	r1, r7
 800a394:	4630      	mov	r0, r6
 800a396:	f7f5 ff23 	bl	80001e0 <__aeabi_dsub>
 800a39a:	f7f6 fb73 	bl	8000a84 <__aeabi_d2iz>
 800a39e:	1c65      	adds	r5, r4, #1
 800a3a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a3a2:	f10a 0a18 	add.w	sl, sl, #24
 800a3a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a3aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a3ae:	e720      	b.n	800a1f2 <__kernel_rem_pio2+0x2a2>
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f6 fb66 	bl	8000a84 <__aeabi_d2iz>
 800a3b8:	ab0e      	add	r3, sp, #56	; 0x38
 800a3ba:	4625      	mov	r5, r4
 800a3bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a3c0:	e717      	b.n	800a1f2 <__kernel_rem_pio2+0x2a2>
 800a3c2:	ab0e      	add	r3, sp, #56	; 0x38
 800a3c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a3c8:	f7f6 f858 	bl	800047c <__aeabi_i2d>
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	f7f6 f8be 	bl	8000550 <__aeabi_dmul>
 800a3d4:	4b84      	ldr	r3, [pc, #528]	; (800a5e8 <__kernel_rem_pio2+0x698>)
 800a3d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 f8b6 	bl	8000550 <__aeabi_dmul>
 800a3e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	460f      	mov	r7, r1
 800a3ec:	e70f      	b.n	800a20e <__kernel_rem_pio2+0x2be>
 800a3ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a3f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a3f6:	f7f6 f8ab 	bl	8000550 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a402:	f7f5 feef 	bl	80001e4 <__adddf3>
 800a406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a40a:	f108 0801 	add.w	r8, r8, #1
 800a40e:	9b02      	ldr	r3, [sp, #8]
 800a410:	4598      	cmp	r8, r3
 800a412:	dc01      	bgt.n	800a418 <__kernel_rem_pio2+0x4c8>
 800a414:	45b8      	cmp	r8, r7
 800a416:	ddea      	ble.n	800a3ee <__kernel_rem_pio2+0x49e>
 800a418:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a41c:	ab4a      	add	r3, sp, #296	; 0x128
 800a41e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a422:	ed87 7b00 	vstr	d7, [r7]
 800a426:	3e01      	subs	r6, #1
 800a428:	e6f8      	b.n	800a21c <__kernel_rem_pio2+0x2cc>
 800a42a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	dc0b      	bgt.n	800a448 <__kernel_rem_pio2+0x4f8>
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc35      	bgt.n	800a4a0 <__kernel_rem_pio2+0x550>
 800a434:	d059      	beq.n	800a4ea <__kernel_rem_pio2+0x59a>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	f003 0007 	and.w	r0, r3, #7
 800a43c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a440:	ecbd 8b02 	vpop	{d8}
 800a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a448:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d1f3      	bne.n	800a436 <__kernel_rem_pio2+0x4e6>
 800a44e:	ab4a      	add	r3, sp, #296	; 0x128
 800a450:	4423      	add	r3, r4
 800a452:	9306      	str	r3, [sp, #24]
 800a454:	461c      	mov	r4, r3
 800a456:	469a      	mov	sl, r3
 800a458:	9502      	str	r5, [sp, #8]
 800a45a:	9b02      	ldr	r3, [sp, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a462:	dc6b      	bgt.n	800a53c <__kernel_rem_pio2+0x5ec>
 800a464:	46aa      	mov	sl, r5
 800a466:	f1ba 0f01 	cmp.w	sl, #1
 800a46a:	f1a4 0408 	sub.w	r4, r4, #8
 800a46e:	f300 8085 	bgt.w	800a57c <__kernel_rem_pio2+0x62c>
 800a472:	9c06      	ldr	r4, [sp, #24]
 800a474:	2000      	movs	r0, #0
 800a476:	3408      	adds	r4, #8
 800a478:	2100      	movs	r1, #0
 800a47a:	2d01      	cmp	r5, #1
 800a47c:	f300 809d 	bgt.w	800a5ba <__kernel_rem_pio2+0x66a>
 800a480:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a484:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a488:	f1bb 0f00 	cmp.w	fp, #0
 800a48c:	f040 809b 	bne.w	800a5c6 <__kernel_rem_pio2+0x676>
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	e9c3 5600 	strd	r5, r6, [r3]
 800a496:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a49a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a49e:	e7ca      	b.n	800a436 <__kernel_rem_pio2+0x4e6>
 800a4a0:	3408      	adds	r4, #8
 800a4a2:	ab4a      	add	r3, sp, #296	; 0x128
 800a4a4:	441c      	add	r4, r3
 800a4a6:	462e      	mov	r6, r5
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	da36      	bge.n	800a51e <__kernel_rem_pio2+0x5ce>
 800a4b0:	f1bb 0f00 	cmp.w	fp, #0
 800a4b4:	d039      	beq.n	800a52a <__kernel_rem_pio2+0x5da>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4bc:	9c01      	ldr	r4, [sp, #4]
 800a4be:	e9c4 2300 	strd	r2, r3, [r4]
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a4ca:	f7f5 fe89 	bl	80001e0 <__aeabi_dsub>
 800a4ce:	ae4c      	add	r6, sp, #304	; 0x130
 800a4d0:	2401      	movs	r4, #1
 800a4d2:	42a5      	cmp	r5, r4
 800a4d4:	da2c      	bge.n	800a530 <__kernel_rem_pio2+0x5e0>
 800a4d6:	f1bb 0f00 	cmp.w	fp, #0
 800a4da:	d002      	beq.n	800a4e2 <__kernel_rem_pio2+0x592>
 800a4dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a4e8:	e7a5      	b.n	800a436 <__kernel_rem_pio2+0x4e6>
 800a4ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a4ee:	eb0d 0403 	add.w	r4, sp, r3
 800a4f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	da09      	bge.n	800a512 <__kernel_rem_pio2+0x5c2>
 800a4fe:	f1bb 0f00 	cmp.w	fp, #0
 800a502:	d002      	beq.n	800a50a <__kernel_rem_pio2+0x5ba>
 800a504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a508:	4619      	mov	r1, r3
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	e9c3 0100 	strd	r0, r1, [r3]
 800a510:	e791      	b.n	800a436 <__kernel_rem_pio2+0x4e6>
 800a512:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a516:	f7f5 fe65 	bl	80001e4 <__adddf3>
 800a51a:	3d01      	subs	r5, #1
 800a51c:	e7ed      	b.n	800a4fa <__kernel_rem_pio2+0x5aa>
 800a51e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a522:	f7f5 fe5f 	bl	80001e4 <__adddf3>
 800a526:	3e01      	subs	r6, #1
 800a528:	e7c0      	b.n	800a4ac <__kernel_rem_pio2+0x55c>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	e7c5      	b.n	800a4bc <__kernel_rem_pio2+0x56c>
 800a530:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a534:	f7f5 fe56 	bl	80001e4 <__adddf3>
 800a538:	3401      	adds	r4, #1
 800a53a:	e7ca      	b.n	800a4d2 <__kernel_rem_pio2+0x582>
 800a53c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a540:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a544:	9b02      	ldr	r3, [sp, #8]
 800a546:	3b01      	subs	r3, #1
 800a548:	9302      	str	r3, [sp, #8]
 800a54a:	4632      	mov	r2, r6
 800a54c:	463b      	mov	r3, r7
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f5 fe47 	bl	80001e4 <__adddf3>
 800a556:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	f7f5 fe3d 	bl	80001e0 <__aeabi_dsub>
 800a566:	4632      	mov	r2, r6
 800a568:	463b      	mov	r3, r7
 800a56a:	f7f5 fe3b 	bl	80001e4 <__adddf3>
 800a56e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a572:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a576:	ed8a 7b00 	vstr	d7, [sl]
 800a57a:	e76e      	b.n	800a45a <__kernel_rem_pio2+0x50a>
 800a57c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a580:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a584:	4640      	mov	r0, r8
 800a586:	4632      	mov	r2, r6
 800a588:	463b      	mov	r3, r7
 800a58a:	4649      	mov	r1, r9
 800a58c:	f7f5 fe2a 	bl	80001e4 <__adddf3>
 800a590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f5 fe20 	bl	80001e0 <__aeabi_dsub>
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	f7f5 fe1e 	bl	80001e4 <__adddf3>
 800a5a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5b0:	ed84 7b00 	vstr	d7, [r4]
 800a5b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5b8:	e755      	b.n	800a466 <__kernel_rem_pio2+0x516>
 800a5ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a5be:	f7f5 fe11 	bl	80001e4 <__adddf3>
 800a5c2:	3d01      	subs	r5, #1
 800a5c4:	e759      	b.n	800a47a <__kernel_rem_pio2+0x52a>
 800a5c6:	9b01      	ldr	r3, [sp, #4]
 800a5c8:	9a01      	ldr	r2, [sp, #4]
 800a5ca:	601d      	str	r5, [r3, #0]
 800a5cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a5d0:	605c      	str	r4, [r3, #4]
 800a5d2:	609f      	str	r7, [r3, #8]
 800a5d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a5d8:	60d3      	str	r3, [r2, #12]
 800a5da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5de:	6110      	str	r0, [r2, #16]
 800a5e0:	6153      	str	r3, [r2, #20]
 800a5e2:	e728      	b.n	800a436 <__kernel_rem_pio2+0x4e6>
 800a5e4:	41700000 	.word	0x41700000
 800a5e8:	3e700000 	.word	0x3e700000
 800a5ec:	00000000 	.word	0x00000000

0800a5f0 <__kernel_sin>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	ed2d 8b04 	vpush	{d8-d9}
 800a5f8:	eeb0 8a41 	vmov.f32	s16, s2
 800a5fc:	eef0 8a61 	vmov.f32	s17, s3
 800a600:	ec55 4b10 	vmov	r4, r5, d0
 800a604:	b083      	sub	sp, #12
 800a606:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a60a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a60e:	9001      	str	r0, [sp, #4]
 800a610:	da06      	bge.n	800a620 <__kernel_sin+0x30>
 800a612:	ee10 0a10 	vmov	r0, s0
 800a616:	4629      	mov	r1, r5
 800a618:	f7f6 fa34 	bl	8000a84 <__aeabi_d2iz>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d051      	beq.n	800a6c4 <__kernel_sin+0xd4>
 800a620:	4622      	mov	r2, r4
 800a622:	462b      	mov	r3, r5
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f7f5 ff92 	bl	8000550 <__aeabi_dmul>
 800a62c:	4682      	mov	sl, r0
 800a62e:	468b      	mov	fp, r1
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 ff8a 	bl	8000550 <__aeabi_dmul>
 800a63c:	a341      	add	r3, pc, #260	; (adr r3, 800a744 <__kernel_sin+0x154>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	4680      	mov	r8, r0
 800a644:	4689      	mov	r9, r1
 800a646:	4650      	mov	r0, sl
 800a648:	4659      	mov	r1, fp
 800a64a:	f7f5 ff81 	bl	8000550 <__aeabi_dmul>
 800a64e:	a33f      	add	r3, pc, #252	; (adr r3, 800a74c <__kernel_sin+0x15c>)
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	f7f5 fdc4 	bl	80001e0 <__aeabi_dsub>
 800a658:	4652      	mov	r2, sl
 800a65a:	465b      	mov	r3, fp
 800a65c:	f7f5 ff78 	bl	8000550 <__aeabi_dmul>
 800a660:	a33c      	add	r3, pc, #240	; (adr r3, 800a754 <__kernel_sin+0x164>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 fdbd 	bl	80001e4 <__adddf3>
 800a66a:	4652      	mov	r2, sl
 800a66c:	465b      	mov	r3, fp
 800a66e:	f7f5 ff6f 	bl	8000550 <__aeabi_dmul>
 800a672:	a33a      	add	r3, pc, #232	; (adr r3, 800a75c <__kernel_sin+0x16c>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 fdb2 	bl	80001e0 <__aeabi_dsub>
 800a67c:	4652      	mov	r2, sl
 800a67e:	465b      	mov	r3, fp
 800a680:	f7f5 ff66 	bl	8000550 <__aeabi_dmul>
 800a684:	a337      	add	r3, pc, #220	; (adr r3, 800a764 <__kernel_sin+0x174>)
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	f7f5 fdab 	bl	80001e4 <__adddf3>
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	4606      	mov	r6, r0
 800a692:	460f      	mov	r7, r1
 800a694:	b9eb      	cbnz	r3, 800a6d2 <__kernel_sin+0xe2>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4650      	mov	r0, sl
 800a69c:	4659      	mov	r1, fp
 800a69e:	f7f5 ff57 	bl	8000550 <__aeabi_dmul>
 800a6a2:	a325      	add	r3, pc, #148	; (adr r3, 800a738 <__kernel_sin+0x148>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f7f5 fd9a 	bl	80001e0 <__aeabi_dsub>
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	f7f5 ff4e 	bl	8000550 <__aeabi_dmul>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7f5 fd92 	bl	80001e4 <__adddf3>
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	ec45 4b10 	vmov	d0, r4, r5
 800a6c8:	b003      	add	sp, #12
 800a6ca:	ecbd 8b04 	vpop	{d8-d9}
 800a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d2:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <__kernel_sin+0x150>)
 800a6d4:	ec51 0b18 	vmov	r0, r1, d8
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f7f5 ff39 	bl	8000550 <__aeabi_dmul>
 800a6de:	4632      	mov	r2, r6
 800a6e0:	ec41 0b19 	vmov	d9, r0, r1
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f7f5 ff31 	bl	8000550 <__aeabi_dmul>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	ec51 0b19 	vmov	r0, r1, d9
 800a6f6:	f7f5 fd73 	bl	80001e0 <__aeabi_dsub>
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	f7f5 ff27 	bl	8000550 <__aeabi_dmul>
 800a702:	ec53 2b18 	vmov	r2, r3, d8
 800a706:	f7f5 fd6b 	bl	80001e0 <__aeabi_dsub>
 800a70a:	a30b      	add	r3, pc, #44	; (adr r3, 800a738 <__kernel_sin+0x148>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	4606      	mov	r6, r0
 800a712:	460f      	mov	r7, r1
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	f7f5 ff1a 	bl	8000550 <__aeabi_dmul>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4630      	mov	r0, r6
 800a722:	4639      	mov	r1, r7
 800a724:	f7f5 fd5e 	bl	80001e4 <__adddf3>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f5 fd56 	bl	80001e0 <__aeabi_dsub>
 800a734:	e7c4      	b.n	800a6c0 <__kernel_sin+0xd0>
 800a736:	bf00      	nop
 800a738:	55555549 	.word	0x55555549
 800a73c:	3fc55555 	.word	0x3fc55555
 800a740:	3fe00000 	.word	0x3fe00000
 800a744:	5acfd57c 	.word	0x5acfd57c
 800a748:	3de5d93a 	.word	0x3de5d93a
 800a74c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a750:	3e5ae5e6 	.word	0x3e5ae5e6
 800a754:	57b1fe7d 	.word	0x57b1fe7d
 800a758:	3ec71de3 	.word	0x3ec71de3
 800a75c:	19c161d5 	.word	0x19c161d5
 800a760:	3f2a01a0 	.word	0x3f2a01a0
 800a764:	1110f8a6 	.word	0x1110f8a6
 800a768:	3f811111 	.word	0x3f811111

0800a76c <fabs>:
 800a76c:	ec51 0b10 	vmov	r0, r1, d0
 800a770:	ee10 2a10 	vmov	r2, s0
 800a774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a778:	ec43 2b10 	vmov	d0, r2, r3
 800a77c:	4770      	bx	lr
	...

0800a780 <floor>:
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a78c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a790:	2e13      	cmp	r6, #19
 800a792:	ee10 5a10 	vmov	r5, s0
 800a796:	ee10 8a10 	vmov	r8, s0
 800a79a:	460c      	mov	r4, r1
 800a79c:	dc32      	bgt.n	800a804 <floor+0x84>
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	da14      	bge.n	800a7cc <floor+0x4c>
 800a7a2:	a333      	add	r3, pc, #204	; (adr r3, 800a870 <floor+0xf0>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f7f5 fd1c 	bl	80001e4 <__adddf3>
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f7f6 f95e 	bl	8000a70 <__aeabi_dcmpgt>
 800a7b4:	b138      	cbz	r0, 800a7c6 <floor+0x46>
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	da57      	bge.n	800a86a <floor+0xea>
 800a7ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a7be:	431d      	orrs	r5, r3
 800a7c0:	d001      	beq.n	800a7c6 <floor+0x46>
 800a7c2:	4c2d      	ldr	r4, [pc, #180]	; (800a878 <floor+0xf8>)
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e025      	b.n	800a818 <floor+0x98>
 800a7cc:	4f2b      	ldr	r7, [pc, #172]	; (800a87c <floor+0xfc>)
 800a7ce:	4137      	asrs	r7, r6
 800a7d0:	ea01 0307 	and.w	r3, r1, r7
 800a7d4:	4303      	orrs	r3, r0
 800a7d6:	d01f      	beq.n	800a818 <floor+0x98>
 800a7d8:	a325      	add	r3, pc, #148	; (adr r3, 800a870 <floor+0xf0>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f7f5 fd01 	bl	80001e4 <__adddf3>
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f7f6 f943 	bl	8000a70 <__aeabi_dcmpgt>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d0eb      	beq.n	800a7c6 <floor+0x46>
 800a7ee:	2c00      	cmp	r4, #0
 800a7f0:	bfbe      	ittt	lt
 800a7f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a7f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a7fa:	19a4      	addlt	r4, r4, r6
 800a7fc:	ea24 0407 	bic.w	r4, r4, r7
 800a800:	2500      	movs	r5, #0
 800a802:	e7e0      	b.n	800a7c6 <floor+0x46>
 800a804:	2e33      	cmp	r6, #51	; 0x33
 800a806:	dd0b      	ble.n	800a820 <floor+0xa0>
 800a808:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a80c:	d104      	bne.n	800a818 <floor+0x98>
 800a80e:	ee10 2a10 	vmov	r2, s0
 800a812:	460b      	mov	r3, r1
 800a814:	f7f5 fce6 	bl	80001e4 <__adddf3>
 800a818:	ec41 0b10 	vmov	d0, r0, r1
 800a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a820:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	fa23 f707 	lsr.w	r7, r3, r7
 800a82c:	4207      	tst	r7, r0
 800a82e:	d0f3      	beq.n	800a818 <floor+0x98>
 800a830:	a30f      	add	r3, pc, #60	; (adr r3, 800a870 <floor+0xf0>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 fcd5 	bl	80001e4 <__adddf3>
 800a83a:	2200      	movs	r2, #0
 800a83c:	2300      	movs	r3, #0
 800a83e:	f7f6 f917 	bl	8000a70 <__aeabi_dcmpgt>
 800a842:	2800      	cmp	r0, #0
 800a844:	d0bf      	beq.n	800a7c6 <floor+0x46>
 800a846:	2c00      	cmp	r4, #0
 800a848:	da02      	bge.n	800a850 <floor+0xd0>
 800a84a:	2e14      	cmp	r6, #20
 800a84c:	d103      	bne.n	800a856 <floor+0xd6>
 800a84e:	3401      	adds	r4, #1
 800a850:	ea25 0507 	bic.w	r5, r5, r7
 800a854:	e7b7      	b.n	800a7c6 <floor+0x46>
 800a856:	2301      	movs	r3, #1
 800a858:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a85c:	fa03 f606 	lsl.w	r6, r3, r6
 800a860:	4435      	add	r5, r6
 800a862:	4545      	cmp	r5, r8
 800a864:	bf38      	it	cc
 800a866:	18e4      	addcc	r4, r4, r3
 800a868:	e7f2      	b.n	800a850 <floor+0xd0>
 800a86a:	2500      	movs	r5, #0
 800a86c:	462c      	mov	r4, r5
 800a86e:	e7aa      	b.n	800a7c6 <floor+0x46>
 800a870:	8800759c 	.word	0x8800759c
 800a874:	7e37e43c 	.word	0x7e37e43c
 800a878:	bff00000 	.word	0xbff00000
 800a87c:	000fffff 	.word	0x000fffff

0800a880 <scalbn>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	ec55 4b10 	vmov	r4, r5, d0
 800a886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a88a:	4606      	mov	r6, r0
 800a88c:	462b      	mov	r3, r5
 800a88e:	b99a      	cbnz	r2, 800a8b8 <scalbn+0x38>
 800a890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a894:	4323      	orrs	r3, r4
 800a896:	d036      	beq.n	800a906 <scalbn+0x86>
 800a898:	4b39      	ldr	r3, [pc, #228]	; (800a980 <scalbn+0x100>)
 800a89a:	4629      	mov	r1, r5
 800a89c:	ee10 0a10 	vmov	r0, s0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f7f5 fe55 	bl	8000550 <__aeabi_dmul>
 800a8a6:	4b37      	ldr	r3, [pc, #220]	; (800a984 <scalbn+0x104>)
 800a8a8:	429e      	cmp	r6, r3
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	da10      	bge.n	800a8d2 <scalbn+0x52>
 800a8b0:	a32b      	add	r3, pc, #172	; (adr r3, 800a960 <scalbn+0xe0>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	e03a      	b.n	800a92e <scalbn+0xae>
 800a8b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8bc:	428a      	cmp	r2, r1
 800a8be:	d10c      	bne.n	800a8da <scalbn+0x5a>
 800a8c0:	ee10 2a10 	vmov	r2, s0
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fc8c 	bl	80001e4 <__adddf3>
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	e019      	b.n	800a906 <scalbn+0x86>
 800a8d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	3a36      	subs	r2, #54	; 0x36
 800a8da:	4432      	add	r2, r6
 800a8dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8e0:	428a      	cmp	r2, r1
 800a8e2:	dd08      	ble.n	800a8f6 <scalbn+0x76>
 800a8e4:	2d00      	cmp	r5, #0
 800a8e6:	a120      	add	r1, pc, #128	; (adr r1, 800a968 <scalbn+0xe8>)
 800a8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ec:	da1c      	bge.n	800a928 <scalbn+0xa8>
 800a8ee:	a120      	add	r1, pc, #128	; (adr r1, 800a970 <scalbn+0xf0>)
 800a8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f4:	e018      	b.n	800a928 <scalbn+0xa8>
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	dd08      	ble.n	800a90c <scalbn+0x8c>
 800a8fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a902:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a906:	ec45 4b10 	vmov	d0, r4, r5
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a910:	da19      	bge.n	800a946 <scalbn+0xc6>
 800a912:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a916:	429e      	cmp	r6, r3
 800a918:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a91c:	dd0a      	ble.n	800a934 <scalbn+0xb4>
 800a91e:	a112      	add	r1, pc, #72	; (adr r1, 800a968 <scalbn+0xe8>)
 800a920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e2      	bne.n	800a8ee <scalbn+0x6e>
 800a928:	a30f      	add	r3, pc, #60	; (adr r3, 800a968 <scalbn+0xe8>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fe0f 	bl	8000550 <__aeabi_dmul>
 800a932:	e7cb      	b.n	800a8cc <scalbn+0x4c>
 800a934:	a10a      	add	r1, pc, #40	; (adr r1, 800a960 <scalbn+0xe0>)
 800a936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0b8      	beq.n	800a8b0 <scalbn+0x30>
 800a93e:	a10e      	add	r1, pc, #56	; (adr r1, 800a978 <scalbn+0xf8>)
 800a940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a944:	e7b4      	b.n	800a8b0 <scalbn+0x30>
 800a946:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a94a:	3236      	adds	r2, #54	; 0x36
 800a94c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a950:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a954:	4620      	mov	r0, r4
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <scalbn+0x108>)
 800a958:	2200      	movs	r2, #0
 800a95a:	e7e8      	b.n	800a92e <scalbn+0xae>
 800a95c:	f3af 8000 	nop.w
 800a960:	c2f8f359 	.word	0xc2f8f359
 800a964:	01a56e1f 	.word	0x01a56e1f
 800a968:	8800759c 	.word	0x8800759c
 800a96c:	7e37e43c 	.word	0x7e37e43c
 800a970:	8800759c 	.word	0x8800759c
 800a974:	fe37e43c 	.word	0xfe37e43c
 800a978:	c2f8f359 	.word	0xc2f8f359
 800a97c:	81a56e1f 	.word	0x81a56e1f
 800a980:	43500000 	.word	0x43500000
 800a984:	ffff3cb0 	.word	0xffff3cb0
 800a988:	3c900000 	.word	0x3c900000

0800a98c <_init>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	bf00      	nop
 800a990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a992:	bc08      	pop	{r3}
 800a994:	469e      	mov	lr, r3
 800a996:	4770      	bx	lr

0800a998 <_fini>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	bf00      	nop
 800a99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99e:	bc08      	pop	{r3}
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	4770      	bx	lr
